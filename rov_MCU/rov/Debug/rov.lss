
rov.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002dfe  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800100  00800100  00002dfe  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00002dfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00002e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005ed1  00000000  00000000  000031f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011b8  00000000  00000000  000090c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020c8  00000000  00000000  0000a27a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d6c  00000000  00000000  0000c344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000520  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003d45  00000000  00000000  0000d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  00011315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00002d40  00002d40  00002dd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00011678  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.HESC_voidInit 000002dc  0000108a  0000108a  0000111e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.HESC_u8OCR 00000070  0000234a  0000234a  000023de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.HESC_voidChangeOCR 00000014  00002c58  00002c58  00002cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.HESC_voidChangeDirAndSpeed 00000044  000029d2  000029d2  00002a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.HESC_voidChangeSpeed 00000016  00002c16  00002c16  00002caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Init_ESCs 000000ae  00001e92  00001e92  00001f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ChangeAllSpeeds 00000084  0000224c  0000224c  000022e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Up      00000014  00002c6c  00002c6c  00002d00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Down    0000000e  00002ca4  00002ca4  00002d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.check_indexing 0000005a  000024d8  000024d8  0000256c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.correct_angle 0000004e  00002682  00002682  00002716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000c26  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PI2C_u8GetStatus 00000008  00002d22  00002d22  00002db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MI2C_voidSlaveInit 00000050  00002632  00002632  000026c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MI2C_voidSlaveIsCalled 0000004a  00002940  00002940  000029d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MI2C_u8SlaveReadData 00000054  000025de  000025de  00002672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MI2C_u8SlaveReadString 0000003c  00002adc  00002adc  00002b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MANIPPIN_voidInitPin 0000009e  00002082  00002082  00002116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .rodata       00000020  00800131  00002d44  00002dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.MTIM0_voidInit 00000116  000019e8  000019e8  00001a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.MTIM0_voidSetDutyCycle 00000012  00002c80  00002c80  00002d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_16 0000004e  000026d0  000026d0  00002764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_14 0000004e  0000271e  0000271e  000027b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_15 0000004e  0000276c  0000276c  00002800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MTIM1_voidInit 000002d8  00001366  00001366  000013fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.MTIM1_voidSet8BitDutyCycle 00000020  00002b9c  00002b9c  00002c30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.MTIM1_voidEnableInterrupt 00000020  00002bbc  00002bbc  00002c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MTIM1_voidStartTickMeasure 00000030  00002b4a  00002b4a  00002bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.MTIM1_u32GetElapsedTicks 00000056  00002532  00002532  000025c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_13 00000064  000023ba  000023ba  0000244e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__vector_12 0000004e  000027ba  000027ba  0000284e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__vector_11 0000004e  00002808  00002808  0000289c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_10 00000056  00002588  00002588  0000261c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.MTIM0And1_u16ArrGetFirstLargerPrescaler 00000096  00002120  00002120  000021b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.MTIM2_voidInit 00000168  00001880  00001880  00001914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.MTIM2_voidSetDutyCycle 00000016  00002c2c  00002c2c  00002cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000004e  00002856  00002856  000028ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.__vector_7 0000004e  000028a4  000028a4  00002938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.__vector_8 0000004e  000028f2  000028f2  00002986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.MTIM2_u16ArrGetFirstLargerPrescaler 00000096  000021b6  000021b6  0000224a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.MCLOCK_voidDelayMS 00000032  00002b18  00002b18  00002bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.MCLOCK_u32GetSystemClock 0000000a  00002d04  00002d04  00002d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.MATH_u16GetFirstLargerIndex 0000003e  00002a9e  00002a9e  00002b32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.init_PID 00000114  00001afe  00001afe  00001b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.PID_update 0000039c  00000cee  00000cee  00000d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.isPID_time 0000005c  0000247c  0000247c  00002510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc.fplib 0000000e  00002cb2  00002cb2  00002d46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc.fplib 000000ce  00001dc4  00001dc4  00001e58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc.fplib 0000000a  00002d0e  00002d0e  00002da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.avrlibc.fplib 00000008  00002d2a  00002d2a  00002dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.avrlibc.fplib 000000de  00001c12  00001c12  00001ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.avrlibc.fplib 0000000e  00002cc0  00002cc0  00002d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.avrlibc.fplib 0000005e  0000241e  0000241e  000024b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.avrlibc.fplib 0000007a  000022d0  000022d0  00002364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.avrlibc.fplib 00000048  0000298a  0000298a  00002a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.avrlibc.fplib 0000000c  00002cf8  00002cf8  00002d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.avrlibc.fplib 00000006  00002d3a  00002d3a  00002dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.avrlibc.fplib 0000000e  00002cce  00002cce  00002d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.avrlibc.fplib 0000000e  00002cdc  00002cdc  00002d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.avrlibc.fplib 00000022  00002b7a  00002b7a  00002c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.avrlibc.fplib 00000044  00002a16  00002a16  00002aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.avrlibc.fplib 0000000e  00002cea  00002cea  00002d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.avrlibc.fplib 0000000a  00002d18  00002d18  00002dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.avrlibc.fplib 00000008  00002d32  00002d32  00002dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.avrlibc.fplib 000000d4  00001cf0  00001cf0  00001d84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.libgcc.div 00000044  00002a5a  00002a5a  00002aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.libgcc.mul 0000001e  00002bdc  00002bdc  00002c70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc.mul 00000016  00002c42  00002c42  00002cd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.libgcc.mul 000000a0  00001fe2  00001fe2  00002076  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.libgcc.mul 00000012  00002c92  00002c92  00002d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.libgcc.div 0000001c  00002bfa  00002bfa  00002c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.libgcc.div 000000a2  00001f40  00001f40  00001fd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .data         00000006  00800151  00002d64  00002df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 87 .text.avrlibc 00000242  0000163e  0000163e  000016d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
   8:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
   c:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  10:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  14:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  18:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  1c:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__vector_7>
  20:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_8>
  24:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__vector_9>
  28:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__vector_10>
  2c:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__vector_11>
  30:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_12>
  34:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_13>
  38:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__vector_14>
  3c:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__vector_15>
  40:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__vector_16>
  44:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  48:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  4c:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  50:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  54:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  58:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  5c:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  60:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>
  64:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 31       	cpi	r16, 0x11	; 17
  6c:	80 01       	movw	r16, r0
  6e:	31 01       	movw	r6, r2
  70:	57 00       	.word	0x0057	; ????
  72:	2d 44       	sbci	r18, 0x4D	; 77

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00002d40 <__bad_interrupt>:
    2d40:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.HESC_voidInit:

0000108a <HESC_voidInit>:
#include "ESC_interface.h"
#include "MATH.h"
#include <stdlib.h>

void HESC_voidInit(ESC_t* ESC, enum ESCTimers timer, enum ESCChannel channel, u16 minDutyCycle, u16 stpDutyCycle, u16 maxDutyCycle, u16 frequency)
{
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	6f 92       	push	r6
    1094:	7f 92       	push	r7
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	66 97       	sbiw	r28, 0x16	; 22
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	4c 01       	movw	r8, r24
    10c0:	69 87       	std	Y+9, r22	; 0x09
    10c2:	4a 87       	std	Y+10, r20	; 0x0a
	ESC->timer = timer ;
    10c4:	dc 01       	movw	r26, r24
    10c6:	6c 93       	st	X, r22
	ESC->channel = channel ;
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	4c 93       	st	X, r20
    10cc:	11 97       	sbiw	r26, 0x01	; 1
	ESC->minDutyCycle = minDutyCycle ;
    10ce:	a9 01       	movw	r20, r18
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	49 83       	std	Y+1, r20	; 0x01
    10d6:	5a 83       	std	Y+2, r21	; 0x02
    10d8:	6b 83       	std	Y+3, r22	; 0x03
    10da:	7c 83       	std	Y+4, r23	; 0x04
    10dc:	12 96       	adiw	r26, 0x02	; 2
    10de:	4d 93       	st	X+, r20
    10e0:	5d 93       	st	X+, r21
    10e2:	6d 93       	st	X+, r22
    10e4:	7c 93       	st	X, r23
    10e6:	15 97       	sbiw	r26, 0x05	; 5
	ESC->stpDutyCycle = stpDutyCycle ;
    10e8:	28 01       	movw	r4, r16
    10ea:	61 2c       	mov	r6, r1
    10ec:	71 2c       	mov	r7, r1
    10ee:	fc 01       	movw	r30, r24
    10f0:	46 82       	std	Z+6, r4	; 0x06
    10f2:	57 82       	std	Z+7, r5	; 0x07
    10f4:	60 86       	std	Z+8, r6	; 0x08
    10f6:	71 86       	std	Z+9, r7	; 0x09
	ESC->maxDutyCycle = maxDutyCycle ;
    10f8:	97 01       	movw	r18, r14
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	2d 83       	std	Y+5, r18	; 0x05
    1100:	3e 83       	std	Y+6, r19	; 0x06
    1102:	4f 83       	std	Y+7, r20	; 0x07
    1104:	58 87       	std	Y+8, r21	; 0x08
    1106:	1a 96       	adiw	r26, 0x0a	; 10
    1108:	2d 93       	st	X+, r18
    110a:	3d 93       	st	X+, r19
    110c:	4d 93       	st	X+, r20
    110e:	5c 93       	st	X, r21
    1110:	1d 97       	sbiw	r26, 0x0d	; 13
	
	ESC->currentSpeeed = 0 ;
    1112:	52 96       	adiw	r26, 0x12	; 18
    1114:	1c 92       	st	X, r1
    1116:	1e 92       	st	-X, r1
    1118:	51 97       	sbiw	r26, 0x11	; 17
	
	u16 prescaler = 0 ;
	
	// using 8-bit PWM :
	u16 prescalerTheo = MCLOCK_u32GetSystemClock() / (frequency * 256UL) ;
    111a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <MCLOCK_u32GetSystemClock>
    111e:	86 01       	movw	r16, r12
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	52 2f       	mov	r21, r18
    1126:	41 2f       	mov	r20, r17
    1128:	30 2f       	mov	r19, r16
    112a:	22 27       	eor	r18, r18
    112c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodsi4>
    1130:	69 01       	movw	r12, r18
    1132:	7a 01       	movw	r14, r20
	
	if (timer == ESC_Timer0)
    1134:	b9 85       	ldd	r27, Y+9	; 0x09
    1136:	b1 11       	cpse	r27, r1
    1138:	28 c0       	rjmp	.+80     	; 0x118a <HESC_voidInit+0x100>
	{
		// set I/O pin as output :
		if (channel == ESC_ChannelA)
    113a:	ea 85       	ldd	r30, Y+10	; 0x0a
    113c:	e1 11       	cpse	r30, r1
    113e:	06 c0       	rjmp	.+12     	; 0x114c <HESC_voidInit+0xc2>
			MANIPPIN_voidInitPin(manipPin_Port_D, 6, OUTPUT) ;
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	66 e0       	ldi	r22, 0x06	; 6
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <HESC_voidInit+0xcc>
		else
			MANIPPIN_voidInitPin(manipPin_Port_D, 5, OUTPUT) ;
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	65 e0       	ldi	r22, 0x05	; 5
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>
			
		// set call back function of the ESC object to the change duty function of the timer :
		ESC->changeDutyCycleCallback = MTIM0_voidSetDutyCycle ;
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	96 e1       	ldi	r25, 0x16	; 22
    115a:	d4 01       	movw	r26, r8
    115c:	56 96       	adiw	r26, 0x16	; 22
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	55 97       	sbiw	r26, 0x15	; 21
		
		// round that theoretical prescaler to the first larger actual one :
		u16* arr = MTIM0And1_u16ArrGetFirstLargerPrescaler(prescalerTheo) ;
    1164:	c6 01       	movw	r24, r12
    1166:	0e 94 90 10 	call	0x2120	; 0x2120 <MTIM0And1_u16ArrGetFirstLargerPrescaler>
		u8 bestPrescalerIndex = arr[0] ;
    116a:	fc 01       	movw	r30, r24
    116c:	10 81       	ld	r17, Z
		prescaler = arr[1] ;
    116e:	22 81       	ldd	r18, Z+2	; 0x02
    1170:	33 81       	ldd	r19, Z+3	; 0x03
    1172:	3e 87       	std	Y+14, r19	; 0x0e
    1174:	2d 87       	std	Y+13, r18	; 0x0d
		free(arr) ;
    1176:	0e 94 b7 0b 	call	0x176e	; 0x176e <free>
		
		// init that timer with the calculated prescaler, 8-bit FPWM, non-inverting mode :
		MTIM0_voidInit(bestPrescalerIndex, TIM0_MODE_FPWM_Top0xFF, TIM0_FPWM_NON_INVERT, TIM0_FPWM_NON_INVERT, 0) ;
    117a:	00 e0       	ldi	r16, 0x00	; 0
    117c:	22 e0       	ldi	r18, 0x02	; 2
    117e:	42 e0       	ldi	r20, 0x02	; 2
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	81 2f       	mov	r24, r17
    1184:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <MTIM0_voidInit>
    1188:	51 c0       	rjmp	.+162    	; 0x122c <HESC_voidInit+0x1a2>
	}
	
	else if (timer == ESC_Timer1)
    118a:	39 85       	ldd	r19, Y+9	; 0x09
    118c:	31 30       	cpi	r19, 0x01	; 1
    118e:	49 f5       	brne	.+82     	; 0x11e2 <HESC_voidInit+0x158>
	{
		// set I/O pin as output :
		if (channel == ESC_ChannelA)
    1190:	4a 85       	ldd	r20, Y+10	; 0x0a
    1192:	41 11       	cpse	r20, r1
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <HESC_voidInit+0x118>
			MANIPPIN_voidInitPin(manipPin_Port_B, 1, OUTPUT) ;
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <HESC_voidInit+0x122>
		else
			MANIPPIN_voidInitPin(manipPin_Port_B, 2, OUTPUT) ;
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	62 e0       	ldi	r22, 0x02	; 2
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>
		
		// set call back function of the ESC object to the change duty function of the timer :
		ESC->changeDutyCycleCallback = MTIM1_voidSet8BitDutyCycle ;
    11ac:	8e ec       	ldi	r24, 0xCE	; 206
    11ae:	95 e1       	ldi	r25, 0x15	; 21
    11b0:	d4 01       	movw	r26, r8
    11b2:	56 96       	adiw	r26, 0x16	; 22
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
    11b8:	55 97       	sbiw	r26, 0x15	; 21
		
		// round that theoretical prescaler to the nearest actual one :
		u16* arr = MTIM0And1_u16ArrGetFirstLargerPrescaler(prescalerTheo) ;
    11ba:	c6 01       	movw	r24, r12
    11bc:	0e 94 90 10 	call	0x2120	; 0x2120 <MTIM0And1_u16ArrGetFirstLargerPrescaler>
		u8 bestPrescalerIndex = arr[0] ;
    11c0:	fc 01       	movw	r30, r24
    11c2:	f0 80       	ld	r15, Z
		prescaler = arr[1] ;
    11c4:	22 81       	ldd	r18, Z+2	; 0x02
    11c6:	33 81       	ldd	r19, Z+3	; 0x03
    11c8:	3e 87       	std	Y+14, r19	; 0x0e
    11ca:	2d 87       	std	Y+13, r18	; 0x0d
		free(arr) ;
    11cc:	0e 94 b7 0b 	call	0x176e	; 0x176e <free>
		
		// init that timer with the calculated prescaler, 8-bit FPWM, non-inverting mode :
		MTIM1_voidInit(bestPrescalerIndex, TIM1_MODE_FPWM_8bit_Top0x00FF, TIM1_FPWM_NON_INVERT, TIM1_FPWM_NON_INVERT, 0) ;
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	22 e0       	ldi	r18, 0x02	; 2
    11d6:	42 e0       	ldi	r20, 0x02	; 2
    11d8:	65 e0       	ldi	r22, 0x05	; 5
    11da:	8f 2d       	mov	r24, r15
    11dc:	0e 94 b3 09 	call	0x1366	; 0x1366 <MTIM1_voidInit>
    11e0:	25 c0       	rjmp	.+74     	; 0x122c <HESC_voidInit+0x1a2>
	}
	
	else // if (timer == ESC_Timer2)
	{	
		// set I/O pin as output :
		if (channel == ESC_ChannelA)
    11e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e4:	31 11       	cpse	r19, r1
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <HESC_voidInit+0x16a>
			MANIPPIN_voidInitPin(manipPin_Port_B, 3, OUTPUT) ;
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	63 e0       	ldi	r22, 0x03	; 3
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <HESC_voidInit+0x174>
		else
			MANIPPIN_voidInitPin(manipPin_Port_D, 3, OUTPUT) ;
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	63 e0       	ldi	r22, 0x03	; 3
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	0e 94 41 10 	call	0x2082	; 0x2082 <MANIPPIN_voidInitPin>

		// set call back function of the ESC object to the change duty function of the timer :
		ESC->changeDutyCycleCallback = MTIM2_voidSetDutyCycle ;
    11fe:	86 e1       	ldi	r24, 0x16	; 22
    1200:	96 e1       	ldi	r25, 0x16	; 22
    1202:	d4 01       	movw	r26, r8
    1204:	56 96       	adiw	r26, 0x16	; 22
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24
    120a:	55 97       	sbiw	r26, 0x15	; 21
		
		// round that theoretical prescaler to the nearest actual one :
		u16* arr = MTIM2_u16ArrGetFirstLargerPrescaler(prescalerTheo) ;
    120c:	c6 01       	movw	r24, r12
    120e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <MTIM2_u16ArrGetFirstLargerPrescaler>
		u8 bestPrescalerIndex = 6 ;
		prescaler = 256 ;
		free(arr) ;
    1212:	0e 94 b7 0b 	call	0x176e	; 0x176e <free>
		
		// init that timer with the calculated prescaler, 8-bit FPWM, non-inverting mode :
		MTIM2_voidInit(bestPrescalerIndex, TIM2_MODE_FPWM_Top0xFF, TIM2_FPWM_NON_INVERT, TIM2_FPWM_NON_INVERT, 0) ;
    1216:	00 e0       	ldi	r16, 0x00	; 0
    1218:	22 e0       	ldi	r18, 0x02	; 2
    121a:	42 e0       	ldi	r20, 0x02	; 2
    121c:	63 e0       	ldi	r22, 0x03	; 3
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	0e 94 40 0c 	call	0x1880	; 0x1880 <MTIM2_voidInit>
		ESC->changeDutyCycleCallback = MTIM2_voidSetDutyCycle ;
		
		// round that theoretical prescaler to the nearest actual one :
		u16* arr = MTIM2_u16ArrGetFirstLargerPrescaler(prescalerTheo) ;
		u8 bestPrescalerIndex = 6 ;
		prescaler = 256 ;
    1224:	e0 e0       	ldi	r30, 0x00	; 0
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	fe 87       	std	Y+14, r31	; 0x0e
    122a:	ed 87       	std	Y+13, r30	; 0x0d
		MTIM2_voidInit(bestPrescalerIndex, TIM2_MODE_FPWM_Top0xFF, TIM2_FPWM_NON_INVERT, TIM2_FPWM_NON_INVERT, 0) ;
		// تلصيمة صلحها بعديييين
	}
	
	// time of a complete cycle :
	u32 T = (u32)((u64)prescaler * 256000000ull / (u64)MCLOCK_u32GetSystemClock()) ;
    122c:	6d 85       	ldd	r22, Y+13	; 0x0d
    122e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1230:	ab 01       	movw	r20, r22
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	dc 01       	movw	r26, r24
    123c:	4f 87       	std	Y+15, r20	; 0x0f
    123e:	58 8b       	std	Y+16, r21	; 0x10
    1240:	69 8b       	std	Y+17, r22	; 0x11
    1242:	7a 8b       	std	Y+18, r23	; 0x12
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	9c 8b       	std	Y+20, r25	; 0x14
    1248:	ad 8b       	std	Y+21, r26	; 0x15
    124a:	be 8b       	std	Y+22, r27	; 0x16
    124c:	a1 2c       	mov	r10, r1
    124e:	68 94       	set
    1250:	bb 24       	eor	r11, r11
    1252:	b6 f8       	bld	r11, 6
    1254:	0f 2e       	mov	r0, r31
    1256:	f2 e4       	ldi	r31, 0x42	; 66
    1258:	cf 2e       	mov	r12, r31
    125a:	f0 2d       	mov	r31, r0
    125c:	0f 2e       	mov	r0, r31
    125e:	ff e0       	ldi	r31, 0x0F	; 15
    1260:	df 2e       	mov	r13, r31
    1262:	f0 2d       	mov	r31, r0
    1264:	e1 2c       	mov	r14, r1
    1266:	f1 2c       	mov	r15, r1
    1268:	00 e0       	ldi	r16, 0x00	; 0
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	24 2f       	mov	r18, r20
    126e:	35 2f       	mov	r19, r21
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__muldi3>
    1280:	29 87       	std	Y+9, r18	; 0x09
    1282:	3a 87       	std	Y+10, r19	; 0x0a
    1284:	4b 87       	std	Y+11, r20	; 0x0b
    1286:	5c 87       	std	Y+12, r21	; 0x0c
    1288:	6d 87       	std	Y+13, r22	; 0x0d
    128a:	7f 87       	std	Y+15, r23	; 0x0f
    128c:	38 2e       	mov	r3, r24
    128e:	29 2e       	mov	r2, r25
    1290:	0e 94 82 16 	call	0x2d04	; 0x2d04 <MCLOCK_u32GetSystemClock>
    1294:	8b 01       	movw	r16, r22
    1296:	9c 01       	movw	r18, r24
    1298:	a0 2e       	mov	r10, r16
    129a:	b1 2e       	mov	r11, r17
    129c:	c2 2e       	mov	r12, r18
    129e:	d3 2e       	mov	r13, r19
    12a0:	00 e0       	ldi	r16, 0x00	; 0
    12a2:	10 e0       	ldi	r17, 0x00	; 0
    12a4:	29 85       	ldd	r18, Y+9	; 0x09
    12a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    12aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    12ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    12ae:	7f 85       	ldd	r23, Y+15	; 0x0f
    12b0:	83 2d       	mov	r24, r3
    12b2:	92 2d       	mov	r25, r2
    12b4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__udivdi3>
    12b8:	02 2f       	mov	r16, r18
    12ba:	13 2f       	mov	r17, r19
    12bc:	4a 87       	std	Y+10, r20	; 0x0a
    12be:	59 87       	std	Y+9, r21	; 0x09
	
	// parameters used in change speed function :
	ESC->minOCR = (u8)((u32)minDutyCycle * 255ul / T) ;
    12c0:	af ef       	ldi	r26, 0xFF	; 255
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ca:	5c 81       	ldd	r21, Y+4	; 0x04
    12cc:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__muluhisi3>
    12d0:	20 2f       	mov	r18, r16
    12d2:	31 2f       	mov	r19, r17
    12d4:	4a 85       	ldd	r20, Y+10	; 0x0a
    12d6:	59 85       	ldd	r21, Y+9	; 0x09
    12d8:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodsi4>
    12dc:	d4 01       	movw	r26, r8
    12de:	1e 96       	adiw	r26, 0x0e	; 14
    12e0:	2c 93       	st	X, r18
	ESC->stpOCR = (u8)((u32)stpDutyCycle * 255ul / T) ;
    12e2:	af ef       	ldi	r26, 0xFF	; 255
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	a3 01       	movw	r20, r6
    12e8:	92 01       	movw	r18, r4
    12ea:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__muluhisi3>
    12ee:	20 2f       	mov	r18, r16
    12f0:	31 2f       	mov	r19, r17
    12f2:	4a 85       	ldd	r20, Y+10	; 0x0a
    12f4:	59 85       	ldd	r21, Y+9	; 0x09
    12f6:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodsi4>
    12fa:	f2 2e       	mov	r15, r18
    12fc:	f4 01       	movw	r30, r8
    12fe:	27 87       	std	Z+15, r18	; 0x0f
	ESC->maxOCR = (u8)((u32)maxDutyCycle * 255ul / T) ;
    1300:	af ef       	ldi	r26, 0xFF	; 255
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	4f 81       	ldd	r20, Y+7	; 0x07
    130a:	58 85       	ldd	r21, Y+8	; 0x08
    130c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__muluhisi3>
    1310:	20 2f       	mov	r18, r16
    1312:	31 2f       	mov	r19, r17
    1314:	4a 85       	ldd	r20, Y+10	; 0x0a
    1316:	59 85       	ldd	r21, Y+9	; 0x09
    1318:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodsi4>
    131c:	d4 01       	movw	r26, r8
    131e:	50 96       	adiw	r26, 0x10	; 16
    1320:	2c 93       	st	X, r18
    1322:	50 97       	sbiw	r26, 0x10	; 16
	
	// initially set on stop duty to arm the motor :
	ESC->changeDutyCycleCallback(ESC->stpOCR, ESC->channel) ;
    1324:	55 96       	adiw	r26, 0x15	; 21
    1326:	ed 91       	ld	r30, X+
    1328:	fc 91       	ld	r31, X
    132a:	56 97       	sbiw	r26, 0x16	; 22
    132c:	11 96       	adiw	r26, 0x01	; 1
    132e:	6c 91       	ld	r22, X
    1330:	8f 2d       	mov	r24, r15
    1332:	09 95       	icall
	
	// wait for ESC to finish initialization :
	//MCLOCK_voidDelayMS(7000) ;
}
    1334:	66 96       	adiw	r28, 0x16	; 22
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	5f 90       	pop	r5
    135e:	4f 90       	pop	r4
    1360:	3f 90       	pop	r3
    1362:	2f 90       	pop	r2
    1364:	08 95       	ret

Disassembly of section .text.HESC_u8OCR:

0000234a <HESC_u8OCR>:

u8 HESC_u8OCR(ESC_t* ESC, enum ESCDir dir, u8 speed)
{
    234a:	fc 01       	movw	r30, r24
	u8 OCR ;
	
	// referring to the datasheet of the used module at https://bluerobotics.com/store/thrusters/speed-controllers/besc30-r3/ :
	
	if (dir == ESC_DirForward) // if dir is forward, map an OCR value between stpOCR and maxOCR :
    234c:	61 11       	cpse	r22, r1
    234e:	16 c0       	rjmp	.+44     	; 0x237c <HESC_u8OCR+0x32>
		OCR = (u8)((u16)speed * (u16)(ESC->maxOCR - ESC->stpOCR) / 100u + (u16)ESC->stpOCR) ;
    2350:	80 89       	ldd	r24, Z+16	; 0x10
    2352:	57 85       	ldd	r21, Z+15	; 0x0f
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	85 1b       	sub	r24, r21
    2358:	91 09       	sbc	r25, r1
    235a:	48 9f       	mul	r20, r24
    235c:	90 01       	movw	r18, r0
    235e:	49 9f       	mul	r20, r25
    2360:	30 0d       	add	r19, r0
    2362:	11 24       	eor	r1, r1
    2364:	36 95       	lsr	r19
    2366:	27 95       	ror	r18
    2368:	36 95       	lsr	r19
    236a:	27 95       	ror	r18
    236c:	ab e7       	ldi	r26, 0x7B	; 123
    236e:	b4 e1       	ldi	r27, 0x14	; 20
    2370:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2374:	96 95       	lsr	r25
    2376:	87 95       	ror	r24
    2378:	85 0f       	add	r24, r21
    237a:	08 95       	ret
	
	else // if dir is backward, map an OCR between minOCR and stpOCR, but inverted :
		OCR = (u8)((u16)(100 - speed) * (u16)(ESC->stpOCR - ESC->minOCR) / 100u + (u16)ESC->minOCR) ;
    237c:	84 e6       	ldi	r24, 0x64	; 100
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9c 01       	movw	r18, r24
    2382:	24 1b       	sub	r18, r20
    2384:	31 09       	sbc	r19, r1
    2386:	a9 01       	movw	r20, r18
    2388:	97 85       	ldd	r25, Z+15	; 0x0f
    238a:	e6 85       	ldd	r30, Z+14	; 0x0e
    238c:	89 2f       	mov	r24, r25
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	8e 1b       	sub	r24, r30
    2392:	91 09       	sbc	r25, r1
    2394:	48 9f       	mul	r20, r24
    2396:	90 01       	movw	r18, r0
    2398:	49 9f       	mul	r20, r25
    239a:	30 0d       	add	r19, r0
    239c:	58 9f       	mul	r21, r24
    239e:	30 0d       	add	r19, r0
    23a0:	11 24       	eor	r1, r1
    23a2:	36 95       	lsr	r19
    23a4:	27 95       	ror	r18
    23a6:	36 95       	lsr	r19
    23a8:	27 95       	ror	r18
    23aa:	ab e7       	ldi	r26, 0x7B	; 123
    23ac:	b4 e1       	ldi	r27, 0x14	; 20
    23ae:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    23b2:	96 95       	lsr	r25
    23b4:	87 95       	ror	r24
    23b6:	8e 0f       	add	r24, r30
	
	return OCR ;
}
    23b8:	08 95       	ret

Disassembly of section .text.HESC_voidChangeOCR:

00002c58 <HESC_voidChangeOCR>:

void HESC_voidChangeOCR(ESC_t* ESC, u8 OCR)
{
    2c58:	dc 01       	movw	r26, r24
    2c5a:	86 2f       	mov	r24, r22
	ESC->changeDutyCycleCallback(OCR, ESC->channel) ;
    2c5c:	55 96       	adiw	r26, 0x15	; 21
    2c5e:	ed 91       	ld	r30, X+
    2c60:	fc 91       	ld	r31, X
    2c62:	56 97       	sbiw	r26, 0x16	; 22
    2c64:	11 96       	adiw	r26, 0x01	; 1
    2c66:	6c 91       	ld	r22, X
    2c68:	09 95       	icall
    2c6a:	08 95       	ret

Disassembly of section .text.HESC_voidChangeDirAndSpeed:

000029d2 <HESC_voidChangeDirAndSpeed>:
}

void HESC_voidChangeDirAndSpeed(ESC_t* ESC, enum ESCDir dir, u8 speed)
{
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	8c 01       	movw	r16, r24
    29dc:	d6 2f       	mov	r29, r22
    29de:	c4 2f       	mov	r28, r20
	 // speed is a number between 0 and 100
	 u8 OCR = HESC_u8OCR(ESC, dir, speed) ;
    29e0:	0e 94 a5 11 	call	0x234a	; 0x234a <HESC_u8OCR>
	 HESC_voidChangeOCR(ESC, OCR) ;
    29e4:	68 2f       	mov	r22, r24
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HESC_voidChangeOCR>
	 
	 if (dir == ESC_DirForward)
    29ec:	d1 11       	cpse	r29, r1
    29ee:	06 c0       	rjmp	.+12     	; 0x29fc <HESC_voidChangeDirAndSpeed+0x2a>
		ESC->currentSpeeed = (s16)speed ;
    29f0:	4c 2f       	mov	r20, r28
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	f8 01       	movw	r30, r16
    29f6:	52 8b       	std	Z+18, r21	; 0x12
    29f8:	41 8b       	std	Z+17, r20	; 0x11
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <HESC_voidChangeDirAndSpeed+0x3a>
	else
		ESC->currentSpeeed = -1*((s16)speed) ;
    29fc:	4c 2f       	mov	r20, r28
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	51 95       	neg	r21
    2a02:	41 95       	neg	r20
    2a04:	51 09       	sbc	r21, r1
    2a06:	f8 01       	movw	r30, r16
    2a08:	52 8b       	std	Z+18, r21	; 0x12
    2a0a:	41 8b       	std	Z+17, r20	; 0x11
}
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

Disassembly of section .text.HESC_voidChangeSpeed:

00002c16 <HESC_voidChangeSpeed>:

void HESC_voidChangeSpeed(ESC_t* ESC, s16 speed) // speed is a number between -100 and 100
{
	enum ESCDir dir ;
	u8 speedMagnitude ;
	if (speed < 0)
    2c16:	77 23       	and	r23, r23
    2c18:	24 f4       	brge	.+8      	; 0x2c22 <HESC_voidChangeSpeed+0xc>
	{
		dir = ESC_DirBackward ;
		speedMagnitude = (u8)(-speed) ;
    2c1a:	46 2f       	mov	r20, r22
    2c1c:	41 95       	neg	r20
{
	enum ESCDir dir ;
	u8 speedMagnitude ;
	if (speed < 0)
	{
		dir = ESC_DirBackward ;
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <HESC_voidChangeSpeed+0x10>
		speedMagnitude = (u8)(-speed) ;
	}
	else
	{
		dir = ESC_DirForward ;
		speedMagnitude = (u8)speed ;
    2c22:	46 2f       	mov	r20, r22
		dir = ESC_DirBackward ;
		speedMagnitude = (u8)(-speed) ;
	}
	else
	{
		dir = ESC_DirForward ;
    2c24:	60 e0       	ldi	r22, 0x00	; 0
		speedMagnitude = (u8)speed ;
	}
	HESC_voidChangeDirAndSpeed(ESC, dir, speedMagnitude) ;
    2c26:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <HESC_voidChangeDirAndSpeed>
    2c2a:	08 95       	ret

Disassembly of section .text.Init_ESCs:

00001e92 <Init_ESCs>:
			}
    }
}

void Init_ESCs (ESC_t* ESCS)
{
    1e92:	cf 92       	push	r12
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	ec 01       	movw	r28, r24
	HESC_voidInit(ESCS+0, ESC_Timer0, ESC_ChannelA, 1100, 1500, 1900, 400) ;
    1ea4:	0f 2e       	mov	r0, r31
    1ea6:	f0 e9       	ldi	r31, 0x90	; 144
    1ea8:	cf 2e       	mov	r12, r31
    1eaa:	dd 24       	eor	r13, r13
    1eac:	d3 94       	inc	r13
    1eae:	f0 2d       	mov	r31, r0
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	fc e6       	ldi	r31, 0x6C	; 108
    1eb4:	ef 2e       	mov	r14, r31
    1eb6:	f7 e0       	ldi	r31, 0x07	; 7
    1eb8:	ff 2e       	mov	r15, r31
    1eba:	f0 2d       	mov	r31, r0
    1ebc:	0c ed       	ldi	r16, 0xDC	; 220
    1ebe:	15 e0       	ldi	r17, 0x05	; 5
    1ec0:	2c e4       	ldi	r18, 0x4C	; 76
    1ec2:	34 e0       	ldi	r19, 0x04	; 4
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	HESC_voidInit(ESCS+1, ESC_Timer0, ESC_ChannelB, 1100, 1500, 1900, 400) ;
    1ecc:	2c e4       	ldi	r18, 0x4C	; 76
    1ece:	34 e0       	ldi	r19, 0x04	; 4
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	47 96       	adiw	r24, 0x17	; 23
    1ed8:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	HESC_voidInit(ESCS+2, ESC_Timer2, ESC_ChannelB, 1100, 1500, 1900, 400) ;
    1edc:	2c e4       	ldi	r18, 0x4C	; 76
    1ede:	34 e0       	ldi	r19, 0x04	; 4
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	62 e0       	ldi	r22, 0x02	; 2
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	8e 96       	adiw	r24, 0x2e	; 46
    1ee8:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	HESC_voidInit(ESCS+3, ESC_Timer2, ESC_ChannelA, 1100, 1500, 1900, 400) ;
    1eec:	2c e4       	ldi	r18, 0x4C	; 76
    1eee:	34 e0       	ldi	r19, 0x04	; 4
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8b 5b       	subi	r24, 0xBB	; 187
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	HESC_voidInit(ESCS+4, ESC_Timer1, ESC_ChannelB, 1100, 1500, 1900, 400) ;
    1efe:	2c e4       	ldi	r18, 0x4C	; 76
    1f00:	34 e0       	ldi	r19, 0x04	; 4
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	ce 01       	movw	r24, r28
    1f08:	84 5a       	subi	r24, 0xA4	; 164
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	HESC_voidInit(ESCS+5, ESC_Timer1, ESC_ChannelA, 1100, 1500, 1900, 400) ;
    1f10:	2c e4       	ldi	r18, 0x4C	; 76
    1f12:	34 e0       	ldi	r19, 0x04	; 4
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	ce 01       	movw	r24, r28
    1f1a:	8d 58       	subi	r24, 0x8D	; 141
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	0e 94 45 08 	call	0x108a	; 0x108a <HESC_voidInit>
	#if DEBUG_MODE == 0
	MCLOCK_voidDelayMS(7000) ; // wait for ESC's to get init.
    1f22:	68 e5       	ldi	r22, 0x58	; 88
    1f24:	7b e1       	ldi	r23, 0x1B	; 27
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
	#endif
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	08 95       	ret

Disassembly of section .text.ChangeAllSpeeds:

0000224c <ChangeAllSpeeds>:

void ChangeAllSpeeds(ESC_t* ESCS, s16 speedForward, s16 speedRight, s16 speedYawRight)
{
    224c:	dc 01       	movw	r26, r24
	((ESC_t*)(ESCS+2))->targetSpeed = speedForward + speedRight + speedYawRight ;
    224e:	cb 01       	movw	r24, r22
    2250:	84 0f       	add	r24, r20
    2252:	95 1f       	adc	r25, r21
    2254:	82 0f       	add	r24, r18
    2256:	93 1f       	adc	r25, r19
    2258:	fd 01       	movw	r30, r26
    225a:	ef 5b       	subi	r30, 0xBF	; 191
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
	((ESC_t*)(ESCS+3))->targetSpeed = -speedForward + speedRight - speedYawRight ;
    2262:	ca 01       	movw	r24, r20
    2264:	86 1b       	sub	r24, r22
    2266:	97 0b       	sbc	r25, r23
    2268:	82 1b       	sub	r24, r18
    226a:	93 0b       	sbc	r25, r19
    226c:	34 96       	adiw	r30, 0x04	; 4
    226e:	94 8b       	std	Z+20, r25	; 0x14
    2270:	83 8b       	std	Z+19, r24	; 0x13
	((ESC_t*)(ESCS+4))->targetSpeed = -speedForward - speedRight + speedYawRight ;
    2272:	88 27       	eor	r24, r24
    2274:	99 27       	eor	r25, r25
    2276:	86 1b       	sub	r24, r22
    2278:	97 0b       	sbc	r25, r23
    227a:	84 1b       	sub	r24, r20
    227c:	95 0b       	sbc	r25, r21
    227e:	82 0f       	add	r24, r18
    2280:	93 1f       	adc	r25, r19
    2282:	77 96       	adiw	r30, 0x17	; 23
    2284:	94 8b       	std	Z+20, r25	; 0x14
    2286:	83 8b       	std	Z+19, r24	; 0x13
	((ESC_t*)(ESCS+5))->targetSpeed = speedForward - speedRight - speedYawRight ;
    2288:	64 1b       	sub	r22, r20
    228a:	75 0b       	sbc	r23, r21
    228c:	62 1b       	sub	r22, r18
    228e:	73 0b       	sbc	r23, r19
    2290:	77 96       	adiw	r30, 0x17	; 23
    2292:	74 8b       	std	Z+20, r23	; 0x14
    2294:	63 8b       	std	Z+19, r22	; 0x13
	for (u8 i=2; i<6; i++)
    2296:	92 e0       	ldi	r25, 0x02	; 2
    2298:	18 c0       	rjmp	.+48     	; 0x22ca <ChangeAllSpeeds+0x7e>
	{
		if ((((ESC_t*)(ESCS+i))->targetSpeed) > 100)
    229a:	fd 01       	movw	r30, r26
    229c:	87 e1       	ldi	r24, 0x17	; 23
    229e:	98 9f       	mul	r25, r24
    22a0:	e0 0d       	add	r30, r0
    22a2:	f1 1d       	adc	r31, r1
    22a4:	11 24       	eor	r1, r1
    22a6:	23 89       	ldd	r18, Z+19	; 0x13
    22a8:	34 89       	ldd	r19, Z+20	; 0x14
    22aa:	25 36       	cpi	r18, 0x65	; 101
    22ac:	31 05       	cpc	r19, r1
    22ae:	2c f0       	brlt	.+10     	; 0x22ba <ChangeAllSpeeds+0x6e>
			(((ESC_t*)(ESCS+i))->targetSpeed) = 100 ;
    22b0:	24 e6       	ldi	r18, 0x64	; 100
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	34 8b       	std	Z+20, r19	; 0x14
    22b6:	23 8b       	std	Z+19, r18	; 0x13
    22b8:	07 c0       	rjmp	.+14     	; 0x22c8 <ChangeAllSpeeds+0x7c>
		else if ((((ESC_t*)(ESCS+i))->targetSpeed) < -100)
    22ba:	2c 39       	cpi	r18, 0x9C	; 156
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	24 f4       	brge	.+8      	; 0x22c8 <ChangeAllSpeeds+0x7c>
			(((ESC_t*)(ESCS+i))->targetSpeed) = -100 ;
    22c0:	2c e9       	ldi	r18, 0x9C	; 156
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	34 8b       	std	Z+20, r19	; 0x14
    22c6:	23 8b       	std	Z+19, r18	; 0x13
{
	((ESC_t*)(ESCS+2))->targetSpeed = speedForward + speedRight + speedYawRight ;
	((ESC_t*)(ESCS+3))->targetSpeed = -speedForward + speedRight - speedYawRight ;
	((ESC_t*)(ESCS+4))->targetSpeed = -speedForward - speedRight + speedYawRight ;
	((ESC_t*)(ESCS+5))->targetSpeed = speedForward - speedRight - speedYawRight ;
	for (u8 i=2; i<6; i++)
    22c8:	9f 5f       	subi	r25, 0xFF	; 255
    22ca:	96 30       	cpi	r25, 0x06	; 6
    22cc:	30 f3       	brcs	.-52     	; 0x229a <ChangeAllSpeeds+0x4e>
		if ((((ESC_t*)(ESCS+i))->targetSpeed) > 100)
			(((ESC_t*)(ESCS+i))->targetSpeed) = 100 ;
		else if ((((ESC_t*)(ESCS+i))->targetSpeed) < -100)
			(((ESC_t*)(ESCS+i))->targetSpeed) = -100 ;
	}
}
    22ce:	08 95       	ret

Disassembly of section .text.Up:

00002c6c <Up>:

void Up (ESC_t* ESCS, u8 speed)
{
	((ESC_t*)(ESCS+0))->targetSpeed = -speed ;
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	71 95       	neg	r23
    2c70:	61 95       	neg	r22
    2c72:	71 09       	sbc	r23, r1
    2c74:	fc 01       	movw	r30, r24
    2c76:	74 8b       	std	Z+20, r23	; 0x14
    2c78:	63 8b       	std	Z+19, r22	; 0x13
	((ESC_t*)(ESCS+1))->targetSpeed = -speed ;
    2c7a:	73 a7       	std	Z+43, r23	; 0x2b
    2c7c:	62 a7       	std	Z+42, r22	; 0x2a
    2c7e:	08 95       	ret

Disassembly of section .text.Down:

00002ca4 <Down>:
}

void Down (ESC_t* ESCS, u8 speed)
{
	((ESC_t*)(ESCS+0))->targetSpeed = speed ;
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	74 8b       	std	Z+20, r23	; 0x14
    2caa:	63 8b       	std	Z+19, r22	; 0x13
	((ESC_t*)(ESCS+1))->targetSpeed = speed ;
    2cac:	73 a7       	std	Z+43, r23	; 0x2b
    2cae:	62 a7       	std	Z+42, r22	; 0x2a
    2cb0:	08 95       	ret

Disassembly of section .text.check_indexing:

000024d8 <check_indexing>:
}

void check_indexing(ESC_t* ESCS)
{
    24d8:	ef 92       	push	r14
    24da:	ff 92       	push	r15
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	7c 01       	movw	r14, r24
	for (u8 i=0; i<6; i++)
    24e4:	c0 e0       	ldi	r28, 0x00	; 0
    24e6:	1d c0       	rjmp	.+58     	; 0x2522 <check_indexing+0x4a>
	{
		HESC_voidChangeSpeed(ESCS+i, 70) ;
    24e8:	87 01       	movw	r16, r14
    24ea:	87 e1       	ldi	r24, 0x17	; 23
    24ec:	c8 9f       	mul	r28, r24
    24ee:	00 0d       	add	r16, r0
    24f0:	11 1d       	adc	r17, r1
    24f2:	11 24       	eor	r1, r1
    24f4:	66 e4       	ldi	r22, 0x46	; 70
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	c8 01       	movw	r24, r16
    24fa:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
		MCLOCK_voidDelayMS(1000) ;
    24fe:	68 ee       	ldi	r22, 0xE8	; 232
    2500:	73 e0       	ldi	r23, 0x03	; 3
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
		HESC_voidChangeSpeed(ESCS+i, 0) ;
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
		MCLOCK_voidDelayMS(1000) ;
    2514:	68 ee       	ldi	r22, 0xE8	; 232
    2516:	73 e0       	ldi	r23, 0x03	; 3
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
	((ESC_t*)(ESCS+1))->targetSpeed = speed ;
}

void check_indexing(ESC_t* ESCS)
{
	for (u8 i=0; i<6; i++)
    2520:	cf 5f       	subi	r28, 0xFF	; 255
    2522:	c6 30       	cpi	r28, 0x06	; 6
    2524:	08 f3       	brcs	.-62     	; 0x24e8 <check_indexing+0x10>
		HESC_voidChangeSpeed(ESCS+i, 70) ;
		MCLOCK_voidDelayMS(1000) ;
		HESC_voidChangeSpeed(ESCS+i, 0) ;
		MCLOCK_voidDelayMS(1000) ;
	}
}
    2526:	cf 91       	pop	r28
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	ff 90       	pop	r15
    252e:	ef 90       	pop	r14
    2530:	08 95       	ret

Disassembly of section .text.correct_angle:

00002682 <correct_angle>:

f32 correct_angle(f32 angle360)
{
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	06 2f       	mov	r16, r22
    268c:	17 2f       	mov	r17, r23
    268e:	d8 2f       	mov	r29, r24
    2690:	c9 2f       	mov	r28, r25
	if (angle360 > 180.0f)
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	44 e3       	ldi	r20, 0x34	; 52
    2698:	53 e4       	ldi	r21, 0x43	; 67
    269a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__gesf2>
    269e:	18 16       	cp	r1, r24
    26a0:	74 f4       	brge	.+28     	; 0x26be <correct_angle+0x3c>
		return angle360 - 360.0f ;
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	44 eb       	ldi	r20, 0xB4	; 180
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	60 2f       	mov	r22, r16
    26ac:	71 2f       	mov	r23, r17
    26ae:	8d 2f       	mov	r24, r29
    26b0:	9c 2f       	mov	r25, r28
    26b2:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
    26b6:	06 2f       	mov	r16, r22
    26b8:	17 2f       	mov	r17, r23
    26ba:	d8 2f       	mov	r29, r24
    26bc:	c9 2f       	mov	r28, r25
	return angle360 ;
    26be:	60 2f       	mov	r22, r16
    26c0:	71 2f       	mov	r23, r17
    26c2:	8d 2f       	mov	r24, r29
    26c4:	9c 2f       	mov	r25, r28
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	08 95       	ret

Disassembly of section .text.main:

000000c8 <main>:

u8 SAFE_SPEED_CHANGE_MODE ;
u8 CHANGE_SPEED_DELAY ; //ms

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	c9 5d       	subi	r28, 0xD9	; 217
  d2:	d1 09       	sbc	r29, r1
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	MCLOCK_voidDelayMS(6000) ; // wait for ESC's to get powered and stable.
  de:	60 e7       	ldi	r22, 0x70	; 112
  e0:	77 e1       	ldi	r23, 0x17	; 23
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
	
	// init them :
	ESC_t* ESCS = (ESC_t*)malloc(6*sizeof(ESC_t)) ;
  ea:	8a e8       	ldi	r24, 0x8A	; 138
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 1f 0b 	call	0x163e	; 0x163e <malloc>
  f2:	3c 01       	movw	r6, r24
	Init_ESCs(ESCS) ;
  f4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <Init_ESCs>
	
	// init I2C :
	MI2C_voidSlaveInit(SLAVE_ADRR, 0, 1) ;
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	0e 94 19 13 	call	0x2632	; 0x2632 <MI2C_voidSlaveInit>
	char* data ;
	char key ;
	u8 value ; // must be +ve, and of 3 digits !
	
	// init Switches : (all off at first) :
	SAFE_SPEED_CHANGE_MODE = 1 ;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SAFE_SPEED_CHANGE_MODE>
	CHANGE_SPEED_DELAY = 8 ; //ms
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <CHANGE_SPEED_DELAY>
	if (YAW_PID_ON == 1)
		init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
	
	s16 speedForward = 0 ;
	s16 speedRight = 0 ;
	s16 speedYawRight = 0 ;
 10e:	c0 56       	subi	r28, 0x60	; 96
 110:	df 4f       	sbci	r29, 0xFF	; 255
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	18 82       	st	Y, r1
 116:	c0 5a       	subi	r28, 0xA0	; 160
 118:	d0 40       	sbci	r29, 0x00	; 0
	PID_controller yawPID ;
	if (YAW_PID_ON == 1)
		init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
	
	s16 speedForward = 0 ;
	s16 speedRight = 0 ;
 11a:	21 2c       	mov	r2, r1
 11c:	31 2c       	mov	r3, r1
	f32 thetaYawRequiered = 0 ; // degree
	PID_controller yawPID ;
	if (YAW_PID_ON == 1)
		init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
	
	s16 speedForward = 0 ;
 11e:	41 2c       	mov	r4, r1
 120:	51 2c       	mov	r5, r1
	f32 YAW_Kp = 0.5f ;
	f32 YAW_Ki = 0.5f ;
	f32 YAW_Kd = 0.5f ;
	f32 YAW_REFRESH_RATE = 0.03f ; // sec
	f32 thetaYawCurrent = 0 ; // degree
	f32 thetaYawRequiered = 0 ; // degree
 122:	ca 54       	subi	r28, 0x4A	; 74
 124:	df 4f       	sbci	r29, 0xFF	; 255
 126:	18 82       	st	Y, r1
 128:	19 82       	std	Y+1, r1	; 0x01
 12a:	1a 82       	std	Y+2, r1	; 0x02
 12c:	1b 82       	std	Y+3, r1	; 0x03
 12e:	c6 5b       	subi	r28, 0xB6	; 182
 130:	d0 40       	sbci	r29, 0x00	; 0
	
	f32 YAW_Kp = 0.5f ;
	f32 YAW_Ki = 0.5f ;
	f32 YAW_Kd = 0.5f ;
	f32 YAW_REFRESH_RATE = 0.03f ; // sec
	f32 thetaYawCurrent = 0 ; // degree
 132:	ce 54       	subi	r28, 0x4E	; 78
 134:	df 4f       	sbci	r29, 0xFF	; 255
 136:	18 82       	st	Y, r1
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	1a 82       	std	Y+2, r1	; 0x02
 13c:	1b 82       	std	Y+3, r1	; 0x03
 13e:	c2 5b       	subi	r28, 0xB2	; 178
 140:	d0 40       	sbci	r29, 0x00	; 0
		init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
	
	f32 YAW_Kp = 0.5f ;
	f32 YAW_Ki = 0.5f ;
	f32 YAW_Kd = 0.5f ;
	f32 YAW_REFRESH_RATE = 0.03f ; // sec
 142:	2f e8       	ldi	r18, 0x8F	; 143
 144:	ca 52       	subi	r28, 0x2A	; 42
 146:	df 4f       	sbci	r29, 0xFF	; 255
 148:	28 83       	st	Y, r18
 14a:	c6 5d       	subi	r28, 0xD6	; 214
 14c:	d0 40       	sbci	r29, 0x00	; 0
 14e:	32 ec       	ldi	r19, 0xC2	; 194
 150:	c9 52       	subi	r28, 0x29	; 41
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	38 83       	st	Y, r19
 156:	c7 5d       	subi	r28, 0xD7	; 215
 158:	d0 40       	sbci	r29, 0x00	; 0
 15a:	85 ef       	ldi	r24, 0xF5	; 245
 15c:	c8 52       	subi	r28, 0x28	; 40
 15e:	df 4f       	sbci	r29, 0xFF	; 255
 160:	88 83       	st	Y, r24
 162:	c8 5d       	subi	r28, 0xD8	; 216
 164:	d0 40       	sbci	r29, 0x00	; 0
 166:	9c e3       	ldi	r25, 0x3C	; 60
 168:	c7 52       	subi	r28, 0x27	; 39
 16a:	df 4f       	sbci	r29, 0xFF	; 255
 16c:	98 83       	st	Y, r25
 16e:	c9 5d       	subi	r28, 0xD9	; 217
 170:	d0 40       	sbci	r29, 0x00	; 0
	if (ROLL_PID_ON == 1)
		init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
	
	f32 YAW_Kp = 0.5f ;
	f32 YAW_Ki = 0.5f ;
	f32 YAW_Kd = 0.5f ;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	bf e3       	ldi	r27, 0x3F	; 63
 17a:	c2 53       	subi	r28, 0x32	; 50
 17c:	df 4f       	sbci	r29, 0xFF	; 255
 17e:	88 83       	st	Y, r24
 180:	99 83       	std	Y+1, r25	; 0x01
 182:	aa 83       	std	Y+2, r26	; 0x02
 184:	bb 83       	std	Y+3, r27	; 0x03
 186:	ce 5c       	subi	r28, 0xCE	; 206
 188:	d0 40       	sbci	r29, 0x00	; 0
	PID_controller rollPID ;
	if (ROLL_PID_ON == 1)
		init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
	
	f32 YAW_Kp = 0.5f ;
	f32 YAW_Ki = 0.5f ;
 18a:	c6 53       	subi	r28, 0x36	; 54
 18c:	df 4f       	sbci	r29, 0xFF	; 255
 18e:	88 83       	st	Y, r24
 190:	99 83       	std	Y+1, r25	; 0x01
 192:	aa 83       	std	Y+2, r26	; 0x02
 194:	bb 83       	std	Y+3, r27	; 0x03
 196:	ca 5c       	subi	r28, 0xCA	; 202
 198:	d0 40       	sbci	r29, 0x00	; 0
	f32 thetaRollRequiered = 0 ; // degree
	PID_controller rollPID ;
	if (ROLL_PID_ON == 1)
		init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
	
	f32 YAW_Kp = 0.5f ;
 19a:	ca 53       	subi	r28, 0x3A	; 58
 19c:	df 4f       	sbci	r29, 0xFF	; 255
 19e:	88 83       	st	Y, r24
 1a0:	99 83       	std	Y+1, r25	; 0x01
 1a2:	aa 83       	std	Y+2, r26	; 0x02
 1a4:	bb 83       	std	Y+3, r27	; 0x03
 1a6:	c6 5c       	subi	r28, 0xC6	; 198
 1a8:	d0 40       	sbci	r29, 0x00	; 0
	f32 ROLL_Kp = 0.5f ;
	f32 ROLL_Ki = 0.2f ;
	f32 ROLL_Kd = 0.5f ;
	f32 ROLL_REFRESH_RATE = 0.03f ; // sec
	f32 thetaRollCurrent = 0 ; // degree
	f32 thetaRollRequiered = 0 ; // degree
 1aa:	c2 55       	subi	r28, 0x52	; 82
 1ac:	df 4f       	sbci	r29, 0xFF	; 255
 1ae:	18 82       	st	Y, r1
 1b0:	19 82       	std	Y+1, r1	; 0x01
 1b2:	1a 82       	std	Y+2, r1	; 0x02
 1b4:	1b 82       	std	Y+3, r1	; 0x03
 1b6:	ce 5a       	subi	r28, 0xAE	; 174
 1b8:	d0 40       	sbci	r29, 0x00	; 0
	
	f32 ROLL_Kp = 0.5f ;
	f32 ROLL_Ki = 0.2f ;
	f32 ROLL_Kd = 0.5f ;
	f32 ROLL_REFRESH_RATE = 0.03f ; // sec
	f32 thetaRollCurrent = 0 ; // degree
 1ba:	c6 55       	subi	r28, 0x56	; 86
 1bc:	df 4f       	sbci	r29, 0xFF	; 255
 1be:	18 82       	st	Y, r1
 1c0:	19 82       	std	Y+1, r1	; 0x01
 1c2:	1a 82       	std	Y+2, r1	; 0x02
 1c4:	1b 82       	std	Y+3, r1	; 0x03
 1c6:	ca 5a       	subi	r28, 0xAA	; 170
 1c8:	d0 40       	sbci	r29, 0x00	; 0
		init_PID(&altitudePID, ALTITUDE_Kp, ALTITUDE_Ki, ALTITUDE_Kd, -100.0f, 100.0f, ALTITUDE_REFRESH_RATE, 0.001f) ;
	
	f32 ROLL_Kp = 0.5f ;
	f32 ROLL_Ki = 0.2f ;
	f32 ROLL_Kd = 0.5f ;
	f32 ROLL_REFRESH_RATE = 0.03f ; // sec
 1ca:	9f e8       	ldi	r25, 0x8F	; 143
 1cc:	ce 52       	subi	r28, 0x2E	; 46
 1ce:	df 4f       	sbci	r29, 0xFF	; 255
 1d0:	98 83       	st	Y, r25
 1d2:	c2 5d       	subi	r28, 0xD2	; 210
 1d4:	d0 40       	sbci	r29, 0x00	; 0
 1d6:	a2 ec       	ldi	r26, 0xC2	; 194
 1d8:	cd 52       	subi	r28, 0x2D	; 45
 1da:	df 4f       	sbci	r29, 0xFF	; 255
 1dc:	a8 83       	st	Y, r26
 1de:	c3 5d       	subi	r28, 0xD3	; 211
 1e0:	d0 40       	sbci	r29, 0x00	; 0
 1e2:	b5 ef       	ldi	r27, 0xF5	; 245
 1e4:	cc 52       	subi	r28, 0x2C	; 44
 1e6:	df 4f       	sbci	r29, 0xFF	; 255
 1e8:	b8 83       	st	Y, r27
 1ea:	c4 5d       	subi	r28, 0xD4	; 212
 1ec:	d0 40       	sbci	r29, 0x00	; 0
 1ee:	ec e3       	ldi	r30, 0x3C	; 60
 1f0:	cb 52       	subi	r28, 0x2B	; 43
 1f2:	df 4f       	sbci	r29, 0xFF	; 255
 1f4:	e8 83       	st	Y, r30
 1f6:	c5 5d       	subi	r28, 0xD5	; 213
 1f8:	d0 40       	sbci	r29, 0x00	; 0
	if (ALTITUDE_PID_ON == 1)
		init_PID(&altitudePID, ALTITUDE_Kp, ALTITUDE_Ki, ALTITUDE_Kd, -100.0f, 100.0f, ALTITUDE_REFRESH_RATE, 0.001f) ;
	
	f32 ROLL_Kp = 0.5f ;
	f32 ROLL_Ki = 0.2f ;
	f32 ROLL_Kd = 0.5f ;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a0 e0       	ldi	r26, 0x00	; 0
 200:	bf e3       	ldi	r27, 0x3F	; 63
 202:	ce 53       	subi	r28, 0x3E	; 62
 204:	df 4f       	sbci	r29, 0xFF	; 255
 206:	88 83       	st	Y, r24
 208:	99 83       	std	Y+1, r25	; 0x01
 20a:	aa 83       	std	Y+2, r26	; 0x02
 20c:	bb 83       	std	Y+3, r27	; 0x03
 20e:	c2 5c       	subi	r28, 0xC2	; 194
 210:	d0 40       	sbci	r29, 0x00	; 0
	PID_controller altitudePID ;
	if (ALTITUDE_PID_ON == 1)
		init_PID(&altitudePID, ALTITUDE_Kp, ALTITUDE_Ki, ALTITUDE_Kd, -100.0f, 100.0f, ALTITUDE_REFRESH_RATE, 0.001f) ;
	
	f32 ROLL_Kp = 0.5f ;
	f32 ROLL_Ki = 0.2f ;
 212:	8d ec       	ldi	r24, 0xCD	; 205
 214:	9c ec       	ldi	r25, 0xCC	; 204
 216:	ac e4       	ldi	r26, 0x4C	; 76
 218:	be e3       	ldi	r27, 0x3E	; 62
 21a:	c2 54       	subi	r28, 0x42	; 66
 21c:	df 4f       	sbci	r29, 0xFF	; 255
 21e:	88 83       	st	Y, r24
 220:	99 83       	std	Y+1, r25	; 0x01
 222:	aa 83       	std	Y+2, r26	; 0x02
 224:	bb 83       	std	Y+3, r27	; 0x03
 226:	ce 5b       	subi	r28, 0xBE	; 190
 228:	d0 40       	sbci	r29, 0x00	; 0
	f32 altitudeRequiered = 0 ; // cm
	PID_controller altitudePID ;
	if (ALTITUDE_PID_ON == 1)
		init_PID(&altitudePID, ALTITUDE_Kp, ALTITUDE_Ki, ALTITUDE_Kd, -100.0f, 100.0f, ALTITUDE_REFRESH_RATE, 0.001f) ;
	
	f32 ROLL_Kp = 0.5f ;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a0 e0       	ldi	r26, 0x00	; 0
 230:	bf e3       	ldi	r27, 0x3F	; 63
 232:	c6 54       	subi	r28, 0x46	; 70
 234:	df 4f       	sbci	r29, 0xFF	; 255
 236:	88 83       	st	Y, r24
 238:	99 83       	std	Y+1, r25	; 0x01
 23a:	aa 83       	std	Y+2, r26	; 0x02
 23c:	bb 83       	std	Y+3, r27	; 0x03
 23e:	ca 5b       	subi	r28, 0xBA	; 186
 240:	d0 40       	sbci	r29, 0x00	; 0
	f32 ALTITUDE_Kp = 0.5f ;
	f32 ALTITUDE_Ki = 0.5f ;
	f32 ALTITUDE_Kd = 0.5f ;
	f32 ALTITUDE_REFRESH_RATE = 0.03f ; // sec
	f32 altitudeCurrent = 0 ; // cm
	f32 altitudeRequiered = 0 ; // cm
 242:	ce 55       	subi	r28, 0x5E	; 94
 244:	df 4f       	sbci	r29, 0xFF	; 255
 246:	18 82       	st	Y, r1
 248:	19 82       	std	Y+1, r1	; 0x01
 24a:	1a 82       	std	Y+2, r1	; 0x02
 24c:	1b 82       	std	Y+3, r1	; 0x03
 24e:	c2 5a       	subi	r28, 0xA2	; 162
 250:	d0 40       	sbci	r29, 0x00	; 0
	// init PID :
	f32 ALTITUDE_Kp = 0.5f ;
	f32 ALTITUDE_Ki = 0.5f ;
	f32 ALTITUDE_Kd = 0.5f ;
	f32 ALTITUDE_REFRESH_RATE = 0.03f ; // sec
	f32 altitudeCurrent = 0 ; // cm
 252:	ca 55       	subi	r28, 0x5A	; 90
 254:	df 4f       	sbci	r29, 0xFF	; 255
 256:	18 82       	st	Y, r1
 258:	19 82       	std	Y+1, r1	; 0x01
 25a:	1a 82       	std	Y+2, r1	; 0x02
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	c6 5a       	subi	r28, 0xA6	; 166
 260:	d0 40       	sbci	r29, 0x00	; 0
	// init Switches : (all off at first) :
	SAFE_SPEED_CHANGE_MODE = 1 ;
	CHANGE_SPEED_DELAY = 8 ; //ms
	u8 ALTITUDE_PID_ON = 0 ;
	u8 ROLL_PID_ON = 0 ;
	u8 YAW_PID_ON = 0 ;
 262:	c1 56       	subi	r28, 0x61	; 97
 264:	df 4f       	sbci	r29, 0xFF	; 255
 266:	18 82       	st	Y, r1
 268:	cf 59       	subi	r28, 0x9F	; 159
 26a:	d0 40       	sbci	r29, 0x00	; 0
	
	// init Switches : (all off at first) :
	SAFE_SPEED_CHANGE_MODE = 1 ;
	CHANGE_SPEED_DELAY = 8 ; //ms
	u8 ALTITUDE_PID_ON = 0 ;
	u8 ROLL_PID_ON = 0 ;
 26c:	c2 56       	subi	r28, 0x62	; 98
 26e:	df 4f       	sbci	r29, 0xFF	; 255
 270:	18 82       	st	Y, r1
 272:	ce 59       	subi	r28, 0x9E	; 158
 274:	d0 40       	sbci	r29, 0x00	; 0
	u8 value ; // must be +ve, and of 3 digits !
	
	// init Switches : (all off at first) :
	SAFE_SPEED_CHANGE_MODE = 1 ;
	CHANGE_SPEED_DELAY = 8 ; //ms
	u8 ALTITUDE_PID_ON = 0 ;
 276:	c3 56       	subi	r28, 0x63	; 99
 278:	df 4f       	sbci	r29, 0xFF	; 255
 27a:	18 82       	st	Y, r1
 27c:	cd 59       	subi	r28, 0x9D	; 157
 27e:	d0 40       	sbci	r29, 0x00	; 0
	s16 speedRight = 0 ;
	s16 speedYawRight = 0 ;
	
    while(1)
    {	
		if(MI2C_voidSlaveIsCalled()) //Rpi has sent new data :
 280:	0e 94 a0 14 	call	0x2940	; 0x2940 <MI2C_voidSlaveIsCalled>
 284:	88 23       	and	r24, r24
 286:	09 f4       	brne	.+2      	; 0x28a <main+0x1c2>
 288:	46 c4       	rjmp	.+2188   	; 0xb16 <__stack+0x217>
		{
			data = MI2C_u8SlaveReadString();
 28a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <MI2C_u8SlaveReadString>
 28e:	fc 01       	movw	r30, r24
			key = data[0];
 290:	90 81       	ld	r25, Z
			value = (u8)(data[1]-'0')*100 + (u8)(data[2]-'0')*10 + (u8)(data[3]-'0');
 292:	81 81       	ldd	r24, Z+1	; 0x01
 294:	62 81       	ldd	r22, Z+2	; 0x02
 296:	66 0f       	add	r22, r22
 298:	26 2f       	mov	r18, r22
 29a:	22 0f       	add	r18, r18
 29c:	22 0f       	add	r18, r18
 29e:	62 0f       	add	r22, r18
 2a0:	a4 e6       	ldi	r26, 0x64	; 100
 2a2:	8a 9f       	mul	r24, r26
 2a4:	60 0d       	add	r22, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	23 81       	ldd	r18, Z+3	; 0x03
 2aa:	62 0f       	add	r22, r18
 2ac:	60 5d       	subi	r22, 0xD0	; 208
			
			// Movement :
			if (key=='U')
 2ae:	95 35       	cpi	r25, 0x55	; 85
 2b0:	21 f4       	brne	.+8      	; 0x2ba <main+0x1f2>
				Up(ESCS, value);
 2b2:	c3 01       	movw	r24, r6
 2b4:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <Up>
 2b8:	2e c4       	rjmp	.+2140   	; 0xb16 <__stack+0x217>
			else if (key=='D')
 2ba:	94 34       	cpi	r25, 0x44	; 68
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <main+0x1fe>
				Down(ESCS, value);
 2be:	c3 01       	movw	r24, r6
 2c0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Down>
 2c4:	28 c4       	rjmp	.+2128   	; 0xb16 <__stack+0x217>
			else if (key=='F')
 2c6:	96 34       	cpi	r25, 0x46	; 70
 2c8:	71 f4       	brne	.+28     	; 0x2e6 <main+0x21e>
			{
				speedForward = value ;
 2ca:	46 2e       	mov	r4, r22
 2cc:	51 2c       	mov	r5, r1
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 2ce:	c0 56       	subi	r28, 0x60	; 96
 2d0:	df 4f       	sbci	r29, 0xFF	; 255
 2d2:	28 81       	ld	r18, Y
 2d4:	39 81       	ldd	r19, Y+1	; 0x01
 2d6:	c0 5a       	subi	r28, 0xA0	; 160
 2d8:	d0 40       	sbci	r29, 0x00	; 0
 2da:	a1 01       	movw	r20, r2
 2dc:	b2 01       	movw	r22, r4
 2de:	c3 01       	movw	r24, r6
 2e0:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 2e4:	18 c4       	rjmp	.+2096   	; 0xb16 <__stack+0x217>
			}
			else if (key=='B')
 2e6:	92 34       	cpi	r25, 0x42	; 66
 2e8:	89 f4       	brne	.+34     	; 0x30c <main+0x244>
			{
				speedForward = -value ;
 2ea:	46 2e       	mov	r4, r22
 2ec:	51 2c       	mov	r5, r1
 2ee:	51 94       	neg	r5
 2f0:	41 94       	neg	r4
 2f2:	51 08       	sbc	r5, r1
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 2f4:	c0 56       	subi	r28, 0x60	; 96
 2f6:	df 4f       	sbci	r29, 0xFF	; 255
 2f8:	28 81       	ld	r18, Y
 2fa:	39 81       	ldd	r19, Y+1	; 0x01
 2fc:	c0 5a       	subi	r28, 0xA0	; 160
 2fe:	d0 40       	sbci	r29, 0x00	; 0
 300:	a1 01       	movw	r20, r2
 302:	b2 01       	movw	r22, r4
 304:	c3 01       	movw	r24, r6
 306:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 30a:	05 c4       	rjmp	.+2058   	; 0xb16 <__stack+0x217>
			}
			else if (key=='R')
 30c:	92 35       	cpi	r25, 0x52	; 82
 30e:	71 f4       	brne	.+28     	; 0x32c <main+0x264>
			{
				speedRight = value ;
 310:	26 2e       	mov	r2, r22
 312:	31 2c       	mov	r3, r1
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 314:	c0 56       	subi	r28, 0x60	; 96
 316:	df 4f       	sbci	r29, 0xFF	; 255
 318:	28 81       	ld	r18, Y
 31a:	39 81       	ldd	r19, Y+1	; 0x01
 31c:	c0 5a       	subi	r28, 0xA0	; 160
 31e:	d0 40       	sbci	r29, 0x00	; 0
 320:	a1 01       	movw	r20, r2
 322:	b2 01       	movw	r22, r4
 324:	c3 01       	movw	r24, r6
 326:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 32a:	f5 c3       	rjmp	.+2026   	; 0xb16 <__stack+0x217>
			}
			else if (key=='L')
 32c:	9c 34       	cpi	r25, 0x4C	; 76
 32e:	89 f4       	brne	.+34     	; 0x352 <main+0x28a>
			{
				speedRight = -value ;
 330:	26 2e       	mov	r2, r22
 332:	31 2c       	mov	r3, r1
 334:	31 94       	neg	r3
 336:	21 94       	neg	r2
 338:	31 08       	sbc	r3, r1
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 33a:	c0 56       	subi	r28, 0x60	; 96
 33c:	df 4f       	sbci	r29, 0xFF	; 255
 33e:	28 81       	ld	r18, Y
 340:	39 81       	ldd	r19, Y+1	; 0x01
 342:	c0 5a       	subi	r28, 0xA0	; 160
 344:	d0 40       	sbci	r29, 0x00	; 0
 346:	a1 01       	movw	r20, r2
 348:	b2 01       	movw	r22, r4
 34a:	c3 01       	movw	r24, r6
 34c:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 350:	e2 c3       	rjmp	.+1988   	; 0xb16 <__stack+0x217>
			}
			else if (key=='X')
 352:	98 35       	cpi	r25, 0x58	; 88
 354:	79 f4       	brne	.+30     	; 0x374 <main+0x2ac>
			{
				speedYawRight = value ;
 356:	e6 2f       	mov	r30, r22
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	c0 56       	subi	r28, 0x60	; 96
 35c:	df 4f       	sbci	r29, 0xFF	; 255
 35e:	f9 83       	std	Y+1, r31	; 0x01
 360:	e8 83       	st	Y, r30
 362:	c0 5a       	subi	r28, 0xA0	; 160
 364:	d0 40       	sbci	r29, 0x00	; 0
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 366:	9f 01       	movw	r18, r30
 368:	a1 01       	movw	r20, r2
 36a:	b2 01       	movw	r22, r4
 36c:	c3 01       	movw	r24, r6
 36e:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 372:	d1 c3       	rjmp	.+1954   	; 0xb16 <__stack+0x217>
			}
			else if (key=='Y')
 374:	99 35       	cpi	r25, 0x59	; 89
 376:	91 f4       	brne	.+36     	; 0x39c <main+0x2d4>
			{
				speedYawRight = -value ;
 378:	86 2f       	mov	r24, r22
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	22 27       	eor	r18, r18
 37e:	33 27       	eor	r19, r19
 380:	28 1b       	sub	r18, r24
 382:	39 0b       	sbc	r19, r25
 384:	c0 56       	subi	r28, 0x60	; 96
 386:	df 4f       	sbci	r29, 0xFF	; 255
 388:	39 83       	std	Y+1, r19	; 0x01
 38a:	28 83       	st	Y, r18
 38c:	c0 5a       	subi	r28, 0xA0	; 160
 38e:	d0 40       	sbci	r29, 0x00	; 0
				ChangeAllSpeeds(ESCS, speedForward, speedRight, speedYawRight) ;
 390:	a1 01       	movw	r20, r2
 392:	b2 01       	movw	r22, r4
 394:	c3 01       	movw	r24, r6
 396:	0e 94 26 11 	call	0x224c	; 0x224c <ChangeAllSpeeds>
 39a:	bd c3       	rjmp	.+1914   	; 0xb16 <__stack+0x217>
			}
			else if (key=='m')
 39c:	9d 36       	cpi	r25, 0x6D	; 109
 39e:	21 f4       	brne	.+8      	; 0x3a8 <main+0x2e0>
				check_indexing(ESCS) ;
 3a0:	c3 01       	movw	r24, r6
 3a2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <check_indexing>
 3a6:	b7 c3       	rjmp	.+1902   	; 0xb16 <__stack+0x217>
			else if (key=='j')
 3a8:	9a 36       	cpi	r25, 0x6A	; 106
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <main+0x2ec>
				SAFE_SPEED_CHANGE_MODE = value % 2 ;
 3ac:	61 70       	andi	r22, 0x01	; 1
 3ae:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <SAFE_SPEED_CHANGE_MODE>
 3b2:	b1 c3       	rjmp	.+1890   	; 0xb16 <__stack+0x217>
			else if (key=='J')
 3b4:	9a 34       	cpi	r25, 0x4A	; 74
 3b6:	19 f4       	brne	.+6      	; 0x3be <main+0x2f6>
				CHANGE_SPEED_DELAY = value ;
 3b8:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <CHANGE_SPEED_DELAY>
 3bc:	ac c3       	rjmp	.+1880   	; 0xb16 <__stack+0x217>
			else if (key=='r')
 3be:	92 37       	cpi	r25, 0x72	; 114
 3c0:	21 f4       	brne	.+8      	; 0x3ca <main+0x302>
				Init_ESCs(ESCS) ;
 3c2:	c3 01       	movw	r24, r6
 3c4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <Init_ESCs>
 3c8:	a6 c3       	rjmp	.+1868   	; 0xb16 <__stack+0x217>
			
			// PID :
			else if (key=='n')
 3ca:	9e 36       	cpi	r25, 0x6E	; 110
 3cc:	39 f4       	brne	.+14     	; 0x3dc <main+0x314>
				ALTITUDE_PID_ON = value % 2 ;
 3ce:	61 70       	andi	r22, 0x01	; 1
 3d0:	c3 56       	subi	r28, 0x63	; 99
 3d2:	df 4f       	sbci	r29, 0xFF	; 255
 3d4:	68 83       	st	Y, r22
 3d6:	cd 59       	subi	r28, 0x9D	; 157
 3d8:	d0 40       	sbci	r29, 0x00	; 0
 3da:	9d c3       	rjmp	.+1850   	; 0xb16 <__stack+0x217>
			else if (key=='Z') // user wants ROV to go to that altitude
 3dc:	9a 35       	cpi	r25, 0x5A	; 90
 3de:	71 f4       	brne	.+28     	; 0x3fc <main+0x334>
				altitudeRequiered = (f32)value ;
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 3ea:	ce 55       	subi	r28, 0x5E	; 94
 3ec:	df 4f       	sbci	r29, 0xFF	; 255
 3ee:	68 83       	st	Y, r22
 3f0:	79 83       	std	Y+1, r23	; 0x01
 3f2:	8a 83       	std	Y+2, r24	; 0x02
 3f4:	9b 83       	std	Y+3, r25	; 0x03
 3f6:	c2 5a       	subi	r28, 0xA2	; 162
 3f8:	d0 40       	sbci	r29, 0x00	; 0
 3fa:	8d c3       	rjmp	.+1818   	; 0xb16 <__stack+0x217>
			else if (key=='z') // sensor reading of current ROV's altitude
 3fc:	9a 37       	cpi	r25, 0x7A	; 122
 3fe:	71 f4       	brne	.+28     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				altitudeCurrent = (f32)value ;
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 40a:	ca 55       	subi	r28, 0x5A	; 90
 40c:	df 4f       	sbci	r29, 0xFF	; 255
 40e:	68 83       	st	Y, r22
 410:	79 83       	std	Y+1, r23	; 0x01
 412:	8a 83       	std	Y+2, r24	; 0x02
 414:	9b 83       	std	Y+3, r25	; 0x03
 416:	c6 5a       	subi	r28, 0xA6	; 166
 418:	d0 40       	sbci	r29, 0x00	; 0
 41a:	7d c3       	rjmp	.+1786   	; 0xb16 <__stack+0x217>
			else if (key=='b')
 41c:	92 36       	cpi	r25, 0x62	; 98
 41e:	39 f4       	brne	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
				ROLL_PID_ON = value % 2 ;
 420:	61 70       	andi	r22, 0x01	; 1
 422:	c2 56       	subi	r28, 0x62	; 98
 424:	df 4f       	sbci	r29, 0xFF	; 255
 426:	68 83       	st	Y, r22
 428:	ce 59       	subi	r28, 0x9E	; 158
 42a:	d0 40       	sbci	r29, 0x00	; 0
 42c:	74 c3       	rjmp	.+1768   	; 0xb16 <__stack+0x217>
			else if (key=='Q') // user wants ROV to make that theta_roll
 42e:	91 35       	cpi	r25, 0x51	; 81
 430:	81 f4       	brne	.+32     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				thetaRollRequiered = correct_angle((f32)value) ;
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 43c:	0e 94 41 13 	call	0x2682	; 0x2682 <correct_angle>
 440:	c2 55       	subi	r28, 0x52	; 82
 442:	df 4f       	sbci	r29, 0xFF	; 255
 444:	68 83       	st	Y, r22
 446:	79 83       	std	Y+1, r23	; 0x01
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	9b 83       	std	Y+3, r25	; 0x03
 44c:	ce 5a       	subi	r28, 0xAE	; 174
 44e:	d0 40       	sbci	r29, 0x00	; 0
 450:	62 c3       	rjmp	.+1732   	; 0xb16 <__stack+0x217>
			else if (key=='q') // sensor reading of current ROV's theta_roll
 452:	91 37       	cpi	r25, 0x71	; 113
 454:	81 f4       	brne	.+32     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			{
				thetaRollCurrent = correct_angle((f32)value) ;
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 460:	0e 94 41 13 	call	0x2682	; 0x2682 <correct_angle>
 464:	c6 55       	subi	r28, 0x56	; 86
 466:	df 4f       	sbci	r29, 0xFF	; 255
 468:	68 83       	st	Y, r22
 46a:	79 83       	std	Y+1, r23	; 0x01
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	9b 83       	std	Y+3, r25	; 0x03
 470:	ca 5a       	subi	r28, 0xAA	; 170
 472:	d0 40       	sbci	r29, 0x00	; 0
 474:	50 c3       	rjmp	.+1696   	; 0xb16 <__stack+0x217>
				//f32 speed = PID_update(&rollPID, thetaRollRequiered, thetaRollCurrent) ;
				//HESC_voidChangeSpeed(ESCS+1, (ESCS+1)->currentSpeeed + (s16)speed) ;
			}
			else if (key=='A')
 476:	91 34       	cpi	r25, 0x41	; 65
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	63 c0       	rjmp	.+198    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
			{
				ROLL_Kp = (f32)value / 100.0f ;
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	48 ec       	ldi	r20, 0xC8	; 200
 48c:	52 e4       	ldi	r21, 0x42	; 66
 48e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 492:	c6 54       	subi	r28, 0x46	; 70
 494:	df 4f       	sbci	r29, 0xFF	; 255
 496:	68 83       	st	Y, r22
 498:	79 83       	std	Y+1, r23	; 0x01
 49a:	8a 83       	std	Y+2, r24	; 0x02
 49c:	9b 83       	std	Y+3, r25	; 0x03
 49e:	ca 5b       	subi	r28, 0xBA	; 186
 4a0:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
 4a2:	8a e3       	ldi	r24, 0x3A	; 58
 4a4:	8f 93       	push	r24
 4a6:	83 e8       	ldi	r24, 0x83	; 131
 4a8:	8f 93       	push	r24
 4aa:	82 e1       	ldi	r24, 0x12	; 18
 4ac:	8f 93       	push	r24
 4ae:	8f e6       	ldi	r24, 0x6F	; 111
 4b0:	8f 93       	push	r24
 4b2:	cb 52       	subi	r28, 0x2B	; 43
 4b4:	df 4f       	sbci	r29, 0xFF	; 255
 4b6:	38 81       	ld	r19, Y
 4b8:	c5 5d       	subi	r28, 0xD5	; 213
 4ba:	d0 40       	sbci	r29, 0x00	; 0
 4bc:	3f 93       	push	r19
 4be:	cc 52       	subi	r28, 0x2C	; 44
 4c0:	df 4f       	sbci	r29, 0xFF	; 255
 4c2:	88 81       	ld	r24, Y
 4c4:	c4 5d       	subi	r28, 0xD4	; 212
 4c6:	d0 40       	sbci	r29, 0x00	; 0
 4c8:	8f 93       	push	r24
 4ca:	cd 52       	subi	r28, 0x2D	; 45
 4cc:	df 4f       	sbci	r29, 0xFF	; 255
 4ce:	98 81       	ld	r25, Y
 4d0:	c3 5d       	subi	r28, 0xD3	; 211
 4d2:	d0 40       	sbci	r29, 0x00	; 0
 4d4:	9f 93       	push	r25
 4d6:	ce 52       	subi	r28, 0x2E	; 46
 4d8:	df 4f       	sbci	r29, 0xFF	; 255
 4da:	a8 81       	ld	r26, Y
 4dc:	c2 5d       	subi	r28, 0xD2	; 210
 4de:	d0 40       	sbci	r29, 0x00	; 0
 4e0:	af 93       	push	r26
 4e2:	82 e4       	ldi	r24, 0x42	; 66
 4e4:	8f 93       	push	r24
 4e6:	88 ec       	ldi	r24, 0xC8	; 200
 4e8:	8f 93       	push	r24
 4ea:	1f 92       	push	r1
 4ec:	1f 92       	push	r1
 4ee:	0f 2e       	mov	r0, r31
 4f0:	81 2c       	mov	r8, r1
 4f2:	91 2c       	mov	r9, r1
 4f4:	f8 ec       	ldi	r31, 0xC8	; 200
 4f6:	af 2e       	mov	r10, r31
 4f8:	f2 ec       	ldi	r31, 0xC2	; 194
 4fa:	bf 2e       	mov	r11, r31
 4fc:	f0 2d       	mov	r31, r0
 4fe:	ce 53       	subi	r28, 0x3E	; 62
 500:	df 4f       	sbci	r29, 0xFF	; 255
 502:	c8 80       	ld	r12, Y
 504:	d9 80       	ldd	r13, Y+1	; 0x01
 506:	ea 80       	ldd	r14, Y+2	; 0x02
 508:	fb 80       	ldd	r15, Y+3	; 0x03
 50a:	c2 5c       	subi	r28, 0xC2	; 194
 50c:	d0 40       	sbci	r29, 0x00	; 0
 50e:	c2 54       	subi	r28, 0x42	; 66
 510:	df 4f       	sbci	r29, 0xFF	; 255
 512:	08 81       	ld	r16, Y
 514:	19 81       	ldd	r17, Y+1	; 0x01
 516:	2a 81       	ldd	r18, Y+2	; 0x02
 518:	3b 81       	ldd	r19, Y+3	; 0x03
 51a:	ce 5b       	subi	r28, 0xBE	; 190
 51c:	d0 40       	sbci	r29, 0x00	; 0
 51e:	c6 54       	subi	r28, 0x46	; 70
 520:	df 4f       	sbci	r29, 0xFF	; 255
 522:	48 81       	ld	r20, Y
 524:	59 81       	ldd	r21, Y+1	; 0x01
 526:	6a 81       	ldd	r22, Y+2	; 0x02
 528:	7b 81       	ldd	r23, Y+3	; 0x03
 52a:	ca 5b       	subi	r28, 0xBA	; 186
 52c:	d0 40       	sbci	r29, 0x00	; 0
 52e:	ce 01       	movw	r24, r28
 530:	c5 96       	adiw	r24, 0x35	; 53
 532:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	ea c2       	rjmp	.+1492   	; 0xb16 <__stack+0x217>
			}
			else if (key=='S')
 542:	93 35       	cpi	r25, 0x53	; 83
 544:	09 f0       	breq	.+2      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 546:	63 c0       	rjmp	.+198    	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
			{
				ROLL_Ki = (f32)value / 100.0f ;
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	48 ec       	ldi	r20, 0xC8	; 200
 558:	52 e4       	ldi	r21, 0x42	; 66
 55a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 55e:	c2 54       	subi	r28, 0x42	; 66
 560:	df 4f       	sbci	r29, 0xFF	; 255
 562:	68 83       	st	Y, r22
 564:	79 83       	std	Y+1, r23	; 0x01
 566:	8a 83       	std	Y+2, r24	; 0x02
 568:	9b 83       	std	Y+3, r25	; 0x03
 56a:	ce 5b       	subi	r28, 0xBE	; 190
 56c:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
 56e:	8a e3       	ldi	r24, 0x3A	; 58
 570:	8f 93       	push	r24
 572:	83 e8       	ldi	r24, 0x83	; 131
 574:	8f 93       	push	r24
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	8f 93       	push	r24
 57a:	8f e6       	ldi	r24, 0x6F	; 111
 57c:	8f 93       	push	r24
 57e:	cb 52       	subi	r28, 0x2B	; 43
 580:	df 4f       	sbci	r29, 0xFF	; 255
 582:	f8 81       	ld	r31, Y
 584:	c5 5d       	subi	r28, 0xD5	; 213
 586:	d0 40       	sbci	r29, 0x00	; 0
 588:	ff 93       	push	r31
 58a:	cc 52       	subi	r28, 0x2C	; 44
 58c:	df 4f       	sbci	r29, 0xFF	; 255
 58e:	28 81       	ld	r18, Y
 590:	c4 5d       	subi	r28, 0xD4	; 212
 592:	d0 40       	sbci	r29, 0x00	; 0
 594:	2f 93       	push	r18
 596:	cd 52       	subi	r28, 0x2D	; 45
 598:	df 4f       	sbci	r29, 0xFF	; 255
 59a:	38 81       	ld	r19, Y
 59c:	c3 5d       	subi	r28, 0xD3	; 211
 59e:	d0 40       	sbci	r29, 0x00	; 0
 5a0:	3f 93       	push	r19
 5a2:	ce 52       	subi	r28, 0x2E	; 46
 5a4:	df 4f       	sbci	r29, 0xFF	; 255
 5a6:	88 81       	ld	r24, Y
 5a8:	c2 5d       	subi	r28, 0xD2	; 210
 5aa:	d0 40       	sbci	r29, 0x00	; 0
 5ac:	8f 93       	push	r24
 5ae:	82 e4       	ldi	r24, 0x42	; 66
 5b0:	8f 93       	push	r24
 5b2:	88 ec       	ldi	r24, 0xC8	; 200
 5b4:	8f 93       	push	r24
 5b6:	1f 92       	push	r1
 5b8:	1f 92       	push	r1
 5ba:	0f 2e       	mov	r0, r31
 5bc:	81 2c       	mov	r8, r1
 5be:	91 2c       	mov	r9, r1
 5c0:	f8 ec       	ldi	r31, 0xC8	; 200
 5c2:	af 2e       	mov	r10, r31
 5c4:	f2 ec       	ldi	r31, 0xC2	; 194
 5c6:	bf 2e       	mov	r11, r31
 5c8:	f0 2d       	mov	r31, r0
 5ca:	ce 53       	subi	r28, 0x3E	; 62
 5cc:	df 4f       	sbci	r29, 0xFF	; 255
 5ce:	c8 80       	ld	r12, Y
 5d0:	d9 80       	ldd	r13, Y+1	; 0x01
 5d2:	ea 80       	ldd	r14, Y+2	; 0x02
 5d4:	fb 80       	ldd	r15, Y+3	; 0x03
 5d6:	c2 5c       	subi	r28, 0xC2	; 194
 5d8:	d0 40       	sbci	r29, 0x00	; 0
 5da:	c2 54       	subi	r28, 0x42	; 66
 5dc:	df 4f       	sbci	r29, 0xFF	; 255
 5de:	08 81       	ld	r16, Y
 5e0:	19 81       	ldd	r17, Y+1	; 0x01
 5e2:	2a 81       	ldd	r18, Y+2	; 0x02
 5e4:	3b 81       	ldd	r19, Y+3	; 0x03
 5e6:	ce 5b       	subi	r28, 0xBE	; 190
 5e8:	d0 40       	sbci	r29, 0x00	; 0
 5ea:	c6 54       	subi	r28, 0x46	; 70
 5ec:	df 4f       	sbci	r29, 0xFF	; 255
 5ee:	48 81       	ld	r20, Y
 5f0:	59 81       	ldd	r21, Y+1	; 0x01
 5f2:	6a 81       	ldd	r22, Y+2	; 0x02
 5f4:	7b 81       	ldd	r23, Y+3	; 0x03
 5f6:	ca 5b       	subi	r28, 0xBA	; 186
 5f8:	d0 40       	sbci	r29, 0x00	; 0
 5fa:	ce 01       	movw	r24, r28
 5fc:	c5 96       	adiw	r24, 0x35	; 53
 5fe:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	84 c2       	rjmp	.+1288   	; 0xb16 <__stack+0x217>
			}
			else if (key=='G')
 60e:	97 34       	cpi	r25, 0x47	; 71
 610:	09 f0       	breq	.+2      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 612:	63 c0       	rjmp	.+198    	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
			{
				ROLL_Kd = (f32)value / 100.0f ;
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	48 ec       	ldi	r20, 0xC8	; 200
 624:	52 e4       	ldi	r21, 0x42	; 66
 626:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 62a:	ce 53       	subi	r28, 0x3E	; 62
 62c:	df 4f       	sbci	r29, 0xFF	; 255
 62e:	68 83       	st	Y, r22
 630:	79 83       	std	Y+1, r23	; 0x01
 632:	8a 83       	std	Y+2, r24	; 0x02
 634:	9b 83       	std	Y+3, r25	; 0x03
 636:	c2 5c       	subi	r28, 0xC2	; 194
 638:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
 63a:	8a e3       	ldi	r24, 0x3A	; 58
 63c:	8f 93       	push	r24
 63e:	83 e8       	ldi	r24, 0x83	; 131
 640:	8f 93       	push	r24
 642:	82 e1       	ldi	r24, 0x12	; 18
 644:	8f 93       	push	r24
 646:	8f e6       	ldi	r24, 0x6F	; 111
 648:	8f 93       	push	r24
 64a:	cb 52       	subi	r28, 0x2B	; 43
 64c:	df 4f       	sbci	r29, 0xFF	; 255
 64e:	b8 81       	ld	r27, Y
 650:	c5 5d       	subi	r28, 0xD5	; 213
 652:	d0 40       	sbci	r29, 0x00	; 0
 654:	bf 93       	push	r27
 656:	cc 52       	subi	r28, 0x2C	; 44
 658:	df 4f       	sbci	r29, 0xFF	; 255
 65a:	e8 81       	ld	r30, Y
 65c:	c4 5d       	subi	r28, 0xD4	; 212
 65e:	d0 40       	sbci	r29, 0x00	; 0
 660:	ef 93       	push	r30
 662:	cd 52       	subi	r28, 0x2D	; 45
 664:	df 4f       	sbci	r29, 0xFF	; 255
 666:	f8 81       	ld	r31, Y
 668:	c3 5d       	subi	r28, 0xD3	; 211
 66a:	d0 40       	sbci	r29, 0x00	; 0
 66c:	ff 93       	push	r31
 66e:	ce 52       	subi	r28, 0x2E	; 46
 670:	df 4f       	sbci	r29, 0xFF	; 255
 672:	28 81       	ld	r18, Y
 674:	c2 5d       	subi	r28, 0xD2	; 210
 676:	d0 40       	sbci	r29, 0x00	; 0
 678:	2f 93       	push	r18
 67a:	82 e4       	ldi	r24, 0x42	; 66
 67c:	8f 93       	push	r24
 67e:	88 ec       	ldi	r24, 0xC8	; 200
 680:	8f 93       	push	r24
 682:	1f 92       	push	r1
 684:	1f 92       	push	r1
 686:	0f 2e       	mov	r0, r31
 688:	81 2c       	mov	r8, r1
 68a:	91 2c       	mov	r9, r1
 68c:	f8 ec       	ldi	r31, 0xC8	; 200
 68e:	af 2e       	mov	r10, r31
 690:	f2 ec       	ldi	r31, 0xC2	; 194
 692:	bf 2e       	mov	r11, r31
 694:	f0 2d       	mov	r31, r0
 696:	ce 53       	subi	r28, 0x3E	; 62
 698:	df 4f       	sbci	r29, 0xFF	; 255
 69a:	c8 80       	ld	r12, Y
 69c:	d9 80       	ldd	r13, Y+1	; 0x01
 69e:	ea 80       	ldd	r14, Y+2	; 0x02
 6a0:	fb 80       	ldd	r15, Y+3	; 0x03
 6a2:	c2 5c       	subi	r28, 0xC2	; 194
 6a4:	d0 40       	sbci	r29, 0x00	; 0
 6a6:	c2 54       	subi	r28, 0x42	; 66
 6a8:	df 4f       	sbci	r29, 0xFF	; 255
 6aa:	08 81       	ld	r16, Y
 6ac:	19 81       	ldd	r17, Y+1	; 0x01
 6ae:	2a 81       	ldd	r18, Y+2	; 0x02
 6b0:	3b 81       	ldd	r19, Y+3	; 0x03
 6b2:	ce 5b       	subi	r28, 0xBE	; 190
 6b4:	d0 40       	sbci	r29, 0x00	; 0
 6b6:	c6 54       	subi	r28, 0x46	; 70
 6b8:	df 4f       	sbci	r29, 0xFF	; 255
 6ba:	48 81       	ld	r20, Y
 6bc:	59 81       	ldd	r21, Y+1	; 0x01
 6be:	6a 81       	ldd	r22, Y+2	; 0x02
 6c0:	7b 81       	ldd	r23, Y+3	; 0x03
 6c2:	ca 5b       	subi	r28, 0xBA	; 186
 6c4:	d0 40       	sbci	r29, 0x00	; 0
 6c6:	ce 01       	movw	r24, r28
 6c8:	c5 96       	adiw	r24, 0x35	; 53
 6ca:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
 6d8:	1e c2       	rjmp	.+1084   	; 0xb16 <__stack+0x217>
			}
			else if (key=='E')
 6da:	95 34       	cpi	r25, 0x45	; 69
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
 6de:	5b c0       	rjmp	.+182    	; 0x796 <__EEPROM_REGION_LENGTH__+0x396>
			{
				ROLL_REFRESH_RATE = (f32)value / 1000.0f ;
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	4a e7       	ldi	r20, 0x7A	; 122
 6f0:	54 e4       	ldi	r21, 0x44	; 68
 6f2:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 6f6:	ce 52       	subi	r28, 0x2E	; 46
 6f8:	df 4f       	sbci	r29, 0xFF	; 255
 6fa:	68 83       	st	Y, r22
 6fc:	c2 5d       	subi	r28, 0xD2	; 210
 6fe:	d0 40       	sbci	r29, 0x00	; 0
 700:	cd 52       	subi	r28, 0x2D	; 45
 702:	df 4f       	sbci	r29, 0xFF	; 255
 704:	78 83       	st	Y, r23
 706:	c3 5d       	subi	r28, 0xD3	; 211
 708:	d0 40       	sbci	r29, 0x00	; 0
 70a:	cc 52       	subi	r28, 0x2C	; 44
 70c:	df 4f       	sbci	r29, 0xFF	; 255
 70e:	88 83       	st	Y, r24
 710:	c4 5d       	subi	r28, 0xD4	; 212
 712:	d0 40       	sbci	r29, 0x00	; 0
 714:	cb 52       	subi	r28, 0x2B	; 43
 716:	df 4f       	sbci	r29, 0xFF	; 255
 718:	98 83       	st	Y, r25
 71a:	c5 5d       	subi	r28, 0xD5	; 213
 71c:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&rollPID, ROLL_Kp, ROLL_Ki, ROLL_Kd, -100.0f, 100.0f, ROLL_REFRESH_RATE, 0.001f) ;
 71e:	2a e3       	ldi	r18, 0x3A	; 58
 720:	2f 93       	push	r18
 722:	23 e8       	ldi	r18, 0x83	; 131
 724:	2f 93       	push	r18
 726:	22 e1       	ldi	r18, 0x12	; 18
 728:	2f 93       	push	r18
 72a:	2f e6       	ldi	r18, 0x6F	; 111
 72c:	2f 93       	push	r18
 72e:	9f 93       	push	r25
 730:	8f 93       	push	r24
 732:	7f 93       	push	r23
 734:	6f 93       	push	r22
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	8f 93       	push	r24
 73a:	88 ec       	ldi	r24, 0xC8	; 200
 73c:	8f 93       	push	r24
 73e:	1f 92       	push	r1
 740:	1f 92       	push	r1
 742:	0f 2e       	mov	r0, r31
 744:	81 2c       	mov	r8, r1
 746:	91 2c       	mov	r9, r1
 748:	f8 ec       	ldi	r31, 0xC8	; 200
 74a:	af 2e       	mov	r10, r31
 74c:	f2 ec       	ldi	r31, 0xC2	; 194
 74e:	bf 2e       	mov	r11, r31
 750:	f0 2d       	mov	r31, r0
 752:	ce 53       	subi	r28, 0x3E	; 62
 754:	df 4f       	sbci	r29, 0xFF	; 255
 756:	c8 80       	ld	r12, Y
 758:	d9 80       	ldd	r13, Y+1	; 0x01
 75a:	ea 80       	ldd	r14, Y+2	; 0x02
 75c:	fb 80       	ldd	r15, Y+3	; 0x03
 75e:	c2 5c       	subi	r28, 0xC2	; 194
 760:	d0 40       	sbci	r29, 0x00	; 0
 762:	c2 54       	subi	r28, 0x42	; 66
 764:	df 4f       	sbci	r29, 0xFF	; 255
 766:	08 81       	ld	r16, Y
 768:	19 81       	ldd	r17, Y+1	; 0x01
 76a:	2a 81       	ldd	r18, Y+2	; 0x02
 76c:	3b 81       	ldd	r19, Y+3	; 0x03
 76e:	ce 5b       	subi	r28, 0xBE	; 190
 770:	d0 40       	sbci	r29, 0x00	; 0
 772:	c6 54       	subi	r28, 0x46	; 70
 774:	df 4f       	sbci	r29, 0xFF	; 255
 776:	48 81       	ld	r20, Y
 778:	59 81       	ldd	r21, Y+1	; 0x01
 77a:	6a 81       	ldd	r22, Y+2	; 0x02
 77c:	7b 81       	ldd	r23, Y+3	; 0x03
 77e:	ca 5b       	subi	r28, 0xBA	; 186
 780:	d0 40       	sbci	r29, 0x00	; 0
 782:	ce 01       	movw	r24, r28
 784:	c5 96       	adiw	r24, 0x35	; 53
 786:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	c0 c1       	rjmp	.+896    	; 0xb16 <__stack+0x217>
			}
			else if (key=='c')
 796:	93 36       	cpi	r25, 0x63	; 99
 798:	39 f4       	brne	.+14     	; 0x7a8 <__EEPROM_REGION_LENGTH__+0x3a8>
				YAW_PID_ON = value % 2 ;
 79a:	61 70       	andi	r22, 0x01	; 1
 79c:	c1 56       	subi	r28, 0x61	; 97
 79e:	df 4f       	sbci	r29, 0xFF	; 255
 7a0:	68 83       	st	Y, r22
 7a2:	cf 59       	subi	r28, 0x9F	; 159
 7a4:	d0 40       	sbci	r29, 0x00	; 0
 7a6:	b7 c1       	rjmp	.+878    	; 0xb16 <__stack+0x217>
			else if (key=='w') // user wants ROV to make that theta_roll
 7a8:	97 37       	cpi	r25, 0x77	; 119
 7aa:	81 f4       	brne	.+32     	; 0x7cc <__EEPROM_REGION_LENGTH__+0x3cc>
				thetaYawRequiered = correct_angle((f32)value) ;
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 7b6:	0e 94 41 13 	call	0x2682	; 0x2682 <correct_angle>
 7ba:	ca 54       	subi	r28, 0x4A	; 74
 7bc:	df 4f       	sbci	r29, 0xFF	; 255
 7be:	68 83       	st	Y, r22
 7c0:	79 83       	std	Y+1, r23	; 0x01
 7c2:	8a 83       	std	Y+2, r24	; 0x02
 7c4:	9b 83       	std	Y+3, r25	; 0x03
 7c6:	c6 5b       	subi	r28, 0xB6	; 182
 7c8:	d0 40       	sbci	r29, 0x00	; 0
 7ca:	a5 c1       	rjmp	.+842    	; 0xb16 <__stack+0x217>
			else if (key=='o') // sensor reading of current ROV's theta_roll
 7cc:	9f 36       	cpi	r25, 0x6F	; 111
 7ce:	81 f4       	brne	.+32     	; 0x7f0 <__EEPROM_REGION_LENGTH__+0x3f0>
				thetaYawCurrent = correct_angle((f32)value) ;
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 7da:	0e 94 41 13 	call	0x2682	; 0x2682 <correct_angle>
 7de:	ce 54       	subi	r28, 0x4E	; 78
 7e0:	df 4f       	sbci	r29, 0xFF	; 255
 7e2:	68 83       	st	Y, r22
 7e4:	79 83       	std	Y+1, r23	; 0x01
 7e6:	8a 83       	std	Y+2, r24	; 0x02
 7e8:	9b 83       	std	Y+3, r25	; 0x03
 7ea:	c2 5b       	subi	r28, 0xB2	; 178
 7ec:	d0 40       	sbci	r29, 0x00	; 0
 7ee:	93 c1       	rjmp	.+806    	; 0xb16 <__stack+0x217>
			else if (key=='T')
 7f0:	94 35       	cpi	r25, 0x54	; 84
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <__EEPROM_REGION_LENGTH__+0x3f6>
 7f4:	64 c0       	rjmp	.+200    	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
			{
				YAW_Kp = (f32)value / 100.0f ;
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	48 ec       	ldi	r20, 0xC8	; 200
 806:	52 e4       	ldi	r21, 0x42	; 66
 808:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 80c:	ca 53       	subi	r28, 0x3A	; 58
 80e:	df 4f       	sbci	r29, 0xFF	; 255
 810:	68 83       	st	Y, r22
 812:	79 83       	std	Y+1, r23	; 0x01
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	9b 83       	std	Y+3, r25	; 0x03
 818:	c6 5c       	subi	r28, 0xC6	; 198
 81a:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
 81c:	8a e3       	ldi	r24, 0x3A	; 58
 81e:	8f 93       	push	r24
 820:	83 e8       	ldi	r24, 0x83	; 131
 822:	8f 93       	push	r24
 824:	82 e1       	ldi	r24, 0x12	; 18
 826:	8f 93       	push	r24
 828:	8f e6       	ldi	r24, 0x6F	; 111
 82a:	8f 93       	push	r24
 82c:	c7 52       	subi	r28, 0x27	; 39
 82e:	df 4f       	sbci	r29, 0xFF	; 255
 830:	b8 81       	ld	r27, Y
 832:	c9 5d       	subi	r28, 0xD9	; 217
 834:	d0 40       	sbci	r29, 0x00	; 0
 836:	bf 93       	push	r27
 838:	c8 52       	subi	r28, 0x28	; 40
 83a:	df 4f       	sbci	r29, 0xFF	; 255
 83c:	e8 81       	ld	r30, Y
 83e:	c8 5d       	subi	r28, 0xD8	; 216
 840:	d0 40       	sbci	r29, 0x00	; 0
 842:	ef 93       	push	r30
 844:	c9 52       	subi	r28, 0x29	; 41
 846:	df 4f       	sbci	r29, 0xFF	; 255
 848:	f8 81       	ld	r31, Y
 84a:	c7 5d       	subi	r28, 0xD7	; 215
 84c:	d0 40       	sbci	r29, 0x00	; 0
 84e:	ff 93       	push	r31
 850:	ca 52       	subi	r28, 0x2A	; 42
 852:	df 4f       	sbci	r29, 0xFF	; 255
 854:	28 81       	ld	r18, Y
 856:	c6 5d       	subi	r28, 0xD6	; 214
 858:	d0 40       	sbci	r29, 0x00	; 0
 85a:	2f 93       	push	r18
 85c:	82 e4       	ldi	r24, 0x42	; 66
 85e:	8f 93       	push	r24
 860:	88 ec       	ldi	r24, 0xC8	; 200
 862:	8f 93       	push	r24
 864:	1f 92       	push	r1
 866:	1f 92       	push	r1
 868:	0f 2e       	mov	r0, r31
 86a:	81 2c       	mov	r8, r1
 86c:	91 2c       	mov	r9, r1
 86e:	f8 ec       	ldi	r31, 0xC8	; 200
 870:	af 2e       	mov	r10, r31
 872:	f2 ec       	ldi	r31, 0xC2	; 194
 874:	bf 2e       	mov	r11, r31
 876:	f0 2d       	mov	r31, r0
 878:	c2 53       	subi	r28, 0x32	; 50
 87a:	df 4f       	sbci	r29, 0xFF	; 255
 87c:	c8 80       	ld	r12, Y
 87e:	d9 80       	ldd	r13, Y+1	; 0x01
 880:	ea 80       	ldd	r14, Y+2	; 0x02
 882:	fb 80       	ldd	r15, Y+3	; 0x03
 884:	ce 5c       	subi	r28, 0xCE	; 206
 886:	d0 40       	sbci	r29, 0x00	; 0
 888:	c6 53       	subi	r28, 0x36	; 54
 88a:	df 4f       	sbci	r29, 0xFF	; 255
 88c:	08 81       	ld	r16, Y
 88e:	19 81       	ldd	r17, Y+1	; 0x01
 890:	2a 81       	ldd	r18, Y+2	; 0x02
 892:	3b 81       	ldd	r19, Y+3	; 0x03
 894:	ca 5c       	subi	r28, 0xCA	; 202
 896:	d0 40       	sbci	r29, 0x00	; 0
 898:	ca 53       	subi	r28, 0x3A	; 58
 89a:	df 4f       	sbci	r29, 0xFF	; 255
 89c:	48 81       	ld	r20, Y
 89e:	59 81       	ldd	r21, Y+1	; 0x01
 8a0:	6a 81       	ldd	r22, Y+2	; 0x02
 8a2:	7b 81       	ldd	r23, Y+3	; 0x03
 8a4:	c6 5c       	subi	r28, 0xC6	; 198
 8a6:	d0 40       	sbci	r29, 0x00	; 0
 8a8:	ce 01       	movw	r24, r28
 8aa:	87 59       	subi	r24, 0x97	; 151
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	f8 94       	cli
 8b6:	de bf       	out	0x3e, r29	; 62
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	cd bf       	out	0x3d, r28	; 61
 8bc:	2c c1       	rjmp	.+600    	; 0xb16 <__stack+0x217>
			}
			else if (key=='O')
 8be:	9f 34       	cpi	r25, 0x4F	; 79
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c2:	64 c0       	rjmp	.+200    	; 0x98c <__stack+0x8d>
			{
				YAW_Ki = (f32)value / 100.0f ;
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	48 ec       	ldi	r20, 0xC8	; 200
 8d4:	52 e4       	ldi	r21, 0x42	; 66
 8d6:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 8da:	c6 53       	subi	r28, 0x36	; 54
 8dc:	df 4f       	sbci	r29, 0xFF	; 255
 8de:	68 83       	st	Y, r22
 8e0:	79 83       	std	Y+1, r23	; 0x01
 8e2:	8a 83       	std	Y+2, r24	; 0x02
 8e4:	9b 83       	std	Y+3, r25	; 0x03
 8e6:	ca 5c       	subi	r28, 0xCA	; 202
 8e8:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
 8ea:	8a e3       	ldi	r24, 0x3A	; 58
 8ec:	8f 93       	push	r24
 8ee:	83 e8       	ldi	r24, 0x83	; 131
 8f0:	8f 93       	push	r24
 8f2:	82 e1       	ldi	r24, 0x12	; 18
 8f4:	8f 93       	push	r24
 8f6:	8f e6       	ldi	r24, 0x6F	; 111
 8f8:	8f 93       	push	r24
 8fa:	c7 52       	subi	r28, 0x27	; 39
 8fc:	df 4f       	sbci	r29, 0xFF	; 255
 8fe:	98 81       	ld	r25, Y
 900:	c9 5d       	subi	r28, 0xD9	; 217
 902:	d0 40       	sbci	r29, 0x00	; 0
 904:	9f 93       	push	r25
 906:	c8 52       	subi	r28, 0x28	; 40
 908:	df 4f       	sbci	r29, 0xFF	; 255
 90a:	a8 81       	ld	r26, Y
 90c:	c8 5d       	subi	r28, 0xD8	; 216
 90e:	d0 40       	sbci	r29, 0x00	; 0
 910:	af 93       	push	r26
 912:	c9 52       	subi	r28, 0x29	; 41
 914:	df 4f       	sbci	r29, 0xFF	; 255
 916:	b8 81       	ld	r27, Y
 918:	c7 5d       	subi	r28, 0xD7	; 215
 91a:	d0 40       	sbci	r29, 0x00	; 0
 91c:	bf 93       	push	r27
 91e:	ca 52       	subi	r28, 0x2A	; 42
 920:	df 4f       	sbci	r29, 0xFF	; 255
 922:	e8 81       	ld	r30, Y
 924:	c6 5d       	subi	r28, 0xD6	; 214
 926:	d0 40       	sbci	r29, 0x00	; 0
 928:	ef 93       	push	r30
 92a:	82 e4       	ldi	r24, 0x42	; 66
 92c:	8f 93       	push	r24
 92e:	88 ec       	ldi	r24, 0xC8	; 200
 930:	8f 93       	push	r24
 932:	1f 92       	push	r1
 934:	1f 92       	push	r1
 936:	0f 2e       	mov	r0, r31
 938:	81 2c       	mov	r8, r1
 93a:	91 2c       	mov	r9, r1
 93c:	f8 ec       	ldi	r31, 0xC8	; 200
 93e:	af 2e       	mov	r10, r31
 940:	f2 ec       	ldi	r31, 0xC2	; 194
 942:	bf 2e       	mov	r11, r31
 944:	f0 2d       	mov	r31, r0
 946:	c2 53       	subi	r28, 0x32	; 50
 948:	df 4f       	sbci	r29, 0xFF	; 255
 94a:	c8 80       	ld	r12, Y
 94c:	d9 80       	ldd	r13, Y+1	; 0x01
 94e:	ea 80       	ldd	r14, Y+2	; 0x02
 950:	fb 80       	ldd	r15, Y+3	; 0x03
 952:	ce 5c       	subi	r28, 0xCE	; 206
 954:	d0 40       	sbci	r29, 0x00	; 0
 956:	c6 53       	subi	r28, 0x36	; 54
 958:	df 4f       	sbci	r29, 0xFF	; 255
 95a:	08 81       	ld	r16, Y
 95c:	19 81       	ldd	r17, Y+1	; 0x01
 95e:	2a 81       	ldd	r18, Y+2	; 0x02
 960:	3b 81       	ldd	r19, Y+3	; 0x03
 962:	ca 5c       	subi	r28, 0xCA	; 202
 964:	d0 40       	sbci	r29, 0x00	; 0
 966:	ca 53       	subi	r28, 0x3A	; 58
 968:	df 4f       	sbci	r29, 0xFF	; 255
 96a:	48 81       	ld	r20, Y
 96c:	59 81       	ldd	r21, Y+1	; 0x01
 96e:	6a 81       	ldd	r22, Y+2	; 0x02
 970:	7b 81       	ldd	r23, Y+3	; 0x03
 972:	c6 5c       	subi	r28, 0xC6	; 198
 974:	d0 40       	sbci	r29, 0x00	; 0
 976:	ce 01       	movw	r24, r28
 978:	87 59       	subi	r24, 0x97	; 151
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	f8 94       	cli
 984:	de bf       	out	0x3e, r29	; 62
 986:	0f be       	out	0x3f, r0	; 63
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	c5 c0       	rjmp	.+394    	; 0xb16 <__stack+0x217>
			}
			else if (key=='P')
 98c:	90 35       	cpi	r25, 0x50	; 80
 98e:	09 f0       	breq	.+2      	; 0x992 <__stack+0x93>
 990:	64 c0       	rjmp	.+200    	; 0xa5a <__stack+0x15b>
			{
				YAW_Kd = (f32)value / 100.0f ;
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 99c:	20 e0       	ldi	r18, 0x00	; 0
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	48 ec       	ldi	r20, 0xC8	; 200
 9a2:	52 e4       	ldi	r21, 0x42	; 66
 9a4:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 9a8:	c2 53       	subi	r28, 0x32	; 50
 9aa:	df 4f       	sbci	r29, 0xFF	; 255
 9ac:	68 83       	st	Y, r22
 9ae:	79 83       	std	Y+1, r23	; 0x01
 9b0:	8a 83       	std	Y+2, r24	; 0x02
 9b2:	9b 83       	std	Y+3, r25	; 0x03
 9b4:	ce 5c       	subi	r28, 0xCE	; 206
 9b6:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
 9b8:	8a e3       	ldi	r24, 0x3A	; 58
 9ba:	8f 93       	push	r24
 9bc:	83 e8       	ldi	r24, 0x83	; 131
 9be:	8f 93       	push	r24
 9c0:	82 e1       	ldi	r24, 0x12	; 18
 9c2:	8f 93       	push	r24
 9c4:	8f e6       	ldi	r24, 0x6F	; 111
 9c6:	8f 93       	push	r24
 9c8:	c7 52       	subi	r28, 0x27	; 39
 9ca:	df 4f       	sbci	r29, 0xFF	; 255
 9cc:	38 81       	ld	r19, Y
 9ce:	c9 5d       	subi	r28, 0xD9	; 217
 9d0:	d0 40       	sbci	r29, 0x00	; 0
 9d2:	3f 93       	push	r19
 9d4:	c8 52       	subi	r28, 0x28	; 40
 9d6:	df 4f       	sbci	r29, 0xFF	; 255
 9d8:	88 81       	ld	r24, Y
 9da:	c8 5d       	subi	r28, 0xD8	; 216
 9dc:	d0 40       	sbci	r29, 0x00	; 0
 9de:	8f 93       	push	r24
 9e0:	c9 52       	subi	r28, 0x29	; 41
 9e2:	df 4f       	sbci	r29, 0xFF	; 255
 9e4:	98 81       	ld	r25, Y
 9e6:	c7 5d       	subi	r28, 0xD7	; 215
 9e8:	d0 40       	sbci	r29, 0x00	; 0
 9ea:	9f 93       	push	r25
 9ec:	ca 52       	subi	r28, 0x2A	; 42
 9ee:	df 4f       	sbci	r29, 0xFF	; 255
 9f0:	a8 81       	ld	r26, Y
 9f2:	c6 5d       	subi	r28, 0xD6	; 214
 9f4:	d0 40       	sbci	r29, 0x00	; 0
 9f6:	af 93       	push	r26
 9f8:	82 e4       	ldi	r24, 0x42	; 66
 9fa:	8f 93       	push	r24
 9fc:	88 ec       	ldi	r24, 0xC8	; 200
 9fe:	8f 93       	push	r24
 a00:	1f 92       	push	r1
 a02:	1f 92       	push	r1
 a04:	0f 2e       	mov	r0, r31
 a06:	81 2c       	mov	r8, r1
 a08:	91 2c       	mov	r9, r1
 a0a:	f8 ec       	ldi	r31, 0xC8	; 200
 a0c:	af 2e       	mov	r10, r31
 a0e:	f2 ec       	ldi	r31, 0xC2	; 194
 a10:	bf 2e       	mov	r11, r31
 a12:	f0 2d       	mov	r31, r0
 a14:	c2 53       	subi	r28, 0x32	; 50
 a16:	df 4f       	sbci	r29, 0xFF	; 255
 a18:	c8 80       	ld	r12, Y
 a1a:	d9 80       	ldd	r13, Y+1	; 0x01
 a1c:	ea 80       	ldd	r14, Y+2	; 0x02
 a1e:	fb 80       	ldd	r15, Y+3	; 0x03
 a20:	ce 5c       	subi	r28, 0xCE	; 206
 a22:	d0 40       	sbci	r29, 0x00	; 0
 a24:	c6 53       	subi	r28, 0x36	; 54
 a26:	df 4f       	sbci	r29, 0xFF	; 255
 a28:	08 81       	ld	r16, Y
 a2a:	19 81       	ldd	r17, Y+1	; 0x01
 a2c:	2a 81       	ldd	r18, Y+2	; 0x02
 a2e:	3b 81       	ldd	r19, Y+3	; 0x03
 a30:	ca 5c       	subi	r28, 0xCA	; 202
 a32:	d0 40       	sbci	r29, 0x00	; 0
 a34:	ca 53       	subi	r28, 0x3A	; 58
 a36:	df 4f       	sbci	r29, 0xFF	; 255
 a38:	48 81       	ld	r20, Y
 a3a:	59 81       	ldd	r21, Y+1	; 0x01
 a3c:	6a 81       	ldd	r22, Y+2	; 0x02
 a3e:	7b 81       	ldd	r23, Y+3	; 0x03
 a40:	c6 5c       	subi	r28, 0xC6	; 198
 a42:	d0 40       	sbci	r29, 0x00	; 0
 a44:	ce 01       	movw	r24, r28
 a46:	87 59       	subi	r24, 0x97	; 151
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 a4e:	0f b6       	in	r0, 0x3f	; 63
 a50:	f8 94       	cli
 a52:	de bf       	out	0x3e, r29	; 62
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	cd bf       	out	0x3d, r28	; 61
 a58:	5e c0       	rjmp	.+188    	; 0xb16 <__stack+0x217>
			}
			else if (key=='K')
 a5a:	9b 34       	cpi	r25, 0x4B	; 75
 a5c:	09 f0       	breq	.+2      	; 0xa60 <__stack+0x161>
 a5e:	5b c0       	rjmp	.+182    	; 0xb16 <__stack+0x217>
			{
				YAW_REFRESH_RATE = (f32)value / 1000.0f ;
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	4a e7       	ldi	r20, 0x7A	; 122
 a70:	54 e4       	ldi	r21, 0x44	; 68
 a72:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
 a76:	ca 52       	subi	r28, 0x2A	; 42
 a78:	df 4f       	sbci	r29, 0xFF	; 255
 a7a:	68 83       	st	Y, r22
 a7c:	c6 5d       	subi	r28, 0xD6	; 214
 a7e:	d0 40       	sbci	r29, 0x00	; 0
 a80:	c9 52       	subi	r28, 0x29	; 41
 a82:	df 4f       	sbci	r29, 0xFF	; 255
 a84:	78 83       	st	Y, r23
 a86:	c7 5d       	subi	r28, 0xD7	; 215
 a88:	d0 40       	sbci	r29, 0x00	; 0
 a8a:	c8 52       	subi	r28, 0x28	; 40
 a8c:	df 4f       	sbci	r29, 0xFF	; 255
 a8e:	88 83       	st	Y, r24
 a90:	c8 5d       	subi	r28, 0xD8	; 216
 a92:	d0 40       	sbci	r29, 0x00	; 0
 a94:	c7 52       	subi	r28, 0x27	; 39
 a96:	df 4f       	sbci	r29, 0xFF	; 255
 a98:	98 83       	st	Y, r25
 a9a:	c9 5d       	subi	r28, 0xD9	; 217
 a9c:	d0 40       	sbci	r29, 0x00	; 0
				init_PID(&yawPID, YAW_Kp, YAW_Ki, YAW_Kd, -100.0f, 100.0f, YAW_REFRESH_RATE, 0.001f) ;
 a9e:	2a e3       	ldi	r18, 0x3A	; 58
 aa0:	2f 93       	push	r18
 aa2:	23 e8       	ldi	r18, 0x83	; 131
 aa4:	2f 93       	push	r18
 aa6:	22 e1       	ldi	r18, 0x12	; 18
 aa8:	2f 93       	push	r18
 aaa:	2f e6       	ldi	r18, 0x6F	; 111
 aac:	2f 93       	push	r18
 aae:	9f 93       	push	r25
 ab0:	8f 93       	push	r24
 ab2:	7f 93       	push	r23
 ab4:	6f 93       	push	r22
 ab6:	82 e4       	ldi	r24, 0x42	; 66
 ab8:	8f 93       	push	r24
 aba:	88 ec       	ldi	r24, 0xC8	; 200
 abc:	8f 93       	push	r24
 abe:	1f 92       	push	r1
 ac0:	1f 92       	push	r1
 ac2:	0f 2e       	mov	r0, r31
 ac4:	81 2c       	mov	r8, r1
 ac6:	91 2c       	mov	r9, r1
 ac8:	f8 ec       	ldi	r31, 0xC8	; 200
 aca:	af 2e       	mov	r10, r31
 acc:	f2 ec       	ldi	r31, 0xC2	; 194
 ace:	bf 2e       	mov	r11, r31
 ad0:	f0 2d       	mov	r31, r0
 ad2:	c2 53       	subi	r28, 0x32	; 50
 ad4:	df 4f       	sbci	r29, 0xFF	; 255
 ad6:	c8 80       	ld	r12, Y
 ad8:	d9 80       	ldd	r13, Y+1	; 0x01
 ada:	ea 80       	ldd	r14, Y+2	; 0x02
 adc:	fb 80       	ldd	r15, Y+3	; 0x03
 ade:	ce 5c       	subi	r28, 0xCE	; 206
 ae0:	d0 40       	sbci	r29, 0x00	; 0
 ae2:	c6 53       	subi	r28, 0x36	; 54
 ae4:	df 4f       	sbci	r29, 0xFF	; 255
 ae6:	08 81       	ld	r16, Y
 ae8:	19 81       	ldd	r17, Y+1	; 0x01
 aea:	2a 81       	ldd	r18, Y+2	; 0x02
 aec:	3b 81       	ldd	r19, Y+3	; 0x03
 aee:	ca 5c       	subi	r28, 0xCA	; 202
 af0:	d0 40       	sbci	r29, 0x00	; 0
 af2:	ca 53       	subi	r28, 0x3A	; 58
 af4:	df 4f       	sbci	r29, 0xFF	; 255
 af6:	48 81       	ld	r20, Y
 af8:	59 81       	ldd	r21, Y+1	; 0x01
 afa:	6a 81       	ldd	r22, Y+2	; 0x02
 afc:	7b 81       	ldd	r23, Y+3	; 0x03
 afe:	c6 5c       	subi	r28, 0xC6	; 198
 b00:	d0 40       	sbci	r29, 0x00	; 0
 b02:	ce 01       	movw	r24, r28
 b04:	87 59       	subi	r24, 0x97	; 151
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <init_PID>
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	de bf       	out	0x3e, r29	; 62
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	cd bf       	out	0x3d, r28	; 61
			}
			
		}
		
		// refreshing motors speeds :
		if (SAFE_SPEED_CHANGE_MODE == 0)
 b16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SAFE_SPEED_CHANGE_MODE>
 b1a:	88 23       	and	r24, r24
 b1c:	a1 f0       	breq	.+40     	; 0xb46 <__stack+0x247>
 b1e:	10 e0       	ldi	r17, 0x00	; 0
 b20:	43 c0       	rjmp	.+134    	; 0xba8 <__stack+0x2a9>
		{
			for (u8 i=0; i<6; i++)
			{
				if ((((ESC_t*)(ESCS+i))->targetSpeed) != (((ESC_t*)(ESCS+i))->currentSpeeed))
 b22:	f3 01       	movw	r30, r6
 b24:	37 e1       	ldi	r19, 0x17	; 23
 b26:	13 9f       	mul	r17, r19
 b28:	e0 0d       	add	r30, r0
 b2a:	f1 1d       	adc	r31, r1
 b2c:	11 24       	eor	r1, r1
 b2e:	63 89       	ldd	r22, Z+19	; 0x13
 b30:	74 89       	ldd	r23, Z+20	; 0x14
 b32:	81 89       	ldd	r24, Z+17	; 0x11
 b34:	92 89       	ldd	r25, Z+18	; 0x12
 b36:	68 17       	cp	r22, r24
 b38:	79 07       	cpc	r23, r25
 b3a:	19 f0       	breq	.+6      	; 0xb42 <__stack+0x243>
					HESC_voidChangeSpeed(ESCS+i, ((ESC_t*)(ESCS+i))->targetSpeed) ;
 b3c:	cf 01       	movw	r24, r30
 b3e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
		}
		
		// refreshing motors speeds :
		if (SAFE_SPEED_CHANGE_MODE == 0)
		{
			for (u8 i=0; i<6; i++)
 b42:	1f 5f       	subi	r17, 0xFF	; 255
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <__stack+0x249>
 b46:	10 e0       	ldi	r17, 0x00	; 0
 b48:	16 30       	cpi	r17, 0x06	; 6
 b4a:	58 f3       	brcs	.-42     	; 0xb22 <__stack+0x223>
 b4c:	36 c0       	rjmp	.+108    	; 0xbba <__stack+0x2bb>
		}
		else
		{
			for (u8 i=0; i<6; i++)
			{
				if ((((ESC_t*)(ESCS+i))->targetSpeed) != (((ESC_t*)(ESCS+i))->currentSpeeed))
 b4e:	f3 01       	movw	r30, r6
 b50:	87 e1       	ldi	r24, 0x17	; 23
 b52:	18 9f       	mul	r17, r24
 b54:	e0 0d       	add	r30, r0
 b56:	f1 1d       	adc	r31, r1
 b58:	11 24       	eor	r1, r1
 b5a:	83 89       	ldd	r24, Z+19	; 0x13
 b5c:	94 89       	ldd	r25, Z+20	; 0x14
 b5e:	61 89       	ldd	r22, Z+17	; 0x11
 b60:	72 89       	ldd	r23, Z+18	; 0x12
 b62:	86 17       	cp	r24, r22
 b64:	97 07       	cpc	r25, r23
 b66:	f9 f0       	breq	.+62     	; 0xba6 <__stack+0x2a7>
				{
					s16 deltaSpeed = abs((((ESC_t*)(ESCS+i))->currentSpeeed) - (((ESC_t*)(ESCS+i))->targetSpeed)) ;
 b68:	ab 01       	movw	r20, r22
 b6a:	48 1b       	sub	r20, r24
 b6c:	59 0b       	sbc	r21, r25
 b6e:	9a 01       	movw	r18, r20
 b70:	22 f4       	brpl	.+8      	; 0xb7a <__stack+0x27b>
 b72:	22 27       	eor	r18, r18
 b74:	33 27       	eor	r19, r19
 b76:	24 1b       	sub	r18, r20
 b78:	35 0b       	sbc	r19, r21
					deltaSpeed = (deltaSpeed<10) ? 1 : 10 ;
 b7a:	2a 30       	cpi	r18, 0x0A	; 10
 b7c:	31 05       	cpc	r19, r1
 b7e:	1c f4       	brge	.+6      	; 0xb86 <__stack+0x287>
 b80:	21 e0       	ldi	r18, 0x01	; 1
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x28b>
 b86:	2a e0       	ldi	r18, 0x0A	; 10
 b88:	30 e0       	ldi	r19, 0x00	; 0
					if ((((ESC_t*)(ESCS+i))->targetSpeed) > (((ESC_t*)(ESCS+i))->currentSpeeed))
 b8a:	68 17       	cp	r22, r24
 b8c:	79 07       	cpc	r23, r25
 b8e:	34 f4       	brge	.+12     	; 0xb9c <__stack+0x29d>
						HESC_voidChangeSpeed(ESCS+i, (((ESC_t*)(ESCS+i))->currentSpeeed) + deltaSpeed) ;
 b90:	62 0f       	add	r22, r18
 b92:	73 1f       	adc	r23, r19
 b94:	cf 01       	movw	r24, r30
 b96:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <__stack+0x2a7>
					else
						HESC_voidChangeSpeed(ESCS+i, (((ESC_t*)(ESCS+i))->currentSpeeed) - deltaSpeed) ;
 b9c:	62 1b       	sub	r22, r18
 b9e:	73 0b       	sbc	r23, r19
 ba0:	cf 01       	movw	r24, r30
 ba2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
					HESC_voidChangeSpeed(ESCS+i, ((ESC_t*)(ESCS+i))->targetSpeed) ;
			}
		}
		else
		{
			for (u8 i=0; i<6; i++)
 ba6:	1f 5f       	subi	r17, 0xFF	; 255
 ba8:	16 30       	cpi	r17, 0x06	; 6
 baa:	88 f2       	brcs	.-94     	; 0xb4e <__stack+0x24f>
						HESC_voidChangeSpeed(ESCS+i, (((ESC_t*)(ESCS+i))->currentSpeeed) + deltaSpeed) ;
					else
						HESC_voidChangeSpeed(ESCS+i, (((ESC_t*)(ESCS+i))->currentSpeeed) - deltaSpeed) ;
				}
			}
			MCLOCK_voidDelayMS(CHANGE_SPEED_DELAY) ;
 bac:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <CHANGE_SPEED_DELAY>
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
		}
		
		// PID :
		if (ALTITUDE_PID_ON == 1)
 bba:	c3 56       	subi	r28, 0x63	; 99
 bbc:	df 4f       	sbci	r29, 0xFF	; 255
 bbe:	98 81       	ld	r25, Y
 bc0:	cd 59       	subi	r28, 0x9D	; 157
 bc2:	d0 40       	sbci	r29, 0x00	; 0
 bc4:	91 30       	cpi	r25, 0x01	; 1
 bc6:	31 f5       	brne	.+76     	; 0xc14 <__stack+0x315>
			if (isPID_time(&altitudePID))
 bc8:	ce 01       	movw	r24, r28
 bca:	01 96       	adiw	r24, 0x01	; 1
 bcc:	0e 94 3e 12 	call	0x247c	; 0x247c <isPID_time>
 bd0:	88 23       	and	r24, r24
 bd2:	01 f1       	breq	.+64     	; 0xc14 <__stack+0x315>
			{
				f32 speed = PID_update(&altitudePID, altitudeRequiered, altitudeCurrent) ;
 bd4:	ca 55       	subi	r28, 0x5A	; 90
 bd6:	df 4f       	sbci	r29, 0xFF	; 255
 bd8:	08 81       	ld	r16, Y
 bda:	19 81       	ldd	r17, Y+1	; 0x01
 bdc:	2a 81       	ldd	r18, Y+2	; 0x02
 bde:	3b 81       	ldd	r19, Y+3	; 0x03
 be0:	c6 5a       	subi	r28, 0xA6	; 166
 be2:	d0 40       	sbci	r29, 0x00	; 0
 be4:	ce 55       	subi	r28, 0x5E	; 94
 be6:	df 4f       	sbci	r29, 0xFF	; 255
 be8:	48 81       	ld	r20, Y
 bea:	59 81       	ldd	r21, Y+1	; 0x01
 bec:	6a 81       	ldd	r22, Y+2	; 0x02
 bee:	7b 81       	ldd	r23, Y+3	; 0x03
 bf0:	c2 5a       	subi	r28, 0xA2	; 162
 bf2:	d0 40       	sbci	r29, 0x00	; 0
 bf4:	ce 01       	movw	r24, r28
 bf6:	01 96       	adiw	r24, 0x01	; 1
 bf8:	0e 94 77 06 	call	0xcee	; 0xcee <PID_update>
				HESC_voidChangeSpeed(ESCS+0, (((ESC_t*)(ESCS+0))->currentSpeeed) + (s16)speed) ;
 bfc:	d3 01       	movw	r26, r6
 bfe:	51 96       	adiw	r26, 0x11	; 17
 c00:	0d 91       	ld	r16, X+
 c02:	1c 91       	ld	r17, X
 c04:	52 97       	sbiw	r26, 0x12	; 18
 c06:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__fixsfsi>
 c0a:	60 0f       	add	r22, r16
 c0c:	71 1f       	adc	r23, r17
 c0e:	c3 01       	movw	r24, r6
 c10:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
			}
		
		if (ROLL_PID_ON == 1)
 c14:	c2 56       	subi	r28, 0x62	; 98
 c16:	df 4f       	sbci	r29, 0xFF	; 255
 c18:	b8 81       	ld	r27, Y
 c1a:	ce 59       	subi	r28, 0x9E	; 158
 c1c:	d0 40       	sbci	r29, 0x00	; 0
 c1e:	b1 30       	cpi	r27, 0x01	; 1
 c20:	29 f5       	brne	.+74     	; 0xc6c <__stack+0x36d>
			if (isPID_time(&rollPID))
 c22:	ce 01       	movw	r24, r28
 c24:	c5 96       	adiw	r24, 0x35	; 53
 c26:	0e 94 3e 12 	call	0x247c	; 0x247c <isPID_time>
 c2a:	88 23       	and	r24, r24
 c2c:	f9 f0       	breq	.+62     	; 0xc6c <__stack+0x36d>
			{
				f32 speed = PID_update(&rollPID, thetaRollRequiered, thetaRollCurrent) ;
 c2e:	c6 55       	subi	r28, 0x56	; 86
 c30:	df 4f       	sbci	r29, 0xFF	; 255
 c32:	08 81       	ld	r16, Y
 c34:	19 81       	ldd	r17, Y+1	; 0x01
 c36:	2a 81       	ldd	r18, Y+2	; 0x02
 c38:	3b 81       	ldd	r19, Y+3	; 0x03
 c3a:	ca 5a       	subi	r28, 0xAA	; 170
 c3c:	d0 40       	sbci	r29, 0x00	; 0
 c3e:	c2 55       	subi	r28, 0x52	; 82
 c40:	df 4f       	sbci	r29, 0xFF	; 255
 c42:	48 81       	ld	r20, Y
 c44:	59 81       	ldd	r21, Y+1	; 0x01
 c46:	6a 81       	ldd	r22, Y+2	; 0x02
 c48:	7b 81       	ldd	r23, Y+3	; 0x03
 c4a:	ce 5a       	subi	r28, 0xAE	; 174
 c4c:	d0 40       	sbci	r29, 0x00	; 0
 c4e:	ce 01       	movw	r24, r28
 c50:	c5 96       	adiw	r24, 0x35	; 53
 c52:	0e 94 77 06 	call	0xcee	; 0xcee <PID_update>
				HESC_voidChangeSpeed(ESCS+1, (((ESC_t*)(ESCS+1))->currentSpeeed) + (s16)speed) ;
 c56:	f3 01       	movw	r30, r6
 c58:	00 a5       	ldd	r16, Z+40	; 0x28
 c5a:	11 a5       	ldd	r17, Z+41	; 0x29
 c5c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__fixsfsi>
 c60:	60 0f       	add	r22, r16
 c62:	71 1f       	adc	r23, r17
 c64:	c3 01       	movw	r24, r6
 c66:	47 96       	adiw	r24, 0x17	; 23
 c68:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
			}
		
		if (YAW_PID_ON == 1)
 c6c:	c1 56       	subi	r28, 0x61	; 97
 c6e:	df 4f       	sbci	r29, 0xFF	; 255
 c70:	f8 81       	ld	r31, Y
 c72:	cf 59       	subi	r28, 0x9F	; 159
 c74:	d0 40       	sbci	r29, 0x00	; 0
 c76:	f1 30       	cpi	r31, 0x01	; 1
 c78:	09 f0       	breq	.+2      	; 0xc7c <__stack+0x37d>
 c7a:	02 cb       	rjmp	.-2556   	; 0x280 <main+0x1b8>
			if (isPID_time(&yawPID))
 c7c:	ce 01       	movw	r24, r28
 c7e:	87 59       	subi	r24, 0x97	; 151
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	0e 94 3e 12 	call	0x247c	; 0x247c <isPID_time>
 c86:	88 23       	and	r24, r24
 c88:	09 f4       	brne	.+2      	; 0xc8c <__stack+0x38d>
 c8a:	fa ca       	rjmp	.-2572   	; 0x280 <main+0x1b8>
			{
				f32 speed = PID_update(&yawPID, thetaYawRequiered, thetaYawCurrent) ;
 c8c:	ce 54       	subi	r28, 0x4E	; 78
 c8e:	df 4f       	sbci	r29, 0xFF	; 255
 c90:	08 81       	ld	r16, Y
 c92:	19 81       	ldd	r17, Y+1	; 0x01
 c94:	2a 81       	ldd	r18, Y+2	; 0x02
 c96:	3b 81       	ldd	r19, Y+3	; 0x03
 c98:	c2 5b       	subi	r28, 0xB2	; 178
 c9a:	d0 40       	sbci	r29, 0x00	; 0
 c9c:	ca 54       	subi	r28, 0x4A	; 74
 c9e:	df 4f       	sbci	r29, 0xFF	; 255
 ca0:	48 81       	ld	r20, Y
 ca2:	59 81       	ldd	r21, Y+1	; 0x01
 ca4:	6a 81       	ldd	r22, Y+2	; 0x02
 ca6:	7b 81       	ldd	r23, Y+3	; 0x03
 ca8:	c6 5b       	subi	r28, 0xB6	; 182
 caa:	d0 40       	sbci	r29, 0x00	; 0
 cac:	ce 01       	movw	r24, r28
 cae:	87 59       	subi	r24, 0x97	; 151
 cb0:	9f 4f       	sbci	r25, 0xFF	; 255
 cb2:	0e 94 77 06 	call	0xcee	; 0xcee <PID_update>
				HESC_voidChangeSpeed(ESCS+2, (((ESC_t*)(ESCS+2))->currentSpeeed) + (s16)speed) ;
 cb6:	f3 01       	movw	r30, r6
 cb8:	ff 96       	adiw	r30, 0x3f	; 63
 cba:	00 81       	ld	r16, Z
 cbc:	11 81       	ldd	r17, Z+1	; 0x01
 cbe:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__fixsfsi>
 cc2:	6b 01       	movw	r12, r22
 cc4:	7c 01       	movw	r14, r24
 cc6:	b8 01       	movw	r22, r16
 cc8:	6c 0d       	add	r22, r12
 cca:	7d 1d       	adc	r23, r13
 ccc:	c3 01       	movw	r24, r6
 cce:	8e 96       	adiw	r24, 0x2e	; 46
 cd0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
				HESC_voidChangeSpeed(ESCS+5, (((ESC_t*)(ESCS+5))->currentSpeeed) - (s16)speed) ;
 cd4:	c3 01       	movw	r24, r6
 cd6:	8d 58       	subi	r24, 0x8D	; 141
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	dc 01       	movw	r26, r24
 cdc:	51 96       	adiw	r26, 0x11	; 17
 cde:	6d 91       	ld	r22, X+
 ce0:	7c 91       	ld	r23, X
 ce2:	52 97       	sbiw	r26, 0x12	; 18
 ce4:	6c 19       	sub	r22, r12
 ce6:	7d 09       	sbc	r23, r13
 ce8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <HESC_voidChangeSpeed>
 cec:	c9 ca       	rjmp	.-2670   	; 0x280 <main+0x1b8>

Disassembly of section .text.PI2C_u8GetStatus:

00002d22 <PI2C_u8GetStatus>:


// master / slave functions :
u8 PI2C_u8GetStatus(void) // checked.
{
	return TWSR_register & 0xF8 ;
    2d22:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    2d26:	88 7f       	andi	r24, 0xF8	; 248
    2d28:	08 95       	ret

Disassembly of section .text.MI2C_voidSlaveInit:

00002632 <MI2C_voidSlaveInit>:
		
		if (status == I2CSlaveRxGeneralCallAckStatus	||	status == I2CSlaveRxAttribLostGeneralCallAckStatus || status==0x98 || status==0x90 || status==0x80 || status==0x88) // if general call has been received, ACK has been returned
			return status ;
	}
	
}
    2632:	88 0f       	add	r24, r24
    2634:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2638:	44 23       	and	r20, r20
    263a:	29 f0       	breq	.+10     	; 0x2646 <MI2C_voidSlaveInit+0x14>
    263c:	ea eb       	ldi	r30, 0xBA	; 186
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	81 60       	ori	r24, 0x01	; 1
    2644:	80 83       	st	Z, r24
    2646:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7f80bd>
    264a:	ec eb       	ldi	r30, 0xBC	; 188
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 60       	ori	r24, 0x04	; 4
    2652:	80 83       	st	Z, r24
    2654:	80 81       	ld	r24, Z
    2656:	80 64       	ori	r24, 0x40	; 64
    2658:	80 83       	st	Z, r24
    265a:	80 81       	ld	r24, Z
    265c:	80 68       	ori	r24, 0x80	; 128
    265e:	80 83       	st	Z, r24
    2660:	64 e1       	ldi	r22, 0x14	; 20
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <MCLOCK_voidDelayMS>
    266c:	8a e0       	ldi	r24, 0x0A	; 10
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 1f 0b 	call	0x163e	; 0x163e <malloc>
    2674:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <MI2C_strRecived+0x1>
    2678:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <MI2C_strRecived>
    267c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <was_called>
    2680:	08 95       	ret

Disassembly of section .text.MI2C_voidSlaveIsCalled:

00002940 <MI2C_voidSlaveIsCalled>:
enum MI2C_ReadWriteMode MI2C_voidSlaveIsCalled (void)
{
	// no wait here !
		
	// check status :
	u8 status = PI2C_u8GetStatus() ;
    2940:	0e 94 91 16 	call	0x2d22	; 0x2d22 <PI2C_u8GetStatus>
	
	if (status == I2CSlaveRxAdressRecivedWriteAckStatus	||	status == I2CSlaveRxAttribLostAdressRecivedWriteAckStatus) // if Own SLA+W has been received, ACK has been returned
    2944:	80 36       	cpi	r24, 0x60	; 96
    2946:	11 f0       	breq	.+4      	; 0x294c <MI2C_voidSlaveIsCalled+0xc>
    2948:	88 36       	cpi	r24, 0x68	; 104
    294a:	29 f4       	brne	.+10     	; 0x2956 <MI2C_voidSlaveIsCalled+0x16>
	{
		was_called = 1 ;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <was_called>
		return I2CWrite ;
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	08 95       	ret
	}

	if (status == I2CSlaveTxAdressRecivedReadAckStatus	||	status == I2CSlaveTxAttribLostAdressRecivedReadAckStatus) // if Own SLA+R has been received, ACK has been returned
    2956:	88 3a       	cpi	r24, 0xA8	; 168
    2958:	11 f0       	breq	.+4      	; 0x295e <MI2C_voidSlaveIsCalled+0x1e>
    295a:	80 3b       	cpi	r24, 0xB0	; 176
    295c:	21 f4       	brne	.+8      	; 0x2966 <MI2C_voidSlaveIsCalled+0x26>
	{
		was_called = 1 ;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <was_called>
		return I2CRead ;
    2964:	08 95       	ret
	}
	
	if (status == I2CSlaveRxGeneralCallAckStatus	||	status == I2CSlaveRxAttribLostGeneralCallAckStatus || status==0x98 || status==0x90 || status==0x80 || status==0x88) // if general call has been received, ACK has been returned
    2966:	80 37       	cpi	r24, 0x70	; 112
    2968:	51 f0       	breq	.+20     	; 0x297e <MI2C_voidSlaveIsCalled+0x3e>
    296a:	88 37       	cpi	r24, 0x78	; 120
    296c:	41 f0       	breq	.+16     	; 0x297e <MI2C_voidSlaveIsCalled+0x3e>
    296e:	88 39       	cpi	r24, 0x98	; 152
    2970:	31 f0       	breq	.+12     	; 0x297e <MI2C_voidSlaveIsCalled+0x3e>
    2972:	80 39       	cpi	r24, 0x90	; 144
    2974:	21 f0       	breq	.+8      	; 0x297e <MI2C_voidSlaveIsCalled+0x3e>
    2976:	80 38       	cpi	r24, 0x80	; 128
    2978:	11 f0       	breq	.+4      	; 0x297e <MI2C_voidSlaveIsCalled+0x3e>
    297a:	88 38       	cpi	r24, 0x88	; 136
    297c:	21 f4       	brne	.+8      	; 0x2986 <MI2C_voidSlaveIsCalled+0x46>
	{
		was_called = 1 ;
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <was_called>
		return status ;
    2984:	08 95       	ret
	}
		
	else
		return 0 ; // hasn't been called.
    2986:	80 e0       	ldi	r24, 0x00	; 0
}
    2988:	08 95       	ret

Disassembly of section .text.MI2C_u8SlaveReadData:

000025de <MI2C_u8SlaveReadData>:
		
		if (status == I2CSlaveRxGeneralCallAckStatus	||	status == I2CSlaveRxAttribLostGeneralCallAckStatus || status==0x98 || status==0x90 || status==0x80 || status==0x88) // if general call has been received, ACK has been returned
			return status ;
	}
	
}
    25de:	ec eb       	ldi	r30, 0xBC	; 188
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	84 60       	ori	r24, 0x04	; 4
    25e6:	80 83       	st	Z, r24
    25e8:	80 81       	ld	r24, Z
    25ea:	80 64       	ori	r24, 0x40	; 64
    25ec:	80 83       	st	Z, r24
    25ee:	80 81       	ld	r24, Z
    25f0:	80 68       	ori	r24, 0x80	; 128
    25f2:	80 83       	st	Z, r24
    25f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    25f8:	88 23       	and	r24, r24
    25fa:	e4 f7       	brge	.-8      	; 0x25f4 <MI2C_u8SlaveReadData+0x16>
    25fc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <PI2C_u8GetStatus>
    2600:	80 38       	cpi	r24, 0x80	; 128
    2602:	11 f0       	breq	.+4      	; 0x2608 <MI2C_u8SlaveReadData+0x2a>
    2604:	80 39       	cpi	r24, 0x90	; 144
    2606:	19 f4       	brne	.+6      	; 0x260e <MI2C_u8SlaveReadData+0x30>
    2608:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    260c:	08 95       	ret
    260e:	80 38       	cpi	r24, 0x80	; 128
    2610:	11 f0       	breq	.+4      	; 0x2616 <MI2C_u8SlaveReadData+0x38>
    2612:	80 39       	cpi	r24, 0x90	; 144
    2614:	19 f4       	brne	.+6      	; 0x261c <MI2C_u8SlaveReadData+0x3e>
    2616:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    261a:	08 95       	ret
    261c:	80 3a       	cpi	r24, 0xA0	; 160
    261e:	39 f4       	brne	.+14     	; 0x262e <MI2C_u8SlaveReadData+0x50>
    2620:	ec eb       	ldi	r30, 0xBC	; 188
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	80 68       	ori	r24, 0x80	; 128
    2628:	80 83       	st	Z, r24
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	08 95       	ret
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	08 95       	ret

Disassembly of section .text.MI2C_u8SlaveReadString:

00002adc <MI2C_u8SlaveReadString>:
	// if none of the previous :
	return '\0' ;
}

char* MI2C_u8SlaveReadString(void)
{
    2adc:	cf 93       	push	r28
	char recievedChar = (char)MI2C_u8SlaveReadData() ;
    2ade:	0e 94 ef 12 	call	0x25de	; 0x25de <MI2C_u8SlaveReadData>
	u8 i ;
	for(i=0; recievedChar!='\0'; i++)
    2ae2:	c0 e0       	ldi	r28, 0x00	; 0
    2ae4:	0a c0       	rjmp	.+20     	; 0x2afa <MI2C_u8SlaveReadString+0x1e>
	{
		MI2C_strRecived[i] = recievedChar ;
    2ae6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <MI2C_strRecived>
    2aea:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <MI2C_strRecived+0x1>
    2aee:	ec 0f       	add	r30, r28
    2af0:	f1 1d       	adc	r31, r1
    2af2:	80 83       	st	Z, r24
		recievedChar = (char)MI2C_u8SlaveReadData() ;
    2af4:	0e 94 ef 12 	call	0x25de	; 0x25de <MI2C_u8SlaveReadData>

char* MI2C_u8SlaveReadString(void)
{
	char recievedChar = (char)MI2C_u8SlaveReadData() ;
	u8 i ;
	for(i=0; recievedChar!='\0'; i++)
    2af8:	cf 5f       	subi	r28, 0xFF	; 255
    2afa:	81 11       	cpse	r24, r1
    2afc:	f4 cf       	rjmp	.-24     	; 0x2ae6 <MI2C_u8SlaveReadString+0xa>
	{
		MI2C_strRecived[i] = recievedChar ;
		recievedChar = (char)MI2C_u8SlaveReadData() ;
	}
	MI2C_strRecived[i] = '\0' ;
    2afe:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <MI2C_strRecived>
    2b02:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <MI2C_strRecived+0x1>
    2b06:	ec 0f       	add	r30, r28
    2b08:	f1 1d       	adc	r31, r1
    2b0a:	10 82       	st	Z, r1
	return MI2C_strRecived ;
}
    2b0c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <MI2C_strRecived>
    2b10:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <MI2C_strRecived+0x1>
    2b14:	cf 91       	pop	r28
    2b16:	08 95       	ret

Disassembly of section .text.MANIPPIN_voidInitPin:

00002082 <MANIPPIN_voidInitPin>:
#include "manipPin_interface.h"


void MANIPPIN_voidInitPin(enum MANIPPIN_Port port, u8 pin, enum MANIPPIN_PinMode set)
{
	if (port == manipPin_Port_B)
    2082:	81 11       	cpse	r24, r1
    2084:	19 c0       	rjmp	.+50     	; 0x20b8 <MANIPPIN_voidInitPin+0x36>
	{
		if (set == INPUT)
    2086:	41 11       	cpse	r20, r1
    2088:	0c c0       	rjmp	.+24     	; 0x20a2 <MANIPPIN_voidInitPin+0x20>
			CLR_BIT(DDRB_register, pin) ;
    208a:	24 b1       	in	r18, 0x04	; 4
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <MANIPPIN_voidInitPin+0x14>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	6a 95       	dec	r22
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <MANIPPIN_voidInitPin+0x10>
    209a:	80 95       	com	r24
    209c:	82 23       	and	r24, r18
    209e:	84 b9       	out	0x04, r24	; 4
    20a0:	08 95       	ret
		else
			SET_BIT(DDRB_register, pin) ;
    20a2:	24 b1       	in	r18, 0x04	; 4
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <MANIPPIN_voidInitPin+0x2c>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	6a 95       	dec	r22
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <MANIPPIN_voidInitPin+0x28>
    20b2:	82 2b       	or	r24, r18
    20b4:	84 b9       	out	0x04, r24	; 4
    20b6:	08 95       	ret
	}
	else if (port == manipPin_Port_C)
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	c9 f4       	brne	.+50     	; 0x20ee <MANIPPIN_voidInitPin+0x6c>
	{
		if (set == INPUT)
    20bc:	41 11       	cpse	r20, r1
    20be:	0c c0       	rjmp	.+24     	; 0x20d8 <MANIPPIN_voidInitPin+0x56>
			CLR_BIT(DDRC_register, pin) ;
    20c0:	27 b1       	in	r18, 0x07	; 7
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <MANIPPIN_voidInitPin+0x4a>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	6a 95       	dec	r22
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <MANIPPIN_voidInitPin+0x46>
    20d0:	80 95       	com	r24
    20d2:	82 23       	and	r24, r18
    20d4:	87 b9       	out	0x07, r24	; 7
    20d6:	08 95       	ret
		else
			SET_BIT(DDRC_register, pin) ;
    20d8:	27 b1       	in	r18, 0x07	; 7
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <MANIPPIN_voidInitPin+0x62>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	6a 95       	dec	r22
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <MANIPPIN_voidInitPin+0x5e>
    20e8:	82 2b       	or	r24, r18
    20ea:	87 b9       	out	0x07, r24	; 7
    20ec:	08 95       	ret
	}
	else // if (port == manipPin_Port_D)
	{
		if (set == INPUT)
    20ee:	41 11       	cpse	r20, r1
    20f0:	0c c0       	rjmp	.+24     	; 0x210a <MANIPPIN_voidInitPin+0x88>
			CLR_BIT(DDRD_register, pin) ;
    20f2:	2a b1       	in	r18, 0x0a	; 10
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <MANIPPIN_voidInitPin+0x7c>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	6a 95       	dec	r22
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <MANIPPIN_voidInitPin+0x78>
    2102:	80 95       	com	r24
    2104:	82 23       	and	r24, r18
    2106:	8a b9       	out	0x0a, r24	; 10
    2108:	08 95       	ret
		else
			SET_BIT(DDRD_register, pin) ;
    210a:	2a b1       	in	r18, 0x0a	; 10
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <MANIPPIN_voidInitPin+0x94>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	6a 95       	dec	r22
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <MANIPPIN_voidInitPin+0x90>
    211a:	82 2b       	or	r24, r18
    211c:	8a b9       	out	0x0a, r24	; 10
    211e:	08 95       	ret

Disassembly of section .text.MTIM0_voidInit:

000019e8 <MTIM0_voidInit>:
	return TCNT0_register ;
}

void MTIM0_voidSetCounter(u8 counterValue)
{
	TCNT0_register = counterValue ;
    19e8:	0f 93       	push	r16
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	60 97       	sbiw	r28, 0x10	; 16
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	80 ff       	sbrs	r24, 0
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <MTIM0_voidInit+0x22>
    1a02:	95 b5       	in	r25, 0x25	; 37
    1a04:	91 60       	ori	r25, 0x01	; 1
    1a06:	95 bd       	out	0x25, r25	; 37
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <MTIM0_voidInit+0x28>
    1a0a:	95 b5       	in	r25, 0x25	; 37
    1a0c:	9e 7f       	andi	r25, 0xFE	; 254
    1a0e:	95 bd       	out	0x25, r25	; 37
    1a10:	81 ff       	sbrs	r24, 1
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <MTIM0_voidInit+0x34>
    1a14:	95 b5       	in	r25, 0x25	; 37
    1a16:	92 60       	ori	r25, 0x02	; 2
    1a18:	95 bd       	out	0x25, r25	; 37
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <MTIM0_voidInit+0x3a>
    1a1c:	95 b5       	in	r25, 0x25	; 37
    1a1e:	9d 7f       	andi	r25, 0xFD	; 253
    1a20:	95 bd       	out	0x25, r25	; 37
    1a22:	82 ff       	sbrs	r24, 2
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <MTIM0_voidInit+0x46>
    1a26:	95 b5       	in	r25, 0x25	; 37
    1a28:	94 60       	ori	r25, 0x04	; 4
    1a2a:	95 bd       	out	0x25, r25	; 37
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <MTIM0_voidInit+0x4c>
    1a2e:	95 b5       	in	r25, 0x25	; 37
    1a30:	9b 7f       	andi	r25, 0xFB	; 251
    1a32:	95 bd       	out	0x25, r25	; 37
    1a34:	90 e1       	ldi	r25, 0x10	; 16
    1a36:	e1 e3       	ldi	r30, 0x31	; 49
    1a38:	f1 e0       	ldi	r31, 0x01	; 1
    1a3a:	de 01       	movw	r26, r28
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	01 90       	ld	r0, Z+
    1a40:	0d 92       	st	X+, r0
    1a42:	9a 95       	dec	r25
    1a44:	e1 f7       	brne	.-8      	; 0x1a3e <MTIM0_voidInit+0x56>
    1a46:	e8 2f       	mov	r30, r24
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	8c 0f       	add	r24, r28
    1a54:	9d 1f       	adc	r25, r29
    1a56:	e8 0f       	add	r30, r24
    1a58:	f9 1f       	adc	r31, r25
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <PTIM0And1Prescaler+0x1>
    1a62:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PTIM0And1Prescaler>
    1a66:	60 ff       	sbrs	r22, 0
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <MTIM0_voidInit+0x8a>
    1a6a:	84 b5       	in	r24, 0x24	; 36
    1a6c:	81 60       	ori	r24, 0x01	; 1
    1a6e:	84 bd       	out	0x24, r24	; 36
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <MTIM0_voidInit+0x90>
    1a72:	84 b5       	in	r24, 0x24	; 36
    1a74:	8e 7f       	andi	r24, 0xFE	; 254
    1a76:	84 bd       	out	0x24, r24	; 36
    1a78:	61 ff       	sbrs	r22, 1
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <MTIM0_voidInit+0x9c>
    1a7c:	84 b5       	in	r24, 0x24	; 36
    1a7e:	82 60       	ori	r24, 0x02	; 2
    1a80:	84 bd       	out	0x24, r24	; 36
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <MTIM0_voidInit+0xa2>
    1a84:	84 b5       	in	r24, 0x24	; 36
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	84 bd       	out	0x24, r24	; 36
    1a8a:	62 ff       	sbrs	r22, 2
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <MTIM0_voidInit+0xae>
    1a8e:	85 b5       	in	r24, 0x25	; 37
    1a90:	88 60       	ori	r24, 0x08	; 8
    1a92:	85 bd       	out	0x25, r24	; 37
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <MTIM0_voidInit+0xb4>
    1a96:	85 b5       	in	r24, 0x25	; 37
    1a98:	87 7f       	andi	r24, 0xF7	; 247
    1a9a:	85 bd       	out	0x25, r24	; 37
    1a9c:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <PTIM0Mode>
    1aa0:	40 ff       	sbrs	r20, 0
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <MTIM0_voidInit+0xc4>
    1aa4:	84 b5       	in	r24, 0x24	; 36
    1aa6:	80 64       	ori	r24, 0x40	; 64
    1aa8:	84 bd       	out	0x24, r24	; 36
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <MTIM0_voidInit+0xca>
    1aac:	84 b5       	in	r24, 0x24	; 36
    1aae:	8f 7b       	andi	r24, 0xBF	; 191
    1ab0:	84 bd       	out	0x24, r24	; 36
    1ab2:	41 ff       	sbrs	r20, 1
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <MTIM0_voidInit+0xd6>
    1ab6:	84 b5       	in	r24, 0x24	; 36
    1ab8:	80 68       	ori	r24, 0x80	; 128
    1aba:	84 bd       	out	0x24, r24	; 36
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <MTIM0_voidInit+0xdc>
    1abe:	84 b5       	in	r24, 0x24	; 36
    1ac0:	8f 77       	andi	r24, 0x7F	; 127
    1ac2:	84 bd       	out	0x24, r24	; 36
    1ac4:	20 ff       	sbrs	r18, 0
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <MTIM0_voidInit+0xe8>
    1ac8:	84 b5       	in	r24, 0x24	; 36
    1aca:	80 61       	ori	r24, 0x10	; 16
    1acc:	84 bd       	out	0x24, r24	; 36
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <MTIM0_voidInit+0xee>
    1ad0:	84 b5       	in	r24, 0x24	; 36
    1ad2:	8f 7e       	andi	r24, 0xEF	; 239
    1ad4:	84 bd       	out	0x24, r24	; 36
    1ad6:	21 ff       	sbrs	r18, 1
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <MTIM0_voidInit+0xfa>
    1ada:	84 b5       	in	r24, 0x24	; 36
    1adc:	80 62       	ori	r24, 0x20	; 32
    1ade:	84 bd       	out	0x24, r24	; 36
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <MTIM0_voidInit+0x100>
    1ae2:	84 b5       	in	r24, 0x24	; 36
    1ae4:	8f 7d       	andi	r24, 0xDF	; 223
    1ae6:	84 bd       	out	0x24, r24	; 36
    1ae8:	06 bd       	out	0x26, r16	; 38
    1aea:	60 96       	adiw	r28, 0x10	; 16
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

Disassembly of section .text.MTIM0_voidSetDutyCycle:

00002c80 <MTIM0_voidSetDutyCycle>:
}

void MTIM0_voidSetDutyCycle(u8 dutyCycle, enum TIM0OutputChannel channel)
{
	switch(channel)
    2c80:	66 23       	and	r22, r22
    2c82:	19 f0       	breq	.+6      	; 0x2c8a <MTIM0_voidSetDutyCycle+0xa>
    2c84:	61 30       	cpi	r22, 0x01	; 1
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <MTIM0_voidSetDutyCycle+0xe>
    2c88:	08 95       	ret
	{
		case TIM0ChannelA :
			OCR0A_register = dutyCycle ;
    2c8a:	87 bd       	out	0x27, r24	; 39
			break ;
    2c8c:	08 95       	ret
			
		case TIM0ChannelB :
			OCR0B_register = dutyCycle ;
    2c8e:	88 bd       	out	0x28, r24	; 40
    2c90:	08 95       	ret

Disassembly of section .text.__vector_16:

000026d0 <__vector_16>:
	return TCNT0_register ;
}

void MTIM0_voidSetCounter(u8 counterValue)
{
	TCNT0_register = counterValue ;
    26d0:	1f 92       	push	r1
    26d2:	0f 92       	push	r0
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	0f 92       	push	r0
    26d8:	11 24       	eor	r1, r1
    26da:	2f 93       	push	r18
    26dc:	3f 93       	push	r19
    26de:	4f 93       	push	r20
    26e0:	5f 93       	push	r21
    26e2:	6f 93       	push	r22
    26e4:	7f 93       	push	r23
    26e6:	8f 93       	push	r24
    26e8:	9f 93       	push	r25
    26ea:	af 93       	push	r26
    26ec:	bf 93       	push	r27
    26ee:	ef 93       	push	r30
    26f0:	ff 93       	push	r31
    26f2:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <PTIM0_callback_OVF>
    26f6:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <PTIM0_callback_OVF+0x1>
    26fa:	09 95       	icall
    26fc:	ff 91       	pop	r31
    26fe:	ef 91       	pop	r30
    2700:	bf 91       	pop	r27
    2702:	af 91       	pop	r26
    2704:	9f 91       	pop	r25
    2706:	8f 91       	pop	r24
    2708:	7f 91       	pop	r23
    270a:	6f 91       	pop	r22
    270c:	5f 91       	pop	r21
    270e:	4f 91       	pop	r20
    2710:	3f 91       	pop	r19
    2712:	2f 91       	pop	r18
    2714:	0f 90       	pop	r0
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	0f 90       	pop	r0
    271a:	1f 90       	pop	r1
    271c:	18 95       	reti

Disassembly of section .text.__vector_14:

0000271e <__vector_14>:
    271e:	1f 92       	push	r1
    2720:	0f 92       	push	r0
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	0f 92       	push	r0
    2726:	11 24       	eor	r1, r1
    2728:	2f 93       	push	r18
    272a:	3f 93       	push	r19
    272c:	4f 93       	push	r20
    272e:	5f 93       	push	r21
    2730:	6f 93       	push	r22
    2732:	7f 93       	push	r23
    2734:	8f 93       	push	r24
    2736:	9f 93       	push	r25
    2738:	af 93       	push	r26
    273a:	bf 93       	push	r27
    273c:	ef 93       	push	r30
    273e:	ff 93       	push	r31
    2740:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <PTIM0_callback_COMPA>
    2744:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <PTIM0_callback_COMPA+0x1>
    2748:	09 95       	icall
    274a:	ff 91       	pop	r31
    274c:	ef 91       	pop	r30
    274e:	bf 91       	pop	r27
    2750:	af 91       	pop	r26
    2752:	9f 91       	pop	r25
    2754:	8f 91       	pop	r24
    2756:	7f 91       	pop	r23
    2758:	6f 91       	pop	r22
    275a:	5f 91       	pop	r21
    275c:	4f 91       	pop	r20
    275e:	3f 91       	pop	r19
    2760:	2f 91       	pop	r18
    2762:	0f 90       	pop	r0
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	0f 90       	pop	r0
    2768:	1f 90       	pop	r1
    276a:	18 95       	reti

Disassembly of section .text.__vector_15:

0000276c <__vector_15>:
    276c:	1f 92       	push	r1
    276e:	0f 92       	push	r0
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	0f 92       	push	r0
    2774:	11 24       	eor	r1, r1
    2776:	2f 93       	push	r18
    2778:	3f 93       	push	r19
    277a:	4f 93       	push	r20
    277c:	5f 93       	push	r21
    277e:	6f 93       	push	r22
    2780:	7f 93       	push	r23
    2782:	8f 93       	push	r24
    2784:	9f 93       	push	r25
    2786:	af 93       	push	r26
    2788:	bf 93       	push	r27
    278a:	ef 93       	push	r30
    278c:	ff 93       	push	r31
    278e:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <PTIM0_callback_COMPB>
    2792:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <PTIM0_callback_COMPB+0x1>
    2796:	09 95       	icall
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	7f 91       	pop	r23
    27a6:	6f 91       	pop	r22
    27a8:	5f 91       	pop	r21
    27aa:	4f 91       	pop	r20
    27ac:	3f 91       	pop	r19
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

Disassembly of section .text.MTIM1_voidInit:

00001366 <MTIM1_voidInit>:
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	c4 54       	subi	r28, 0x44	; 68
    1384:	d1 09       	sbc	r29, r1
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	80 ff       	sbrs	r24, 0
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <MTIM1_voidInit+0x3a>
    1394:	e1 e8       	ldi	r30, 0x81	; 129
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	90 81       	ld	r25, Z
    139a:	91 60       	ori	r25, 0x01	; 1
    139c:	90 83       	st	Z, r25
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <MTIM1_voidInit+0x44>
    13a0:	e1 e8       	ldi	r30, 0x81	; 129
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	90 81       	ld	r25, Z
    13a6:	9e 7f       	andi	r25, 0xFE	; 254
    13a8:	90 83       	st	Z, r25
    13aa:	81 ff       	sbrs	r24, 1
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <MTIM1_voidInit+0x54>
    13ae:	e1 e8       	ldi	r30, 0x81	; 129
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	90 81       	ld	r25, Z
    13b4:	92 60       	ori	r25, 0x02	; 2
    13b6:	90 83       	st	Z, r25
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <MTIM1_voidInit+0x5e>
    13ba:	e1 e8       	ldi	r30, 0x81	; 129
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	90 81       	ld	r25, Z
    13c0:	9d 7f       	andi	r25, 0xFD	; 253
    13c2:	90 83       	st	Z, r25
    13c4:	82 ff       	sbrs	r24, 2
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <MTIM1_voidInit+0x6e>
    13c8:	e1 e8       	ldi	r30, 0x81	; 129
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	90 81       	ld	r25, Z
    13ce:	94 60       	ori	r25, 0x04	; 4
    13d0:	90 83       	st	Z, r25
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <MTIM1_voidInit+0x78>
    13d4:	e1 e8       	ldi	r30, 0x81	; 129
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	90 81       	ld	r25, Z
    13da:	9b 7f       	andi	r25, 0xFB	; 251
    13dc:	90 83       	st	Z, r25
    13de:	90 e1       	ldi	r25, 0x10	; 16
    13e0:	e1 e3       	ldi	r30, 0x31	; 49
    13e2:	f1 e0       	ldi	r31, 0x01	; 1
    13e4:	de 01       	movw	r26, r28
    13e6:	d5 96       	adiw	r26, 0x35	; 53
    13e8:	01 90       	ld	r0, Z+
    13ea:	0d 92       	st	X+, r0
    13ec:	9a 95       	dec	r25
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <MTIM1_voidInit+0x82>
    13f0:	e8 2f       	mov	r30, r24
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	8c 0f       	add	r24, r28
    13fe:	9d 1f       	adc	r25, r29
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
    1404:	84 a9       	ldd	r24, Z+52	; 0x34
    1406:	95 a9       	ldd	r25, Z+53	; 0x35
    1408:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <PTIM0And1Prescaler+0x1>
    140c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PTIM0And1Prescaler>
    1410:	cc 24       	eor	r12, r12
    1412:	ca 94       	dec	r12
    1414:	dc 2c       	mov	r13, r12
    1416:	e1 2c       	mov	r14, r1
    1418:	f1 2c       	mov	r15, r1
    141a:	c9 82       	std	Y+1, r12	; 0x01
    141c:	da 82       	std	Y+2, r13	; 0x02
    141e:	eb 82       	std	Y+3, r14	; 0x03
    1420:	fc 82       	std	Y+4, r15	; 0x04
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	af 83       	std	Y+7, r26	; 0x07
    1430:	b8 87       	std	Y+8, r27	; 0x08
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	89 87       	std	Y+9, r24	; 0x09
    143c:	9a 87       	std	Y+10, r25	; 0x0a
    143e:	ab 87       	std	Y+11, r26	; 0x0b
    1440:	bc 87       	std	Y+12, r27	; 0x0c
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	a0 e0       	ldi	r26, 0x00	; 0
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	8d 87       	std	Y+13, r24	; 0x0d
    144c:	9e 87       	std	Y+14, r25	; 0x0e
    144e:	af 87       	std	Y+15, r26	; 0x0f
    1450:	b8 8b       	std	Y+16, r27	; 0x10
    1452:	c9 8a       	std	Y+17, r12	; 0x11
    1454:	da 8a       	std	Y+18, r13	; 0x12
    1456:	eb 8a       	std	Y+19, r14	; 0x13
    1458:	fc 8a       	std	Y+20, r15	; 0x14
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	8d 8b       	std	Y+21, r24	; 0x15
    1464:	9e 8b       	std	Y+22, r25	; 0x16
    1466:	af 8b       	std	Y+23, r26	; 0x17
    1468:	b8 8f       	std	Y+24, r27	; 0x18
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	a0 e0       	ldi	r26, 0x00	; 0
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	89 8f       	std	Y+25, r24	; 0x19
    1474:	9a 8f       	std	Y+26, r25	; 0x1a
    1476:	ab 8f       	std	Y+27, r26	; 0x1b
    1478:	bc 8f       	std	Y+28, r27	; 0x1c
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	93 e0       	ldi	r25, 0x03	; 3
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	8d 8f       	std	Y+29, r24	; 0x1d
    1484:	9e 8f       	std	Y+30, r25	; 0x1e
    1486:	af 8f       	std	Y+31, r26	; 0x1f
    1488:	b8 a3       	std	Y+32, r27	; 0x20
    148a:	a6 e8       	ldi	r26, 0x86	; 134
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	8d 90       	ld	r8, X+
    1490:	9c 90       	ld	r9, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	9f ef       	ldi	r25, 0xFF	; 255
    1496:	89 1a       	sub	r8, r25
    1498:	99 0a       	sbc	r9, r25
    149a:	a1 2c       	mov	r10, r1
    149c:	b1 2c       	mov	r11, r1
    149e:	89 a2       	std	Y+33, r8	; 0x21
    14a0:	9a a2       	std	Y+34, r9	; 0x22
    14a2:	ab a2       	std	Y+35, r10	; 0x23
    14a4:	bc a2       	std	Y+36, r11	; 0x24
    14a6:	e8 e8       	ldi	r30, 0x88	; 136
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 80       	ld	r8, Z
    14ac:	91 80       	ldd	r9, Z+1	; 0x01
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	88 1a       	sub	r8, r24
    14b2:	98 0a       	sbc	r9, r24
    14b4:	a1 2c       	mov	r10, r1
    14b6:	b1 2c       	mov	r11, r1
    14b8:	8d a2       	std	Y+37, r8	; 0x25
    14ba:	9e a2       	std	Y+38, r9	; 0x26
    14bc:	af a2       	std	Y+39, r10	; 0x27
    14be:	b8 a6       	std	Y+40, r11	; 0x28
    14c0:	8d 91       	ld	r24, X+
    14c2:	9c 91       	ld	r25, X
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	89 a7       	std	Y+41, r24	; 0x29
    14cc:	9a a7       	std	Y+42, r25	; 0x2a
    14ce:	ab a7       	std	Y+43, r26	; 0x2b
    14d0:	bc a7       	std	Y+44, r27	; 0x2c
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	8d a7       	std	Y+45, r24	; 0x2d
    14de:	9e a7       	std	Y+46, r25	; 0x2e
    14e0:	af a7       	std	Y+47, r26	; 0x2f
    14e2:	b8 ab       	std	Y+48, r27	; 0x30
    14e4:	c9 aa       	std	Y+49, r12	; 0x31
    14e6:	da aa       	std	Y+50, r13	; 0x32
    14e8:	eb aa       	std	Y+51, r14	; 0x33
    14ea:	fc aa       	std	Y+52, r15	; 0x34
    14ec:	e6 2f       	mov	r30, r22
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	8c 0f       	add	r24, r28
    14fe:	9d 1f       	adc	r25, r29
    1500:	e8 0f       	add	r30, r24
    1502:	f9 1f       	adc	r31, r25
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	a2 81       	ldd	r26, Z+2	; 0x02
    150a:	b3 81       	ldd	r27, Z+3	; 0x03
    150c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    1510:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    1514:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
    1518:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
    151c:	60 ff       	sbrs	r22, 0
    151e:	06 c0       	rjmp	.+12     	; 0x152c <MTIM1_voidInit+0x1c6>
    1520:	e0 e8       	ldi	r30, 0x80	; 128
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <MTIM1_voidInit+0x1d0>
    152c:	e0 e8       	ldi	r30, 0x80	; 128
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	80 83       	st	Z, r24
    1536:	61 ff       	sbrs	r22, 1
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <MTIM1_voidInit+0x1e0>
    153a:	e0 e8       	ldi	r30, 0x80	; 128
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	80 83       	st	Z, r24
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <MTIM1_voidInit+0x1ea>
    1546:	e0 e8       	ldi	r30, 0x80	; 128
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8d 7f       	andi	r24, 0xFD	; 253
    154e:	80 83       	st	Z, r24
    1550:	62 ff       	sbrs	r22, 2
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <MTIM1_voidInit+0x1fa>
    1554:	e1 e8       	ldi	r30, 0x81	; 129
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	80 83       	st	Z, r24
    155e:	05 c0       	rjmp	.+10     	; 0x156a <MTIM1_voidInit+0x204>
    1560:	e1 e8       	ldi	r30, 0x81	; 129
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	80 83       	st	Z, r24
    156a:	63 ff       	sbrs	r22, 3
    156c:	06 c0       	rjmp	.+12     	; 0x157a <MTIM1_voidInit+0x214>
    156e:	e1 e8       	ldi	r30, 0x81	; 129
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 61       	ori	r24, 0x10	; 16
    1576:	80 83       	st	Z, r24
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <MTIM1_voidInit+0x21e>
    157a:	e1 e8       	ldi	r30, 0x81	; 129
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8f 7e       	andi	r24, 0xEF	; 239
    1582:	80 83       	st	Z, r24
    1584:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <PTIM1Mode>
    1588:	40 ff       	sbrs	r20, 0
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <MTIM1_voidInit+0x232>
    158c:	e0 e8       	ldi	r30, 0x80	; 128
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 64       	ori	r24, 0x40	; 64
    1594:	80 83       	st	Z, r24
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <MTIM1_voidInit+0x23c>
    1598:	e0 e8       	ldi	r30, 0x80	; 128
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7b       	andi	r24, 0xBF	; 191
    15a0:	80 83       	st	Z, r24
    15a2:	41 ff       	sbrs	r20, 1
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <MTIM1_voidInit+0x24c>
    15a6:	e0 e8       	ldi	r30, 0x80	; 128
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 68       	ori	r24, 0x80	; 128
    15ae:	80 83       	st	Z, r24
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <MTIM1_voidInit+0x256>
    15b2:	e0 e8       	ldi	r30, 0x80	; 128
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 77       	andi	r24, 0x7F	; 127
    15ba:	80 83       	st	Z, r24
    15bc:	20 ff       	sbrs	r18, 0
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <MTIM1_voidInit+0x266>
    15c0:	e0 e8       	ldi	r30, 0x80	; 128
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 61       	ori	r24, 0x10	; 16
    15c8:	80 83       	st	Z, r24
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <MTIM1_voidInit+0x270>
    15cc:	e0 e8       	ldi	r30, 0x80	; 128
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7e       	andi	r24, 0xEF	; 239
    15d4:	80 83       	st	Z, r24
    15d6:	21 ff       	sbrs	r18, 1
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <MTIM1_voidInit+0x280>
    15da:	e0 e8       	ldi	r30, 0x80	; 128
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 62       	ori	r24, 0x20	; 32
    15e2:	80 83       	st	Z, r24
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <MTIM1_voidInit+0x28a>
    15e6:	e0 e8       	ldi	r30, 0x80	; 128
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7d       	andi	r24, 0xDF	; 223
    15ee:	80 83       	st	Z, r24
    15f0:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    15f4:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    15f8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <PTIM0And1OVFCount+0x1>
    15fc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <PTIM0And1OVFCount>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PTIM1StartTickMeasureFirstTime>
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 1f 0b 	call	0x163e	; 0x163e <malloc>
    160e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <PTIMICPDuties+0x1>
    1612:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PTIMICPDuties>
    1616:	cc 5b       	subi	r28, 0xBC	; 188
    1618:	df 4f       	sbci	r29, 0xFF	; 255
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	bf 90       	pop	r11
    1636:	af 90       	pop	r10
    1638:	9f 90       	pop	r9
    163a:	8f 90       	pop	r8
    163c:	08 95       	ret

Disassembly of section .text.MTIM1_voidSet8BitDutyCycle:

00002b9c <MTIM1_voidSet8BitDutyCycle>:
    2b9c:	61 11       	cpse	r22, r1
    2b9e:	06 c0       	rjmp	.+12     	; 0x2bac <MTIM1_voidSet8BitDutyCycle+0x10>
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2ba6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2baa:	08 95       	ret
    2bac:	61 30       	cpi	r22, 0x01	; 1
    2bae:	29 f4       	brne	.+10     	; 0x2bba <MTIM1_voidSet8BitDutyCycle+0x1e>
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2bb6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2bba:	08 95       	ret

Disassembly of section .text.MTIM1_voidEnableInterrupt:

00002bbc <MTIM1_voidEnableInterrupt>:
    2bbc:	9f b7       	in	r25, 0x3f	; 63
    2bbe:	90 68       	ori	r25, 0x80	; 128
    2bc0:	9f bf       	out	0x3f, r25	; 63
    2bc2:	ef e6       	ldi	r30, 0x6F	; 111
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	90 81       	ld	r25, Z
    2bc8:	21 e0       	ldi	r18, 0x01	; 1
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <MTIM1_voidEnableInterrupt+0x16>
    2bce:	22 0f       	add	r18, r18
    2bd0:	33 1f       	adc	r19, r19
    2bd2:	8a 95       	dec	r24
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <MTIM1_voidEnableInterrupt+0x12>
    2bd6:	29 2b       	or	r18, r25
    2bd8:	20 83       	st	Z, r18
    2bda:	08 95       	ret

Disassembly of section .text.MTIM1_voidStartTickMeasure:

00002b4a <MTIM1_voidStartTickMeasure>:
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MTIM1_voidEnableInterrupt>
    2b50:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PTIM1StartTickMeasureFirstTime>
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	81 f4       	brne	.+32     	; 0x2b78 <MTIM1_voidStartTickMeasure+0x2e>
    2b58:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    2b5c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    2b60:	a0 e0       	ldi	r26, 0x00	; 0
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <PTIM1FirstTCNT>
    2b68:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <PTIM1FirstTCNT+0x1>
    2b6c:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <PTIM1FirstTCNT+0x2>
    2b70:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <PTIM1FirstTCNT+0x3>
    2b74:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <PTIM1StartTickMeasureFirstTime>
    2b78:	08 95       	ret

Disassembly of section .text.MTIM1_u32GetElapsedTicks:

00002532 <MTIM1_u32GetElapsedTicks>:
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    253a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    253e:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <PTIM0And1OVFCount>
    2542:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <PTIM0And1OVFCount+0x1>
    2546:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
    254a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
    254e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
    2552:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
    2556:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__muluhisi3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8e 0f       	add	r24, r30
    2560:	9f 1f       	adc	r25, r31
    2562:	a1 1d       	adc	r26, r1
    2564:	b1 1d       	adc	r27, r1
    2566:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <PTIM1FirstTCNT>
    256a:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <PTIM1FirstTCNT+0x1>
    256e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <PTIM1FirstTCNT+0x2>
    2572:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <PTIM1FirstTCNT+0x3>
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	60 1b       	sub	r22, r16
    257c:	71 0b       	sbc	r23, r17
    257e:	82 0b       	sbc	r24, r18
    2580:	93 0b       	sbc	r25, r19
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	08 95       	ret

Disassembly of section .text.__vector_13:

000023ba <__vector_13>:
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
    23dc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PTIM0And1OVFCount>
    23e0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <PTIM0And1OVFCount+0x1>
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <PTIM0And1OVFCount+0x1>
    23ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PTIM0And1OVFCount>
    23ee:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PTIM1_callback_OVF>
    23f2:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PTIM1_callback_OVF+0x1>
    23f6:	30 97       	sbiw	r30, 0x00	; 0
    23f8:	09 f0       	breq	.+2      	; 0x23fc <__vector_13+0x42>
    23fa:	09 95       	icall
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

Disassembly of section .text.__vector_12:

000027ba <__vector_12>:
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	2f 93       	push	r18
    27c6:	3f 93       	push	r19
    27c8:	4f 93       	push	r20
    27ca:	5f 93       	push	r21
    27cc:	6f 93       	push	r22
    27ce:	7f 93       	push	r23
    27d0:	8f 93       	push	r24
    27d2:	9f 93       	push	r25
    27d4:	af 93       	push	r26
    27d6:	bf 93       	push	r27
    27d8:	ef 93       	push	r30
    27da:	ff 93       	push	r31
    27dc:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <PTIM1_callback_COMPB>
    27e0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <PTIM1_callback_COMPB+0x1>
    27e4:	09 95       	icall
    27e6:	ff 91       	pop	r31
    27e8:	ef 91       	pop	r30
    27ea:	bf 91       	pop	r27
    27ec:	af 91       	pop	r26
    27ee:	9f 91       	pop	r25
    27f0:	8f 91       	pop	r24
    27f2:	7f 91       	pop	r23
    27f4:	6f 91       	pop	r22
    27f6:	5f 91       	pop	r21
    27f8:	4f 91       	pop	r20
    27fa:	3f 91       	pop	r19
    27fc:	2f 91       	pop	r18
    27fe:	0f 90       	pop	r0
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	0f 90       	pop	r0
    2804:	1f 90       	pop	r1
    2806:	18 95       	reti

Disassembly of section .text.__vector_11:

00002808 <__vector_11>:
    2808:	1f 92       	push	r1
    280a:	0f 92       	push	r0
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	0f 92       	push	r0
    2810:	11 24       	eor	r1, r1
    2812:	2f 93       	push	r18
    2814:	3f 93       	push	r19
    2816:	4f 93       	push	r20
    2818:	5f 93       	push	r21
    281a:	6f 93       	push	r22
    281c:	7f 93       	push	r23
    281e:	8f 93       	push	r24
    2820:	9f 93       	push	r25
    2822:	af 93       	push	r26
    2824:	bf 93       	push	r27
    2826:	ef 93       	push	r30
    2828:	ff 93       	push	r31
    282a:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <PTIM1_callback_COMPA>
    282e:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <PTIM1_callback_COMPA+0x1>
    2832:	09 95       	icall
    2834:	ff 91       	pop	r31
    2836:	ef 91       	pop	r30
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	7f 91       	pop	r23
    2842:	6f 91       	pop	r22
    2844:	5f 91       	pop	r21
    2846:	4f 91       	pop	r20
    2848:	3f 91       	pop	r19
    284a:	2f 91       	pop	r18
    284c:	0f 90       	pop	r0
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	0f 90       	pop	r0
    2852:	1f 90       	pop	r1
    2854:	18 95       	reti

Disassembly of section .text.__vector_10:

00002588 <__vector_10>:
    2588:	1f 92       	push	r1
    258a:	0f 92       	push	r0
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
    25aa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    25ae:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    25b2:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <PTIM1_callback_CAPT>
    25b6:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <PTIM1_callback_CAPT+0x1>
    25ba:	09 95       	icall
    25bc:	ff 91       	pop	r31
    25be:	ef 91       	pop	r30
    25c0:	bf 91       	pop	r27
    25c2:	af 91       	pop	r26
    25c4:	9f 91       	pop	r25
    25c6:	8f 91       	pop	r24
    25c8:	7f 91       	pop	r23
    25ca:	6f 91       	pop	r22
    25cc:	5f 91       	pop	r21
    25ce:	4f 91       	pop	r20
    25d0:	3f 91       	pop	r19
    25d2:	2f 91       	pop	r18
    25d4:	0f 90       	pop	r0
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	0f 90       	pop	r0
    25da:	1f 90       	pop	r1
    25dc:	18 95       	reti

Disassembly of section .text.MTIM0And1_u16ArrGetFirstLargerPrescaler:

00002120 <MTIM0And1_u16ArrGetFirstLargerPrescaler>:
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	a0 97       	sbiw	r28, 0x20	; 32
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	7c 01       	movw	r14, r24
    213e:	84 e0       	ldi	r24, 0x04	; 4
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 1f 0b 	call	0x163e	; 0x163e <malloc>
    2146:	8c 01       	movw	r16, r24
    2148:	80 e1       	ldi	r24, 0x10	; 16
    214a:	e1 e3       	ldi	r30, 0x31	; 49
    214c:	f1 e0       	ldi	r31, 0x01	; 1
    214e:	de 01       	movw	r26, r28
    2150:	51 96       	adiw	r26, 0x11	; 17
    2152:	01 90       	ld	r0, Z+
    2154:	0d 92       	st	X+, r0
    2156:	8a 95       	dec	r24
    2158:	e1 f7       	brne	.-8      	; 0x2152 <MTIM0And1_u16ArrGetFirstLargerPrescaler+0x32>
    215a:	48 e0       	ldi	r20, 0x08	; 8
    215c:	be 01       	movw	r22, r28
    215e:	6f 5e       	subi	r22, 0xEF	; 239
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	c7 01       	movw	r24, r14
    2164:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <MATH_u16GetFirstLargerIndex>
    2168:	f8 01       	movw	r30, r16
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	20 e1       	ldi	r18, 0x10	; 16
    2170:	e1 e3       	ldi	r30, 0x31	; 49
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	de 01       	movw	r26, r28
    2176:	11 96       	adiw	r26, 0x01	; 1
    2178:	01 90       	ld	r0, Z+
    217a:	0d 92       	st	X+, r0
    217c:	2a 95       	dec	r18
    217e:	e1 f7       	brne	.-8      	; 0x2178 <MTIM0And1_u16ArrGetFirstLargerPrescaler+0x58>
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	e1 e0       	ldi	r30, 0x01	; 1
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	ec 0f       	add	r30, r28
    218a:	fd 1f       	adc	r31, r29
    218c:	e8 0f       	add	r30, r24
    218e:	f9 1f       	adc	r31, r25
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	f8 01       	movw	r30, r16
    2196:	93 83       	std	Z+3, r25	; 0x03
    2198:	82 83       	std	Z+2, r24	; 0x02
    219a:	c8 01       	movw	r24, r16
    219c:	a0 96       	adiw	r28, 0x20	; 32
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	08 95       	ret

Disassembly of section .text.MTIM2_voidInit:

00001880 <MTIM2_voidInit>:
    1880:	0f 93       	push	r16
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	60 97       	sbiw	r28, 0x10	; 16
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	80 ff       	sbrs	r24, 0
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <MTIM2_voidInit+0x26>
    189a:	e1 eb       	ldi	r30, 0xB1	; 177
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	90 81       	ld	r25, Z
    18a0:	91 60       	ori	r25, 0x01	; 1
    18a2:	90 83       	st	Z, r25
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <MTIM2_voidInit+0x30>
    18a6:	e1 eb       	ldi	r30, 0xB1	; 177
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	90 81       	ld	r25, Z
    18ac:	9e 7f       	andi	r25, 0xFE	; 254
    18ae:	90 83       	st	Z, r25
    18b0:	81 ff       	sbrs	r24, 1
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <MTIM2_voidInit+0x40>
    18b4:	e1 eb       	ldi	r30, 0xB1	; 177
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	90 81       	ld	r25, Z
    18ba:	92 60       	ori	r25, 0x02	; 2
    18bc:	90 83       	st	Z, r25
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <MTIM2_voidInit+0x4a>
    18c0:	e1 eb       	ldi	r30, 0xB1	; 177
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	90 81       	ld	r25, Z
    18c6:	9d 7f       	andi	r25, 0xFD	; 253
    18c8:	90 83       	st	Z, r25
    18ca:	82 ff       	sbrs	r24, 2
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <MTIM2_voidInit+0x5a>
    18ce:	e1 eb       	ldi	r30, 0xB1	; 177
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	90 81       	ld	r25, Z
    18d4:	94 60       	ori	r25, 0x04	; 4
    18d6:	90 83       	st	Z, r25
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <MTIM2_voidInit+0x64>
    18da:	e1 eb       	ldi	r30, 0xB1	; 177
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	90 81       	ld	r25, Z
    18e0:	9b 7f       	andi	r25, 0xFB	; 251
    18e2:	90 83       	st	Z, r25
    18e4:	90 e1       	ldi	r25, 0x10	; 16
    18e6:	e1 e4       	ldi	r30, 0x41	; 65
    18e8:	f1 e0       	ldi	r31, 0x01	; 1
    18ea:	de 01       	movw	r26, r28
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	01 90       	ld	r0, Z+
    18f0:	0d 92       	st	X+, r0
    18f2:	9a 95       	dec	r25
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <MTIM2_voidInit+0x6e>
    18f6:	e8 2f       	mov	r30, r24
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	8c 0f       	add	r24, r28
    1904:	9d 1f       	adc	r25, r29
    1906:	e8 0f       	add	r30, r24
    1908:	f9 1f       	adc	r31, r25
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <PTIM2Prescaler+0x1>
    1912:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <PTIM2Prescaler>
    1916:	60 ff       	sbrs	r22, 0
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <MTIM2_voidInit+0xa6>
    191a:	e0 eb       	ldi	r30, 0xB0	; 176
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	80 83       	st	Z, r24
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <MTIM2_voidInit+0xb0>
    1926:	e0 eb       	ldi	r30, 0xB0	; 176
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8e 7f       	andi	r24, 0xFE	; 254
    192e:	80 83       	st	Z, r24
    1930:	61 ff       	sbrs	r22, 1
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <MTIM2_voidInit+0xc0>
    1934:	e0 eb       	ldi	r30, 0xB0	; 176
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	80 83       	st	Z, r24
    193e:	05 c0       	rjmp	.+10     	; 0x194a <MTIM2_voidInit+0xca>
    1940:	e0 eb       	ldi	r30, 0xB0	; 176
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8d 7f       	andi	r24, 0xFD	; 253
    1948:	80 83       	st	Z, r24
    194a:	62 ff       	sbrs	r22, 2
    194c:	06 c0       	rjmp	.+12     	; 0x195a <MTIM2_voidInit+0xda>
    194e:	e1 eb       	ldi	r30, 0xB1	; 177
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	88 60       	ori	r24, 0x08	; 8
    1956:	80 83       	st	Z, r24
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <MTIM2_voidInit+0xe4>
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	87 7f       	andi	r24, 0xF7	; 247
    1962:	80 83       	st	Z, r24
    1964:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <PTIM0Mode>
    1968:	40 ff       	sbrs	r20, 0
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <MTIM2_voidInit+0xf8>
    196c:	e0 eb       	ldi	r30, 0xB0	; 176
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 64       	ori	r24, 0x40	; 64
    1974:	80 83       	st	Z, r24
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <MTIM2_voidInit+0x102>
    1978:	e0 eb       	ldi	r30, 0xB0	; 176
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7b       	andi	r24, 0xBF	; 191
    1980:	80 83       	st	Z, r24
    1982:	41 ff       	sbrs	r20, 1
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <MTIM2_voidInit+0x112>
    1986:	e0 eb       	ldi	r30, 0xB0	; 176
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 68       	ori	r24, 0x80	; 128
    198e:	80 83       	st	Z, r24
    1990:	05 c0       	rjmp	.+10     	; 0x199c <MTIM2_voidInit+0x11c>
    1992:	e0 eb       	ldi	r30, 0xB0	; 176
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	80 83       	st	Z, r24
    199c:	20 ff       	sbrs	r18, 0
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <MTIM2_voidInit+0x12c>
    19a0:	e0 eb       	ldi	r30, 0xB0	; 176
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	80 61       	ori	r24, 0x10	; 16
    19a8:	80 83       	st	Z, r24
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <MTIM2_voidInit+0x136>
    19ac:	e0 eb       	ldi	r30, 0xB0	; 176
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	80 83       	st	Z, r24
    19b6:	21 ff       	sbrs	r18, 1
    19b8:	06 c0       	rjmp	.+12     	; 0x19c6 <MTIM2_voidInit+0x146>
    19ba:	e0 eb       	ldi	r30, 0xB0	; 176
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 62       	ori	r24, 0x20	; 32
    19c2:	80 83       	st	Z, r24
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <MTIM2_voidInit+0x150>
    19c6:	e0 eb       	ldi	r30, 0xB0	; 176
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 7d       	andi	r24, 0xDF	; 223
    19ce:	80 83       	st	Z, r24
    19d0:	00 93 b2 00 	sts	0x00B2, r16	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    19d4:	60 96       	adiw	r28, 0x10	; 16
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

Disassembly of section .text.MTIM2_voidSetDutyCycle:

00002c2c <MTIM2_voidSetDutyCycle>:
    2c2c:	66 23       	and	r22, r22
    2c2e:	19 f0       	breq	.+6      	; 0x2c36 <MTIM2_voidSetDutyCycle+0xa>
    2c30:	61 30       	cpi	r22, 0x01	; 1
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <MTIM2_voidSetDutyCycle+0x10>
    2c34:	08 95       	ret
    2c36:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2c3a:	08 95       	ret
    2c3c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2c40:	08 95       	ret

Disassembly of section .text.__vector_9:

00002856 <__vector_9>:
    2856:	1f 92       	push	r1
    2858:	0f 92       	push	r0
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	0f 92       	push	r0
    285e:	11 24       	eor	r1, r1
    2860:	2f 93       	push	r18
    2862:	3f 93       	push	r19
    2864:	4f 93       	push	r20
    2866:	5f 93       	push	r21
    2868:	6f 93       	push	r22
    286a:	7f 93       	push	r23
    286c:	8f 93       	push	r24
    286e:	9f 93       	push	r25
    2870:	af 93       	push	r26
    2872:	bf 93       	push	r27
    2874:	ef 93       	push	r30
    2876:	ff 93       	push	r31
    2878:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <PTIM2_callback_OVF>
    287c:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <PTIM2_callback_OVF+0x1>
    2880:	09 95       	icall
    2882:	ff 91       	pop	r31
    2884:	ef 91       	pop	r30
    2886:	bf 91       	pop	r27
    2888:	af 91       	pop	r26
    288a:	9f 91       	pop	r25
    288c:	8f 91       	pop	r24
    288e:	7f 91       	pop	r23
    2890:	6f 91       	pop	r22
    2892:	5f 91       	pop	r21
    2894:	4f 91       	pop	r20
    2896:	3f 91       	pop	r19
    2898:	2f 91       	pop	r18
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	0f 90       	pop	r0
    28a0:	1f 90       	pop	r1
    28a2:	18 95       	reti

Disassembly of section .text.__vector_7:

000028a4 <__vector_7>:
    28a4:	1f 92       	push	r1
    28a6:	0f 92       	push	r0
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	0f 92       	push	r0
    28ac:	11 24       	eor	r1, r1
    28ae:	2f 93       	push	r18
    28b0:	3f 93       	push	r19
    28b2:	4f 93       	push	r20
    28b4:	5f 93       	push	r21
    28b6:	6f 93       	push	r22
    28b8:	7f 93       	push	r23
    28ba:	8f 93       	push	r24
    28bc:	9f 93       	push	r25
    28be:	af 93       	push	r26
    28c0:	bf 93       	push	r27
    28c2:	ef 93       	push	r30
    28c4:	ff 93       	push	r31
    28c6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <PTIM2_callback_COMPA>
    28ca:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <PTIM2_callback_COMPA+0x1>
    28ce:	09 95       	icall
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti

Disassembly of section .text.__vector_8:

000028f2 <__vector_8>:
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	3f 93       	push	r19
    2900:	4f 93       	push	r20
    2902:	5f 93       	push	r21
    2904:	6f 93       	push	r22
    2906:	7f 93       	push	r23
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	ef 93       	push	r30
    2912:	ff 93       	push	r31
    2914:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <PTIM2_callback_COMPB>
    2918:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <PTIM2_callback_COMPB+0x1>
    291c:	09 95       	icall
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

Disassembly of section .text.MTIM2_u16ArrGetFirstLargerPrescaler:

000021b6 <MTIM2_u16ArrGetFirstLargerPrescaler>:
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	a0 97       	sbiw	r28, 0x20	; 32
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	7c 01       	movw	r14, r24
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 1f 0b 	call	0x163e	; 0x163e <malloc>
    21dc:	8c 01       	movw	r16, r24
    21de:	80 e1       	ldi	r24, 0x10	; 16
    21e0:	e1 e4       	ldi	r30, 0x41	; 65
    21e2:	f1 e0       	ldi	r31, 0x01	; 1
    21e4:	de 01       	movw	r26, r28
    21e6:	51 96       	adiw	r26, 0x11	; 17
    21e8:	01 90       	ld	r0, Z+
    21ea:	0d 92       	st	X+, r0
    21ec:	8a 95       	dec	r24
    21ee:	e1 f7       	brne	.-8      	; 0x21e8 <MTIM2_u16ArrGetFirstLargerPrescaler+0x32>
    21f0:	48 e0       	ldi	r20, 0x08	; 8
    21f2:	be 01       	movw	r22, r28
    21f4:	6f 5e       	subi	r22, 0xEF	; 239
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	c7 01       	movw	r24, r14
    21fa:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <MATH_u16GetFirstLargerIndex>
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	20 e1       	ldi	r18, 0x10	; 16
    2206:	e1 e4       	ldi	r30, 0x41	; 65
    2208:	f1 e0       	ldi	r31, 0x01	; 1
    220a:	de 01       	movw	r26, r28
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	01 90       	ld	r0, Z+
    2210:	0d 92       	st	X+, r0
    2212:	2a 95       	dec	r18
    2214:	e1 f7       	brne	.-8      	; 0x220e <MTIM2_u16ArrGetFirstLargerPrescaler+0x58>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	e1 e0       	ldi	r30, 0x01	; 1
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	ec 0f       	add	r30, r28
    2220:	fd 1f       	adc	r31, r29
    2222:	e8 0f       	add	r30, r24
    2224:	f9 1f       	adc	r31, r25
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	f8 01       	movw	r30, r16
    222c:	93 83       	std	Z+3, r25	; 0x03
    222e:	82 83       	std	Z+2, r24	; 0x02
    2230:	c8 01       	movw	r24, r16
    2232:	a0 96       	adiw	r28, 0x20	; 32
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	08 95       	ret

Disassembly of section .text.MCLOCK_voidDelayMS:

00002b18 <MCLOCK_voidDelayMS>:
#include "CLOCK_interface.h"
#include "CLOCK_config.h"



void MCLOCK_voidDelayMS(u32 ms){
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
	register u32 Ticks = (CLOCK_SYSTEM_FREQUENCY/10000)*ms ; // Register variables tell the compiler to store the variable in CPU register instead of memory
    2b20:	a0 e2       	ldi	r26, 0x20	; 32
    2b22:	b3 e0       	ldi	r27, 0x03	; 3
    2b24:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__muluhisi3>
	// 10000 is an exp. number, do better !
	while(Ticks--)
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <MCLOCK_voidDelayMS+0x18>
		__asm__ volatile("NOP"); // assembly instruction that does nothing.
    2b2a:	00 00       	nop


void MCLOCK_voidDelayMS(u32 ms){
	register u32 Ticks = (CLOCK_SYSTEM_FREQUENCY/10000)*ms ; // Register variables tell the compiler to store the variable in CPU register instead of memory
	// 10000 is an exp. number, do better !
	while(Ticks--)
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	b8 01       	movw	r22, r16
    2b30:	8b 01       	movw	r16, r22
    2b32:	9c 01       	movw	r18, r24
    2b34:	01 50       	subi	r16, 0x01	; 1
    2b36:	11 09       	sbc	r17, r1
    2b38:	21 09       	sbc	r18, r1
    2b3a:	31 09       	sbc	r19, r1
    2b3c:	67 2b       	or	r22, r23
    2b3e:	68 2b       	or	r22, r24
    2b40:	69 2b       	or	r22, r25
    2b42:	99 f7       	brne	.-26     	; 0x2b2a <MCLOCK_voidDelayMS+0x12>
		__asm__ volatile("NOP"); // assembly instruction that does nothing.
}
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

Disassembly of section .text.MCLOCK_u32GetSystemClock:

00002d04 <MCLOCK_u32GetSystemClock>:

u32 MCLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
}
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	72 e1       	ldi	r23, 0x12	; 18
    2d08:	8a e7       	ldi	r24, 0x7A	; 122
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	08 95       	ret

Disassembly of section .text.MATH_u16GetFirstLargerIndex:

00002a9e <MATH_u16GetFirstLargerIndex>:
	}
	return firstSmallerIndex ;
}

u16 MATH_u16GetFirstLargerIndex (u16 x, u16* arr, u8 arrLen)
{
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	dc 01       	movw	r26, r24
	// takes a value x, an array of values, and returns the index of the first value larger than x in that array.
	
	u16 firstLarger = 65535 ;
	u8 firstLargerIndex = 0 ;
	for (u8 i=0; i<arrLen; i++)
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
u16 MATH_u16GetFirstLargerIndex (u16 x, u16* arr, u8 arrLen)
{
	// takes a value x, an array of values, and returns the index of the first value larger than x in that array.
	
	u16 firstLarger = 65535 ;
	u8 firstLargerIndex = 0 ;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0

u16 MATH_u16GetFirstLargerIndex (u16 x, u16* arr, u8 arrLen)
{
	// takes a value x, an array of values, and returns the index of the first value larger than x in that array.
	
	u16 firstLarger = 65535 ;
    2aa8:	cf ef       	ldi	r28, 0xFF	; 255
    2aaa:	df ef       	ldi	r29, 0xFF	; 255
	u8 firstLargerIndex = 0 ;
	for (u8 i=0; i<arrLen; i++)
    2aac:	11 c0       	rjmp	.+34     	; 0x2ad0 <MATH_u16GetFirstLargerIndex+0x32>
	{
		if (arr[i] > x  &&  arr[i] < firstLarger)
    2aae:	e9 2f       	mov	r30, r25
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	e6 0f       	add	r30, r22
    2ab8:	f7 1f       	adc	r31, r23
    2aba:	20 81       	ld	r18, Z
    2abc:	31 81       	ldd	r19, Z+1	; 0x01
    2abe:	a2 17       	cp	r26, r18
    2ac0:	b3 07       	cpc	r27, r19
    2ac2:	28 f4       	brcc	.+10     	; 0x2ace <MATH_u16GetFirstLargerIndex+0x30>
    2ac4:	2c 17       	cp	r18, r28
    2ac6:	3d 07       	cpc	r19, r29
    2ac8:	10 f4       	brcc	.+4      	; 0x2ace <MATH_u16GetFirstLargerIndex+0x30>
		{
			firstLarger = arr[i] ;
			firstLargerIndex = i ;
    2aca:	89 2f       	mov	r24, r25
	u8 firstLargerIndex = 0 ;
	for (u8 i=0; i<arrLen; i++)
	{
		if (arr[i] > x  &&  arr[i] < firstLarger)
		{
			firstLarger = arr[i] ;
    2acc:	e9 01       	movw	r28, r18
{
	// takes a value x, an array of values, and returns the index of the first value larger than x in that array.
	
	u16 firstLarger = 65535 ;
	u8 firstLargerIndex = 0 ;
	for (u8 i=0; i<arrLen; i++)
    2ace:	9f 5f       	subi	r25, 0xFF	; 255
    2ad0:	94 17       	cp	r25, r20
    2ad2:	68 f3       	brcs	.-38     	; 0x2aae <MATH_u16GetFirstLargerIndex+0x10>
			firstLarger = arr[i] ;
			firstLargerIndex = i ;
		}
	}
	return firstLargerIndex ;
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

Disassembly of section .text.init_PID:

00001afe <init_PID>:
#include "CLOCK_interface.h"
#include "TIMER_interface.h"
#include "PID.h"

void init_PID (PID_controller* pid, f32 kp, f32 ki, f32 kd, f32 lim_min , f32 lim_max, f32 T, f32 to)
{
    1afe:	2f 92       	push	r2
    1b00:	3f 92       	push	r3
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	1c 01       	movw	r2, r24
    1b28:	49 8c       	ldd	r4, Y+25	; 0x19
    1b2a:	5a 8c       	ldd	r5, Y+26	; 0x1a
    1b2c:	6b 8c       	ldd	r6, Y+27	; 0x1b
    1b2e:	7c 8c       	ldd	r7, Y+28	; 0x1c
	pid->T = T;
    1b30:	fc 01       	movw	r30, r24
    1b32:	44 86       	std	Z+12, r4	; 0x0c
    1b34:	55 86       	std	Z+13, r5	; 0x0d
    1b36:	66 86       	std	Z+14, r6	; 0x0e
    1b38:	77 86       	std	Z+15, r7	; 0x0f
	pid->to = to;
    1b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b3e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1b40:	b8 a1       	ldd	r27, Y+32	; 0x20
    1b42:	80 8b       	std	Z+16, r24	; 0x10
    1b44:	91 8b       	std	Z+17, r25	; 0x11
    1b46:	a2 8b       	std	Z+18, r26	; 0x12
    1b48:	b3 8b       	std	Z+19, r27	; 0x13
	pid->Kd = kd;
    1b4a:	c0 86       	std	Z+8, r12	; 0x08
    1b4c:	d1 86       	std	Z+9, r13	; 0x09
    1b4e:	e2 86       	std	Z+10, r14	; 0x0a
    1b50:	f3 86       	std	Z+11, r15	; 0x0b
	pid->Ki = ki;
    1b52:	04 83       	std	Z+4, r16	; 0x04
    1b54:	15 83       	std	Z+5, r17	; 0x05
    1b56:	26 83       	std	Z+6, r18	; 0x06
    1b58:	37 83       	std	Z+7, r19	; 0x07
	pid->Kp = kp;
    1b5a:	40 83       	st	Z, r20
    1b5c:	51 83       	std	Z+1, r21	; 0x01
    1b5e:	62 83       	std	Z+2, r22	; 0x02
    1b60:	73 83       	std	Z+3, r23	; 0x03
	pid->differentiator = 0;
    1b62:	10 a6       	std	Z+40, r1	; 0x28
    1b64:	11 a6       	std	Z+41, r1	; 0x29
    1b66:	12 a6       	std	Z+42, r1	; 0x2a
    1b68:	13 a6       	std	Z+43, r1	; 0x2b
	pid->integrator = 0;
    1b6a:	14 a2       	std	Z+36, r1	; 0x24
    1b6c:	15 a2       	std	Z+37, r1	; 0x25
    1b6e:	16 a2       	std	Z+38, r1	; 0x26
    1b70:	17 a2       	std	Z+39, r1	; 0x27
	pid->pre_Error = 0;
    1b72:	14 a6       	std	Z+44, r1	; 0x2c
    1b74:	15 a6       	std	Z+45, r1	; 0x2d
    1b76:	16 a6       	std	Z+46, r1	; 0x2e
    1b78:	17 a6       	std	Z+47, r1	; 0x2f
	pid->pre_sensor_read = 0;
    1b7a:	10 aa       	std	Z+48, r1	; 0x30
    1b7c:	11 aa       	std	Z+49, r1	; 0x31
    1b7e:	12 aa       	std	Z+50, r1	; 0x32
    1b80:	13 aa       	std	Z+51, r1	; 0x33
	pid->lim_max = lim_max;
    1b82:	8d 89       	ldd	r24, Y+21	; 0x15
    1b84:	9e 89       	ldd	r25, Y+22	; 0x16
    1b86:	af 89       	ldd	r26, Y+23	; 0x17
    1b88:	b8 8d       	ldd	r27, Y+24	; 0x18
    1b8a:	80 a3       	std	Z+32, r24	; 0x20
    1b8c:	91 a3       	std	Z+33, r25	; 0x21
    1b8e:	a2 a3       	std	Z+34, r26	; 0x22
    1b90:	b3 a3       	std	Z+35, r27	; 0x23
	pid->lim_min = lim_min;
    1b92:	84 8e       	std	Z+28, r8	; 0x1c
    1b94:	95 8e       	std	Z+29, r9	; 0x1d
    1b96:	a6 8e       	std	Z+30, r10	; 0x1e
    1b98:	b7 8e       	std	Z+31, r11	; 0x1f
	pid->lastTimeStamp = 0 ;
    1b9a:	14 8a       	std	Z+20, r1	; 0x14
    1b9c:	15 8a       	std	Z+21, r1	; 0x15
    1b9e:	16 8a       	std	Z+22, r1	; 0x16
    1ba0:	17 8a       	std	Z+23, r1	; 0x17
	
	MTIM1_voidStartTickMeasure() ;
    1ba2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <MTIM1_voidStartTickMeasure>
	pid->ticksInterval = T * (f32)MCLOCK_u32GetSystemClock() / MTIM1TOV1TCNT1 ;
    1ba6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <MCLOCK_u32GetSystemClock>
    1baa:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c3 01       	movw	r24, r6
    1bb4:	b2 01       	movw	r22, r4
    1bb6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
    1bc2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
    1bc6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    1bca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    1bce:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__floatunsisf>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	b6 01       	movw	r22, r12
    1bda:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
    1bde:	0e 94 0f 12 	call	0x241e	; 0x241e <__fixunssfsi>
    1be2:	f1 01       	movw	r30, r2
    1be4:	60 8f       	std	Z+24, r22	; 0x18
    1be6:	71 8f       	std	Z+25, r23	; 0x19
    1be8:	82 8f       	std	Z+26, r24	; 0x1a
    1bea:	93 8f       	std	Z+27, r25	; 0x1b
}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	3f 90       	pop	r3
    1c0e:	2f 90       	pop	r2
    1c10:	08 95       	ret

Disassembly of section .text.PID_update:

00000cee <PID_update>:

f32 PID_update(PID_controller* pid, f32 setpoint , f32 sensor_read)
{
     cee:	2f 92       	push	r2
     cf0:	3f 92       	push	r3
     cf2:	4f 92       	push	r4
     cf4:	5f 92       	push	r5
     cf6:	6f 92       	push	r6
     cf8:	7f 92       	push	r7
     cfa:	8f 92       	push	r8
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	6a 97       	sbiw	r28, 0x1a	; 26
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	9a 8f       	std	Y+26, r25	; 0x1a
     d24:	89 8f       	std	Y+25, r24	; 0x19
     d26:	cb 01       	movw	r24, r22
     d28:	ba 01       	movw	r22, r20
     d2a:	68 01       	movw	r12, r16
     d2c:	79 01       	movw	r14, r18
	f32 Error = setpoint - sensor_read ; 
     d2e:	a9 01       	movw	r20, r18
     d30:	98 01       	movw	r18, r16
     d32:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
	
	f32 proportional = Error*pid->Kp;
     d3a:	a9 8d       	ldd	r26, Y+25	; 0x19
     d3c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d3e:	2d 91       	ld	r18, X+
     d40:	3d 91       	ld	r19, X+
     d42:	4d 91       	ld	r20, X+
     d44:	5c 91       	ld	r21, X
     d46:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     d4a:	6b 87       	std	Y+11, r22	; 0x0b
     d4c:	7c 87       	std	Y+12, r23	; 0x0c
     d4e:	8d 87       	std	Y+13, r24	; 0x0d
     d50:	9e 87       	std	Y+14, r25	; 0x0e
	f32 max_I,min_I;
	if (proportional > pid->lim_max )
     d52:	e9 8d       	ldd	r30, Y+25	; 0x19
     d54:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d56:	00 a1       	ldd	r16, Z+32	; 0x20
     d58:	11 a1       	ldd	r17, Z+33	; 0x21
     d5a:	f2 a1       	ldd	r31, Z+34	; 0x22
     d5c:	f9 87       	std	Y+9, r31	; 0x09
     d5e:	a9 8d       	ldd	r26, Y+25	; 0x19
     d60:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d62:	93 96       	adiw	r26, 0x23	; 35
     d64:	bc 91       	ld	r27, X
     d66:	ba 87       	std	Y+10, r27	; 0x0a
     d68:	20 2f       	mov	r18, r16
     d6a:	31 2f       	mov	r19, r17
     d6c:	4f 2f       	mov	r20, r31
     d6e:	5b 2f       	mov	r21, r27
     d70:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__gesf2>
     d74:	18 16       	cp	r1, r24
     d76:	7c f4       	brge	.+30     	; 0xd96 <PID_update+0xa8>
		max_I =  pid->lim_max - proportional;
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	4d 85       	ldd	r20, Y+13	; 0x0d
     d7e:	5e 85       	ldd	r21, Y+14	; 0x0e
     d80:	60 2f       	mov	r22, r16
     d82:	71 2f       	mov	r23, r17
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     d8c:	69 83       	std	Y+1, r22	; 0x01
     d8e:	7a 83       	std	Y+2, r23	; 0x02
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <PID_update+0xb0>
	else
		max_I = 0;
     d96:	19 82       	std	Y+1, r1	; 0x01
     d98:	1a 82       	std	Y+2, r1	; 0x02
     d9a:	1b 82       	std	Y+3, r1	; 0x03
     d9c:	1c 82       	std	Y+4, r1	; 0x04
	if (proportional < pid->lim_min)
     d9e:	e9 8d       	ldd	r30, Y+25	; 0x19
     da0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     da2:	f4 8d       	ldd	r31, Z+28	; 0x1c
     da4:	fb 8b       	std	Y+19, r31	; 0x13
     da6:	a9 8d       	ldd	r26, Y+25	; 0x19
     da8:	ba 8d       	ldd	r27, Y+26	; 0x1a
     daa:	5d 96       	adiw	r26, 0x1d	; 29
     dac:	bc 91       	ld	r27, X
     dae:	bc 8b       	std	Y+20, r27	; 0x14
     db0:	e9 8d       	ldd	r30, Y+25	; 0x19
     db2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     db4:	26 8c       	ldd	r2, Z+30	; 0x1e
     db6:	37 8c       	ldd	r3, Z+31	; 0x1f
     db8:	2b 89       	ldd	r18, Y+19	; 0x13
     dba:	3b 2f       	mov	r19, r27
     dbc:	42 2d       	mov	r20, r2
     dbe:	53 2d       	mov	r21, r3
     dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__cmpsf2>
     dcc:	88 23       	and	r24, r24
     dce:	7c f4       	brge	.+30     	; 0xdee <PID_update+0x100>
		min_I= pid->lim_min - proportional;
     dd0:	2b 85       	ldd	r18, Y+11	; 0x0b
     dd2:	3c 85       	ldd	r19, Y+12	; 0x0c
     dd4:	4d 85       	ldd	r20, Y+13	; 0x0d
     dd6:	5e 85       	ldd	r21, Y+14	; 0x0e
     dd8:	6b 89       	ldd	r22, Y+19	; 0x13
     dda:	7c 89       	ldd	r23, Y+20	; 0x14
     ddc:	82 2d       	mov	r24, r2
     dde:	93 2d       	mov	r25, r3
     de0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     de4:	6f 87       	std	Y+15, r22	; 0x0f
     de6:	78 8b       	std	Y+16, r23	; 0x10
     de8:	89 8b       	std	Y+17, r24	; 0x11
     dea:	9a 8b       	std	Y+18, r25	; 0x12
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <PID_update+0x108>
	else
		min_I = 0;
     dee:	1f 86       	std	Y+15, r1	; 0x0f
     df0:	18 8a       	std	Y+16, r1	; 0x10
     df2:	19 8a       	std	Y+17, r1	; 0x11
     df4:	1a 8a       	std	Y+18, r1	; 0x12
	
	if (pid->integrator > max_I)
     df6:	a9 8d       	ldd	r26, Y+25	; 0x19
     df8:	ba 8d       	ldd	r27, Y+26	; 0x1a
     dfa:	94 96       	adiw	r26, 0x24	; 36
     dfc:	4d 90       	ld	r4, X+
     dfe:	5d 90       	ld	r5, X+
     e00:	6d 90       	ld	r6, X+
     e02:	7c 90       	ld	r7, X
     e04:	97 97       	sbiw	r26, 0x27	; 39
     e06:	a3 01       	movw	r20, r6
     e08:	92 01       	movw	r18, r4
     e0a:	69 81       	ldd	r22, Y+1	; 0x01
     e0c:	7a 81       	ldd	r23, Y+2	; 0x02
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__cmpsf2>
     e16:	88 23       	and	r24, r24
     e18:	5c f4       	brge	.+22     	; 0xe30 <PID_update+0x142>
		pid->integrator = max_I;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	ab 81       	ldd	r26, Y+3	; 0x03
     e20:	bc 81       	ldd	r27, Y+4	; 0x04
     e22:	e9 8d       	ldd	r30, Y+25	; 0x19
     e24:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e26:	84 a3       	std	Z+36, r24	; 0x24
     e28:	95 a3       	std	Z+37, r25	; 0x25
     e2a:	a6 a3       	std	Z+38, r26	; 0x26
     e2c:	b7 a3       	std	Z+39, r27	; 0x27
     e2e:	4f c0       	rjmp	.+158    	; 0xece <PID_update+0x1e0>
	else if (pid->integrator < min_I)
     e30:	a3 01       	movw	r20, r6
     e32:	92 01       	movw	r18, r4
     e34:	6f 85       	ldd	r22, Y+15	; 0x0f
     e36:	78 89       	ldd	r23, Y+16	; 0x10
     e38:	89 89       	ldd	r24, Y+17	; 0x11
     e3a:	9a 89       	ldd	r25, Y+18	; 0x12
     e3c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__gesf2>
     e40:	18 16       	cp	r1, r24
     e42:	5c f4       	brge	.+22     	; 0xe5a <PID_update+0x16c>
		pid->integrator = min_I;
     e44:	8f 85       	ldd	r24, Y+15	; 0x0f
     e46:	98 89       	ldd	r25, Y+16	; 0x10
     e48:	a9 89       	ldd	r26, Y+17	; 0x11
     e4a:	ba 89       	ldd	r27, Y+18	; 0x12
     e4c:	e9 8d       	ldd	r30, Y+25	; 0x19
     e4e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e50:	84 a3       	std	Z+36, r24	; 0x24
     e52:	95 a3       	std	Z+37, r25	; 0x25
     e54:	a6 a3       	std	Z+38, r26	; 0x26
     e56:	b7 a3       	std	Z+39, r27	; 0x27
     e58:	3a c0       	rjmp	.+116    	; 0xece <PID_update+0x1e0>
	else
		pid->integrator +=  pid->Ki * 0.5 * pid->T * (Error+pid->pre_Error) ;
     e5a:	a9 8d       	ldd	r26, Y+25	; 0x19
     e5c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     e5e:	14 96       	adiw	r26, 0x04	; 4
     e60:	6d 91       	ld	r22, X+
     e62:	7d 91       	ld	r23, X+
     e64:	8d 91       	ld	r24, X+
     e66:	9c 91       	ld	r25, X
     e68:	17 97       	sbiw	r26, 0x07	; 7
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     e76:	e9 8d       	ldd	r30, Y+25	; 0x19
     e78:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e7a:	24 85       	ldd	r18, Z+12	; 0x0c
     e7c:	35 85       	ldd	r19, Z+13	; 0x0d
     e7e:	46 85       	ldd	r20, Z+14	; 0x0e
     e80:	57 85       	ldd	r21, Z+15	; 0x0f
     e82:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     e86:	69 83       	std	Y+1, r22	; 0x01
     e88:	7a 83       	std	Y+2, r23	; 0x02
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	a9 8d       	ldd	r26, Y+25	; 0x19
     e90:	ba 8d       	ldd	r27, Y+26	; 0x1a
     e92:	9c 96       	adiw	r26, 0x2c	; 44
     e94:	2d 91       	ld	r18, X+
     e96:	3d 91       	ld	r19, X+
     e98:	4d 91       	ld	r20, X+
     e9a:	5c 91       	ld	r21, X
     e9c:	9f 97       	sbiw	r26, 0x2f	; 47
     e9e:	c5 01       	movw	r24, r10
     ea0:	b4 01       	movw	r22, r8
     ea2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	69 81       	ldd	r22, Y+1	; 0x01
     eac:	7a 81       	ldd	r23, Y+2	; 0x02
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c3 01       	movw	r24, r6
     ebc:	b2 01       	movw	r22, r4
     ebe:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     ec2:	e9 8d       	ldd	r30, Y+25	; 0x19
     ec4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ec6:	64 a3       	std	Z+36, r22	; 0x24
     ec8:	75 a3       	std	Z+37, r23	; 0x25
     eca:	86 a3       	std	Z+38, r24	; 0x26
     ecc:	97 a3       	std	Z+39, r25	; 0x27
	
	pid->differentiator = pid->Kd*2 / (pid->T +2*pid->to) * (sensor_read - pid->pre_sensor_read) + pid->differentiator * ((2*pid->to - pid->T) /(2*pid->to + pid->T)) ;
     ece:	a9 8d       	ldd	r26, Y+25	; 0x19
     ed0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     ed2:	18 96       	adiw	r26, 0x08	; 8
     ed4:	6d 91       	ld	r22, X+
     ed6:	7d 91       	ld	r23, X+
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	1b 97       	sbiw	r26, 0x0b	; 11
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     ee6:	6d 83       	std	Y+5, r22	; 0x05
     ee8:	7e 83       	std	Y+6, r23	; 0x06
     eea:	8f 83       	std	Y+7, r24	; 0x07
     eec:	98 87       	std	Y+8, r25	; 0x08
     eee:	e9 8d       	ldd	r30, Y+25	; 0x19
     ef0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ef2:	44 84       	ldd	r4, Z+12	; 0x0c
     ef4:	55 84       	ldd	r5, Z+13	; 0x0d
     ef6:	66 84       	ldd	r6, Z+14	; 0x0e
     ef8:	77 84       	ldd	r7, Z+15	; 0x0f
     efa:	60 89       	ldd	r22, Z+16	; 0x10
     efc:	71 89       	ldd	r23, Z+17	; 0x11
     efe:	82 89       	ldd	r24, Z+18	; 0x12
     f00:	93 89       	ldd	r25, Z+19	; 0x13
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     f0a:	69 83       	std	Y+1, r22	; 0x01
     f0c:	7a 83       	std	Y+2, r23	; 0x02
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     f1e:	6f 87       	std	Y+15, r22	; 0x0f
     f20:	78 8b       	std	Y+16, r23	; 0x10
     f22:	89 8b       	std	Y+17, r24	; 0x11
     f24:	9a 8b       	std	Y+18, r25	; 0x12
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	6d 81       	ldd	r22, Y+5	; 0x05
     f2c:	7e 81       	ldd	r23, Y+6	; 0x06
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	98 85       	ldd	r25, Y+8	; 0x08
     f32:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
     f36:	6d 83       	std	Y+5, r22	; 0x05
     f38:	7e 83       	std	Y+6, r23	; 0x06
     f3a:	8f 83       	std	Y+7, r24	; 0x07
     f3c:	98 87       	std	Y+8, r25	; 0x08
     f3e:	a9 8d       	ldd	r26, Y+25	; 0x19
     f40:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f42:	d0 96       	adiw	r26, 0x30	; 48
     f44:	2d 91       	ld	r18, X+
     f46:	3d 91       	ld	r19, X+
     f48:	4d 91       	ld	r20, X+
     f4a:	5c 91       	ld	r21, X
     f4c:	d3 97       	sbiw	r26, 0x33	; 51
     f4e:	c7 01       	movw	r24, r14
     f50:	b6 01       	movw	r22, r12
     f52:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	6d 81       	ldd	r22, Y+5	; 0x05
     f5c:	7e 81       	ldd	r23, Y+6	; 0x06
     f5e:	8f 81       	ldd	r24, Y+7	; 0x07
     f60:	98 85       	ldd	r25, Y+8	; 0x08
     f62:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     f66:	6d 8b       	std	Y+21, r22	; 0x15
     f68:	7e 8b       	std	Y+22, r23	; 0x16
     f6a:	8f 8b       	std	Y+23, r24	; 0x17
     f6c:	98 8f       	std	Y+24, r25	; 0x18
     f6e:	a9 8d       	ldd	r26, Y+25	; 0x19
     f70:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f72:	98 96       	adiw	r26, 0x28	; 40
     f74:	8d 91       	ld	r24, X+
     f76:	9d 91       	ld	r25, X+
     f78:	0d 90       	ld	r0, X+
     f7a:	bc 91       	ld	r27, X
     f7c:	a0 2d       	mov	r26, r0
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	af 83       	std	Y+7, r26	; 0x07
     f84:	b8 87       	std	Y+8, r27	; 0x08
     f86:	a3 01       	movw	r20, r6
     f88:	92 01       	movw	r18, r4
     f8a:	69 81       	ldd	r22, Y+1	; 0x01
     f8c:	7a 81       	ldd	r23, Y+2	; 0x02
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     f96:	2f 85       	ldd	r18, Y+15	; 0x0f
     f98:	38 89       	ldd	r19, Y+16	; 0x10
     f9a:	49 89       	ldd	r20, Y+17	; 0x11
     f9c:	5a 89       	ldd	r21, Y+18	; 0x12
     f9e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__divsf3>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	6d 81       	ldd	r22, Y+5	; 0x05
     fa8:	7e 81       	ldd	r23, Y+6	; 0x06
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__mulsf3>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	6d 89       	ldd	r22, Y+21	; 0x15
     fb8:	7e 89       	ldd	r23, Y+22	; 0x16
     fba:	8f 89       	ldd	r24, Y+23	; 0x17
     fbc:	98 8d       	ldd	r25, Y+24	; 0x18
     fbe:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	e9 8d       	ldd	r30, Y+25	; 0x19
     fc8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     fca:	60 a7       	std	Z+40, r22	; 0x28
     fcc:	71 a7       	std	Z+41, r23	; 0x29
     fce:	82 a7       	std	Z+42, r24	; 0x2a
     fd0:	93 a7       	std	Z+43, r25	; 0x2b
	
	f32 out = proportional + pid->differentiator +  pid->integrator;
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     fde:	a9 8d       	ldd	r26, Y+25	; 0x19
     fe0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     fe2:	94 96       	adiw	r26, 0x24	; 36
     fe4:	2d 91       	ld	r18, X+
     fe6:	3d 91       	ld	r19, X+
     fe8:	4d 91       	ld	r20, X+
     fea:	5c 91       	ld	r21, X
     fec:	97 97       	sbiw	r26, 0x27	; 39
     fee:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
     ff2:	46 2e       	mov	r4, r22
     ff4:	57 2e       	mov	r5, r23
     ff6:	68 2e       	mov	r6, r24
     ff8:	79 2e       	mov	r7, r25
	if (pid->lim_max < out)
     ffa:	26 2f       	mov	r18, r22
     ffc:	37 2f       	mov	r19, r23
     ffe:	48 2f       	mov	r20, r24
    1000:	59 2f       	mov	r21, r25
    1002:	60 2f       	mov	r22, r16
    1004:	71 2f       	mov	r23, r17
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__cmpsf2>
    100e:	88 23       	and	r24, r24
    1010:	ac f0       	brlt	.+42     	; 0x103c <PID_update+0x34e>
		out = pid->lim_max;
	else if (pid->lim_min > out)
    1012:	24 2d       	mov	r18, r4
    1014:	35 2d       	mov	r19, r5
    1016:	46 2d       	mov	r20, r6
    1018:	57 2d       	mov	r21, r7
    101a:	6b 89       	ldd	r22, Y+19	; 0x13
    101c:	7c 89       	ldd	r23, Y+20	; 0x14
    101e:	82 2d       	mov	r24, r2
    1020:	93 2d       	mov	r25, r3
    1022:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__gesf2>
    1026:	18 16       	cp	r1, r24
    1028:	2c f0       	brlt	.+10     	; 0x1034 <PID_update+0x346>
	else
		pid->integrator +=  pid->Ki * 0.5 * pid->T * (Error+pid->pre_Error) ;
	
	pid->differentiator = pid->Kd*2 / (pid->T +2*pid->to) * (sensor_read - pid->pre_sensor_read) + pid->differentiator * ((2*pid->to - pid->T) /(2*pid->to + pid->T)) ;
	
	f32 out = proportional + pid->differentiator +  pid->integrator;
    102a:	04 2d       	mov	r16, r4
    102c:	15 2d       	mov	r17, r5
    102e:	69 86       	std	Y+9, r6	; 0x09
    1030:	7a 86       	std	Y+10, r7	; 0x0a
    1032:	04 c0       	rjmp	.+8      	; 0x103c <PID_update+0x34e>
	if (pid->lim_max < out)
		out = pid->lim_max;
	else if (pid->lim_min > out)
		out = pid->lim_min;
    1034:	0b 89       	ldd	r16, Y+19	; 0x13
    1036:	1c 89       	ldd	r17, Y+20	; 0x14
    1038:	29 86       	std	Y+9, r2	; 0x09
    103a:	3a 86       	std	Y+10, r3	; 0x0a
	
	pid->pre_Error = Error;
    103c:	e9 8d       	ldd	r30, Y+25	; 0x19
    103e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1040:	84 a6       	std	Z+44, r8	; 0x2c
    1042:	95 a6       	std	Z+45, r9	; 0x2d
    1044:	a6 a6       	std	Z+46, r10	; 0x2e
    1046:	b7 a6       	std	Z+47, r11	; 0x2f
	pid->pre_sensor_read = sensor_read;
    1048:	c0 aa       	std	Z+48, r12	; 0x30
    104a:	d1 aa       	std	Z+49, r13	; 0x31
    104c:	e2 aa       	std	Z+50, r14	; 0x32
    104e:	f3 aa       	std	Z+51, r15	; 0x33
	return out;

}
    1050:	60 2f       	mov	r22, r16
    1052:	71 2f       	mov	r23, r17
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	6a 96       	adiw	r28, 0x1a	; 26
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	5f 90       	pop	r5
    1082:	4f 90       	pop	r4
    1084:	3f 90       	pop	r3
    1086:	2f 90       	pop	r2
    1088:	08 95       	ret

Disassembly of section .text.isPID_time:

0000247c <isPID_time>:

u8 isPID_time(PID_controller* pid)
{
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	ec 01       	movw	r28, r24
	u32 current_ticks = MTIM1_u32GetElapsedTicks() ;
    248e:	0e 94 99 12 	call	0x2532	; 0x2532 <MTIM1_u32GetElapsedTicks>
	if(current_ticks - pid->lastTimeStamp >= pid->ticksInterval)
    2492:	0c 89       	ldd	r16, Y+20	; 0x14
    2494:	1d 89       	ldd	r17, Y+21	; 0x15
    2496:	2e 89       	ldd	r18, Y+22	; 0x16
    2498:	3f 89       	ldd	r19, Y+23	; 0x17
    249a:	6b 01       	movw	r12, r22
    249c:	7c 01       	movw	r14, r24
    249e:	c0 1a       	sub	r12, r16
    24a0:	d1 0a       	sbc	r13, r17
    24a2:	e2 0a       	sbc	r14, r18
    24a4:	f3 0a       	sbc	r15, r19
    24a6:	08 8d       	ldd	r16, Y+24	; 0x18
    24a8:	19 8d       	ldd	r17, Y+25	; 0x19
    24aa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    24ac:	3b 8d       	ldd	r19, Y+27	; 0x1b
    24ae:	c0 16       	cp	r12, r16
    24b0:	d1 06       	cpc	r13, r17
    24b2:	e2 06       	cpc	r14, r18
    24b4:	f3 06       	cpc	r15, r19
    24b6:	30 f0       	brcs	.+12     	; 0x24c4 <isPID_time+0x48>
	{
		pid->lastTimeStamp = current_ticks ;
    24b8:	6c 8b       	std	Y+20, r22	; 0x14
    24ba:	7d 8b       	std	Y+21, r23	; 0x15
    24bc:	8e 8b       	std	Y+22, r24	; 0x16
    24be:	9f 8b       	std	Y+23, r25	; 0x17
		return 1 ;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	01 c0       	rjmp	.+2      	; 0x24c6 <isPID_time+0x4a>
	}
	else
		return 0 ;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cb2 <__subsf3>:
    2cb2:	50 58       	subi	r21, 0x80	; 128

00002cb4 <__addsf3>:
    2cb4:	bb 27       	eor	r27, r27
    2cb6:	aa 27       	eor	r26, r26
    2cb8:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__addsf3x>
    2cbc:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001dc4 <__addsf3x>:
    1dc4:	11 c0       	rjmp	.+34     	; 0x1de8 <__addsf3x+0x24>
    1dc6:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_pscA>
    1dca:	38 f0       	brcs	.+14     	; 0x1dda <__addsf3x+0x16>
    1dcc:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_pscB>
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <__addsf3x+0x16>
    1dd2:	39 f4       	brne	.+14     	; 0x1de2 <__addsf3x+0x1e>
    1dd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <__addsf3x+0x1a>
    1dd8:	26 f4       	brtc	.+8      	; 0x1de2 <__addsf3x+0x1e>
    1dda:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_nan>
    1dde:	0e f4       	brtc	.+2      	; 0x1de2 <__addsf3x+0x1e>
    1de0:	e0 95       	com	r30
    1de2:	e7 fb       	bst	r30, 7
    1de4:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__fp_inf>
    1de8:	e9 2f       	mov	r30, r25
    1dea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    1dee:	58 f3       	brcs	.-42     	; 0x1dc6 <__addsf3x+0x2>
    1df0:	ba 17       	cp	r27, r26
    1df2:	62 07       	cpc	r22, r18
    1df4:	73 07       	cpc	r23, r19
    1df6:	84 07       	cpc	r24, r20
    1df8:	95 07       	cpc	r25, r21
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <__addsf3x+0x40>
    1dfc:	79 f4       	brne	.+30     	; 0x1e1c <__addsf3x+0x58>
    1dfe:	a6 f5       	brtc	.+104    	; 0x1e68 <__addsf3x+0xa4>
    1e00:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_zero>
    1e04:	0e f4       	brtc	.+2      	; 0x1e08 <__addsf3x+0x44>
    1e06:	e0 95       	com	r30
    1e08:	0b 2e       	mov	r0, r27
    1e0a:	ba 2f       	mov	r27, r26
    1e0c:	a0 2d       	mov	r26, r0
    1e0e:	0b 01       	movw	r0, r22
    1e10:	b9 01       	movw	r22, r18
    1e12:	90 01       	movw	r18, r0
    1e14:	0c 01       	movw	r0, r24
    1e16:	ca 01       	movw	r24, r20
    1e18:	a0 01       	movw	r20, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	ff 27       	eor	r31, r31
    1e1e:	59 1b       	sub	r21, r25
    1e20:	99 f0       	breq	.+38     	; 0x1e48 <__addsf3x+0x84>
    1e22:	59 3f       	cpi	r21, 0xF9	; 249
    1e24:	50 f4       	brcc	.+20     	; 0x1e3a <__addsf3x+0x76>
    1e26:	50 3e       	cpi	r21, 0xE0	; 224
    1e28:	68 f1       	brcs	.+90     	; 0x1e84 <__addsf3x+0xc0>
    1e2a:	1a 16       	cp	r1, r26
    1e2c:	f0 40       	sbci	r31, 0x00	; 0
    1e2e:	a2 2f       	mov	r26, r18
    1e30:	23 2f       	mov	r18, r19
    1e32:	34 2f       	mov	r19, r20
    1e34:	44 27       	eor	r20, r20
    1e36:	58 5f       	subi	r21, 0xF8	; 248
    1e38:	f3 cf       	rjmp	.-26     	; 0x1e20 <__addsf3x+0x5c>
    1e3a:	46 95       	lsr	r20
    1e3c:	37 95       	ror	r19
    1e3e:	27 95       	ror	r18
    1e40:	a7 95       	ror	r26
    1e42:	f0 40       	sbci	r31, 0x00	; 0
    1e44:	53 95       	inc	r21
    1e46:	c9 f7       	brne	.-14     	; 0x1e3a <__addsf3x+0x76>
    1e48:	7e f4       	brtc	.+30     	; 0x1e68 <__addsf3x+0xa4>
    1e4a:	1f 16       	cp	r1, r31
    1e4c:	ba 0b       	sbc	r27, r26
    1e4e:	62 0b       	sbc	r22, r18
    1e50:	73 0b       	sbc	r23, r19
    1e52:	84 0b       	sbc	r24, r20
    1e54:	ba f0       	brmi	.+46     	; 0x1e84 <__addsf3x+0xc0>
    1e56:	91 50       	subi	r25, 0x01	; 1
    1e58:	a1 f0       	breq	.+40     	; 0x1e82 <__addsf3x+0xbe>
    1e5a:	ff 0f       	add	r31, r31
    1e5c:	bb 1f       	adc	r27, r27
    1e5e:	66 1f       	adc	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	c2 f7       	brpl	.-16     	; 0x1e56 <__addsf3x+0x92>
    1e66:	0e c0       	rjmp	.+28     	; 0x1e84 <__addsf3x+0xc0>
    1e68:	ba 0f       	add	r27, r26
    1e6a:	62 1f       	adc	r22, r18
    1e6c:	73 1f       	adc	r23, r19
    1e6e:	84 1f       	adc	r24, r20
    1e70:	48 f4       	brcc	.+18     	; 0x1e84 <__addsf3x+0xc0>
    1e72:	87 95       	ror	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b7 95       	ror	r27
    1e7a:	f7 95       	ror	r31
    1e7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <__addsf3x+0xbe>
    1e80:	b0 cf       	rjmp	.-160    	; 0x1de2 <__addsf3x+0x1e>
    1e82:	93 95       	inc	r25
    1e84:	88 0f       	add	r24, r24
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <__addsf3x+0xc6>
    1e88:	99 27       	eor	r25, r25
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	97 95       	ror	r25
    1e8e:	87 95       	ror	r24
    1e90:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d0e <__cmpsf2>:
    2d0e:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_cmp>
    2d12:	08 f4       	brcc	.+2      	; 0x2d16 <__cmpsf2+0x8>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d2a <__divsf3>:
    2d2a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__divsf3x>
    2d2e:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001c12 <__divsf3x>:
    1c12:	10 c0       	rjmp	.+32     	; 0x1c34 <__divsf3x+0x22>
    1c14:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_pscB>
    1c18:	58 f0       	brcs	.+22     	; 0x1c30 <__divsf3x+0x1e>
    1c1a:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_pscA>
    1c1e:	40 f0       	brcs	.+16     	; 0x1c30 <__divsf3x+0x1e>
    1c20:	29 f4       	brne	.+10     	; 0x1c2c <__divsf3x+0x1a>
    1c22:	5f 3f       	cpi	r21, 0xFF	; 255
    1c24:	29 f0       	breq	.+10     	; 0x1c30 <__divsf3x+0x1e>
    1c26:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__fp_inf>
    1c2a:	51 11       	cpse	r21, r1
    1c2c:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_szero>
    1c30:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_nan>
    1c34:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    1c38:	68 f3       	brcs	.-38     	; 0x1c14 <__divsf3x+0x2>

00001c3a <__divsf3_pse>:
    1c3a:	99 23       	and	r25, r25
    1c3c:	b1 f3       	breq	.-20     	; 0x1c2a <__divsf3x+0x18>
    1c3e:	55 23       	and	r21, r21
    1c40:	91 f3       	breq	.-28     	; 0x1c26 <__divsf3x+0x14>
    1c42:	95 1b       	sub	r25, r21
    1c44:	55 0b       	sbc	r21, r21
    1c46:	bb 27       	eor	r27, r27
    1c48:	aa 27       	eor	r26, r26
    1c4a:	62 17       	cp	r22, r18
    1c4c:	73 07       	cpc	r23, r19
    1c4e:	84 07       	cpc	r24, r20
    1c50:	38 f0       	brcs	.+14     	; 0x1c60 <__divsf3_pse+0x26>
    1c52:	9f 5f       	subi	r25, 0xFF	; 255
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	44 1f       	adc	r20, r20
    1c5c:	aa 1f       	adc	r26, r26
    1c5e:	a9 f3       	breq	.-22     	; 0x1c4a <__divsf3_pse+0x10>
    1c60:	35 d0       	rcall	.+106    	; 0x1ccc <__divsf3_pse+0x92>
    1c62:	0e 2e       	mov	r0, r30
    1c64:	3a f0       	brmi	.+14     	; 0x1c74 <__divsf3_pse+0x3a>
    1c66:	e0 e8       	ldi	r30, 0x80	; 128
    1c68:	32 d0       	rcall	.+100    	; 0x1cce <__divsf3_pse+0x94>
    1c6a:	91 50       	subi	r25, 0x01	; 1
    1c6c:	50 40       	sbci	r21, 0x00	; 0
    1c6e:	e6 95       	lsr	r30
    1c70:	00 1c       	adc	r0, r0
    1c72:	ca f7       	brpl	.-14     	; 0x1c66 <__divsf3_pse+0x2c>
    1c74:	2b d0       	rcall	.+86     	; 0x1ccc <__divsf3_pse+0x92>
    1c76:	fe 2f       	mov	r31, r30
    1c78:	29 d0       	rcall	.+82     	; 0x1ccc <__divsf3_pse+0x92>
    1c7a:	66 0f       	add	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	88 1f       	adc	r24, r24
    1c80:	bb 1f       	adc	r27, r27
    1c82:	26 17       	cp	r18, r22
    1c84:	37 07       	cpc	r19, r23
    1c86:	48 07       	cpc	r20, r24
    1c88:	ab 07       	cpc	r26, r27
    1c8a:	b0 e8       	ldi	r27, 0x80	; 128
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <__divsf3_pse+0x56>
    1c8e:	bb 0b       	sbc	r27, r27
    1c90:	80 2d       	mov	r24, r0
    1c92:	bf 01       	movw	r22, r30
    1c94:	ff 27       	eor	r31, r31
    1c96:	93 58       	subi	r25, 0x83	; 131
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	3a f0       	brmi	.+14     	; 0x1caa <__divsf3_pse+0x70>
    1c9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	78 f0       	brcs	.+30     	; 0x1cc0 <__divsf3_pse+0x86>
    1ca2:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__fp_inf>
    1ca6:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_szero>
    1caa:	5f 3f       	cpi	r21, 0xFF	; 255
    1cac:	e4 f3       	brlt	.-8      	; 0x1ca6 <__divsf3_pse+0x6c>
    1cae:	98 3e       	cpi	r25, 0xE8	; 232
    1cb0:	d4 f3       	brlt	.-12     	; 0x1ca6 <__divsf3_pse+0x6c>
    1cb2:	86 95       	lsr	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f7 95       	ror	r31
    1cbc:	9f 5f       	subi	r25, 0xFF	; 255
    1cbe:	c9 f7       	brne	.-14     	; 0x1cb2 <__divsf3_pse+0x78>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	96 95       	lsr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	97 f9       	bld	r25, 7
    1cca:	08 95       	ret
    1ccc:	e1 e0       	ldi	r30, 0x01	; 1
    1cce:	66 0f       	add	r22, r22
    1cd0:	77 1f       	adc	r23, r23
    1cd2:	88 1f       	adc	r24, r24
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	62 17       	cp	r22, r18
    1cd8:	73 07       	cpc	r23, r19
    1cda:	84 07       	cpc	r24, r20
    1cdc:	ba 07       	cpc	r27, r26
    1cde:	20 f0       	brcs	.+8      	; 0x1ce8 <__divsf3_pse+0xae>
    1ce0:	62 1b       	sub	r22, r18
    1ce2:	73 0b       	sbc	r23, r19
    1ce4:	84 0b       	sbc	r24, r20
    1ce6:	ba 0b       	sbc	r27, r26
    1ce8:	ee 1f       	adc	r30, r30
    1cea:	88 f7       	brcc	.-30     	; 0x1cce <__divsf3_pse+0x94>
    1cec:	e0 95       	com	r30
    1cee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cc0 <__fixsfsi>:
    2cc0:	0e 94 0f 12 	call	0x241e	; 0x241e <__fixunssfsi>
    2cc4:	68 94       	set
    2cc6:	b1 11       	cpse	r27, r1
    2cc8:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_szero>
    2ccc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000241e <__fixunssfsi>:
    241e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__fp_splitA>
    2422:	88 f0       	brcs	.+34     	; 0x2446 <__fixunssfsi+0x28>
    2424:	9f 57       	subi	r25, 0x7F	; 127
    2426:	98 f0       	brcs	.+38     	; 0x244e <__fixunssfsi+0x30>
    2428:	b9 2f       	mov	r27, r25
    242a:	99 27       	eor	r25, r25
    242c:	b7 51       	subi	r27, 0x17	; 23
    242e:	b0 f0       	brcs	.+44     	; 0x245c <__fixunssfsi+0x3e>
    2430:	e1 f0       	breq	.+56     	; 0x246a <__fixunssfsi+0x4c>
    2432:	66 0f       	add	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	88 1f       	adc	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	1a f0       	brmi	.+6      	; 0x2442 <__fixunssfsi+0x24>
    243c:	ba 95       	dec	r27
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__fixunssfsi+0x14>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <__fixunssfsi+0x4c>
    2442:	b1 30       	cpi	r27, 0x01	; 1
    2444:	91 f0       	breq	.+36     	; 0x246a <__fixunssfsi+0x4c>
    2446:	0e 94 75 16 	call	0x2cea	; 0x2cea <__fp_zero>
    244a:	b1 e0       	ldi	r27, 0x01	; 1
    244c:	08 95       	ret
    244e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_zero>
    2452:	67 2f       	mov	r22, r23
    2454:	78 2f       	mov	r23, r24
    2456:	88 27       	eor	r24, r24
    2458:	b8 5f       	subi	r27, 0xF8	; 248
    245a:	39 f0       	breq	.+14     	; 0x246a <__fixunssfsi+0x4c>
    245c:	b9 3f       	cpi	r27, 0xF9	; 249
    245e:	cc f3       	brlt	.-14     	; 0x2452 <__fixunssfsi+0x34>
    2460:	86 95       	lsr	r24
    2462:	77 95       	ror	r23
    2464:	67 95       	ror	r22
    2466:	b3 95       	inc	r27
    2468:	d9 f7       	brne	.-10     	; 0x2460 <__fixunssfsi+0x42>
    246a:	3e f4       	brtc	.+14     	; 0x247a <__fixunssfsi+0x5c>
    246c:	90 95       	com	r25
    246e:	80 95       	com	r24
    2470:	70 95       	com	r23
    2472:	61 95       	neg	r22
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	8f 4f       	sbci	r24, 0xFF	; 255
    2478:	9f 4f       	sbci	r25, 0xFF	; 255
    247a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000022d0 <__floatunsisf>:
    22d0:	e8 94       	clt
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <__floatsisf+0x12>

000022d4 <__floatsisf>:
    22d4:	97 fb       	bst	r25, 7
    22d6:	3e f4       	brtc	.+14     	; 0x22e6 <__floatsisf+0x12>
    22d8:	90 95       	com	r25
    22da:	80 95       	com	r24
    22dc:	70 95       	com	r23
    22de:	61 95       	neg	r22
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	8f 4f       	sbci	r24, 0xFF	; 255
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	99 23       	and	r25, r25
    22e8:	a9 f0       	breq	.+42     	; 0x2314 <__floatsisf+0x40>
    22ea:	f9 2f       	mov	r31, r25
    22ec:	96 e9       	ldi	r25, 0x96	; 150
    22ee:	bb 27       	eor	r27, r27
    22f0:	93 95       	inc	r25
    22f2:	f6 95       	lsr	r31
    22f4:	87 95       	ror	r24
    22f6:	77 95       	ror	r23
    22f8:	67 95       	ror	r22
    22fa:	b7 95       	ror	r27
    22fc:	f1 11       	cpse	r31, r1
    22fe:	f8 cf       	rjmp	.-16     	; 0x22f0 <__floatsisf+0x1c>
    2300:	fa f4       	brpl	.+62     	; 0x2340 <__floatsisf+0x6c>
    2302:	bb 0f       	add	r27, r27
    2304:	11 f4       	brne	.+4      	; 0x230a <__floatsisf+0x36>
    2306:	60 ff       	sbrs	r22, 0
    2308:	1b c0       	rjmp	.+54     	; 0x2340 <__floatsisf+0x6c>
    230a:	6f 5f       	subi	r22, 0xFF	; 255
    230c:	7f 4f       	sbci	r23, 0xFF	; 255
    230e:	8f 4f       	sbci	r24, 0xFF	; 255
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	16 c0       	rjmp	.+44     	; 0x2340 <__floatsisf+0x6c>
    2314:	88 23       	and	r24, r24
    2316:	11 f0       	breq	.+4      	; 0x231c <__floatsisf+0x48>
    2318:	96 e9       	ldi	r25, 0x96	; 150
    231a:	11 c0       	rjmp	.+34     	; 0x233e <__floatsisf+0x6a>
    231c:	77 23       	and	r23, r23
    231e:	21 f0       	breq	.+8      	; 0x2328 <__floatsisf+0x54>
    2320:	9e e8       	ldi	r25, 0x8E	; 142
    2322:	87 2f       	mov	r24, r23
    2324:	76 2f       	mov	r23, r22
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <__floatsisf+0x5e>
    2328:	66 23       	and	r22, r22
    232a:	71 f0       	breq	.+28     	; 0x2348 <__floatsisf+0x74>
    232c:	96 e8       	ldi	r25, 0x86	; 134
    232e:	86 2f       	mov	r24, r22
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	2a f0       	brmi	.+10     	; 0x2340 <__floatsisf+0x6c>
    2336:	9a 95       	dec	r25
    2338:	66 0f       	add	r22, r22
    233a:	77 1f       	adc	r23, r23
    233c:	88 1f       	adc	r24, r24
    233e:	da f7       	brpl	.-10     	; 0x2336 <__floatsisf+0x62>
    2340:	88 0f       	add	r24, r24
    2342:	96 95       	lsr	r25
    2344:	87 95       	ror	r24
    2346:	97 f9       	bld	r25, 7
    2348:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000298a <__fp_cmp>:
    298a:	99 0f       	add	r25, r25
    298c:	00 08       	sbc	r0, r0
    298e:	55 0f       	add	r21, r21
    2990:	aa 0b       	sbc	r26, r26
    2992:	e0 e8       	ldi	r30, 0x80	; 128
    2994:	fe ef       	ldi	r31, 0xFE	; 254
    2996:	16 16       	cp	r1, r22
    2998:	17 06       	cpc	r1, r23
    299a:	e8 07       	cpc	r30, r24
    299c:	f9 07       	cpc	r31, r25
    299e:	c0 f0       	brcs	.+48     	; 0x29d0 <__fp_cmp+0x46>
    29a0:	12 16       	cp	r1, r18
    29a2:	13 06       	cpc	r1, r19
    29a4:	e4 07       	cpc	r30, r20
    29a6:	f5 07       	cpc	r31, r21
    29a8:	98 f0       	brcs	.+38     	; 0x29d0 <__fp_cmp+0x46>
    29aa:	62 1b       	sub	r22, r18
    29ac:	73 0b       	sbc	r23, r19
    29ae:	84 0b       	sbc	r24, r20
    29b0:	95 0b       	sbc	r25, r21
    29b2:	39 f4       	brne	.+14     	; 0x29c2 <__fp_cmp+0x38>
    29b4:	0a 26       	eor	r0, r26
    29b6:	61 f0       	breq	.+24     	; 0x29d0 <__fp_cmp+0x46>
    29b8:	23 2b       	or	r18, r19
    29ba:	24 2b       	or	r18, r20
    29bc:	25 2b       	or	r18, r21
    29be:	21 f4       	brne	.+8      	; 0x29c8 <__fp_cmp+0x3e>
    29c0:	08 95       	ret
    29c2:	0a 26       	eor	r0, r26
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <__fp_cmp+0x3e>
    29c6:	a1 40       	sbci	r26, 0x01	; 1
    29c8:	a6 95       	lsr	r26
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	81 1d       	adc	r24, r1
    29ce:	81 1d       	adc	r24, r1
    29d0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cf8 <__fp_inf>:
    2cf8:	97 f9       	bld	r25, 7
    2cfa:	9f 67       	ori	r25, 0x7F	; 127
    2cfc:	80 e8       	ldi	r24, 0x80	; 128
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d3a <__fp_nan>:
    2d3a:	9f ef       	ldi	r25, 0xFF	; 255
    2d3c:	80 ec       	ldi	r24, 0xC0	; 192
    2d3e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cce <__fp_pscA>:
    2cce:	00 24       	eor	r0, r0
    2cd0:	0a 94       	dec	r0
    2cd2:	16 16       	cp	r1, r22
    2cd4:	17 06       	cpc	r1, r23
    2cd6:	18 06       	cpc	r1, r24
    2cd8:	09 06       	cpc	r0, r25
    2cda:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cdc <__fp_pscB>:
    2cdc:	00 24       	eor	r0, r0
    2cde:	0a 94       	dec	r0
    2ce0:	12 16       	cp	r1, r18
    2ce2:	13 06       	cpc	r1, r19
    2ce4:	14 06       	cpc	r1, r20
    2ce6:	05 06       	cpc	r0, r21
    2ce8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002b7a <__fp_round>:
    2b7a:	09 2e       	mov	r0, r25
    2b7c:	03 94       	inc	r0
    2b7e:	00 0c       	add	r0, r0
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <__fp_round+0xc>
    2b82:	88 23       	and	r24, r24
    2b84:	52 f0       	brmi	.+20     	; 0x2b9a <__fp_round+0x20>
    2b86:	bb 0f       	add	r27, r27
    2b88:	40 f4       	brcc	.+16     	; 0x2b9a <__fp_round+0x20>
    2b8a:	bf 2b       	or	r27, r31
    2b8c:	11 f4       	brne	.+4      	; 0x2b92 <__fp_round+0x18>
    2b8e:	60 ff       	sbrs	r22, 0
    2b90:	04 c0       	rjmp	.+8      	; 0x2b9a <__fp_round+0x20>
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002a16 <__fp_split3>:
    2a16:	57 fd       	sbrc	r21, 7
    2a18:	90 58       	subi	r25, 0x80	; 128
    2a1a:	44 0f       	add	r20, r20
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	59 f0       	breq	.+22     	; 0x2a36 <__fp_splitA+0x10>
    2a20:	5f 3f       	cpi	r21, 0xFF	; 255
    2a22:	71 f0       	breq	.+28     	; 0x2a40 <__fp_splitA+0x1a>
    2a24:	47 95       	ror	r20

00002a26 <__fp_splitA>:
    2a26:	88 0f       	add	r24, r24
    2a28:	97 fb       	bst	r25, 7
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	61 f0       	breq	.+24     	; 0x2a46 <__fp_splitA+0x20>
    2a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a30:	79 f0       	breq	.+30     	; 0x2a50 <__fp_splitA+0x2a>
    2a32:	87 95       	ror	r24
    2a34:	08 95       	ret
    2a36:	12 16       	cp	r1, r18
    2a38:	13 06       	cpc	r1, r19
    2a3a:	14 06       	cpc	r1, r20
    2a3c:	55 1f       	adc	r21, r21
    2a3e:	f2 cf       	rjmp	.-28     	; 0x2a24 <__fp_split3+0xe>
    2a40:	46 95       	lsr	r20
    2a42:	f1 df       	rcall	.-30     	; 0x2a26 <__fp_splitA>
    2a44:	08 c0       	rjmp	.+16     	; 0x2a56 <__fp_splitA+0x30>
    2a46:	16 16       	cp	r1, r22
    2a48:	17 06       	cpc	r1, r23
    2a4a:	18 06       	cpc	r1, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	f1 cf       	rjmp	.-30     	; 0x2a32 <__fp_splitA+0xc>
    2a50:	86 95       	lsr	r24
    2a52:	71 05       	cpc	r23, r1
    2a54:	61 05       	cpc	r22, r1
    2a56:	08 94       	sec
    2a58:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cea <__fp_zero>:
    2cea:	e8 94       	clt

00002cec <__fp_szero>:
    2cec:	bb 27       	eor	r27, r27
    2cee:	66 27       	eor	r22, r22
    2cf0:	77 27       	eor	r23, r23
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	97 f9       	bld	r25, 7
    2cf6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d18 <__gesf2>:
    2d18:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_cmp>
    2d1c:	08 f4       	brcc	.+2      	; 0x2d20 <__gesf2+0x8>
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d32 <__mulsf3>:
    2d32:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3x>
    2d36:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001cf0 <__mulsf3x>:
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <__mulsf3x+0x20>
    1cf2:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_pscA>
    1cf6:	38 f0       	brcs	.+14     	; 0x1d06 <__mulsf3x+0x16>
    1cf8:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_pscB>
    1cfc:	20 f0       	brcs	.+8      	; 0x1d06 <__mulsf3x+0x16>
    1cfe:	95 23       	and	r25, r21
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <__mulsf3x+0x16>
    1d02:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__fp_inf>
    1d06:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__fp_nan>
    1d0a:	11 24       	eor	r1, r1
    1d0c:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_szero>
    1d10:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    1d14:	70 f3       	brcs	.-36     	; 0x1cf2 <__mulsf3x+0x2>

00001d16 <__mulsf3_pse>:
    1d16:	95 9f       	mul	r25, r21
    1d18:	c1 f3       	breq	.-16     	; 0x1d0a <__mulsf3x+0x1a>
    1d1a:	95 0f       	add	r25, r21
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	55 1f       	adc	r21, r21
    1d20:	62 9f       	mul	r22, r18
    1d22:	f0 01       	movw	r30, r0
    1d24:	72 9f       	mul	r23, r18
    1d26:	bb 27       	eor	r27, r27
    1d28:	f0 0d       	add	r31, r0
    1d2a:	b1 1d       	adc	r27, r1
    1d2c:	63 9f       	mul	r22, r19
    1d2e:	aa 27       	eor	r26, r26
    1d30:	f0 0d       	add	r31, r0
    1d32:	b1 1d       	adc	r27, r1
    1d34:	aa 1f       	adc	r26, r26
    1d36:	64 9f       	mul	r22, r20
    1d38:	66 27       	eor	r22, r22
    1d3a:	b0 0d       	add	r27, r0
    1d3c:	a1 1d       	adc	r26, r1
    1d3e:	66 1f       	adc	r22, r22
    1d40:	82 9f       	mul	r24, r18
    1d42:	22 27       	eor	r18, r18
    1d44:	b0 0d       	add	r27, r0
    1d46:	a1 1d       	adc	r26, r1
    1d48:	62 1f       	adc	r22, r18
    1d4a:	73 9f       	mul	r23, r19
    1d4c:	b0 0d       	add	r27, r0
    1d4e:	a1 1d       	adc	r26, r1
    1d50:	62 1f       	adc	r22, r18
    1d52:	83 9f       	mul	r24, r19
    1d54:	a0 0d       	add	r26, r0
    1d56:	61 1d       	adc	r22, r1
    1d58:	22 1f       	adc	r18, r18
    1d5a:	74 9f       	mul	r23, r20
    1d5c:	33 27       	eor	r19, r19
    1d5e:	a0 0d       	add	r26, r0
    1d60:	61 1d       	adc	r22, r1
    1d62:	23 1f       	adc	r18, r19
    1d64:	84 9f       	mul	r24, r20
    1d66:	60 0d       	add	r22, r0
    1d68:	21 1d       	adc	r18, r1
    1d6a:	82 2f       	mov	r24, r18
    1d6c:	76 2f       	mov	r23, r22
    1d6e:	6a 2f       	mov	r22, r26
    1d70:	11 24       	eor	r1, r1
    1d72:	9f 57       	subi	r25, 0x7F	; 127
    1d74:	50 40       	sbci	r21, 0x00	; 0
    1d76:	9a f0       	brmi	.+38     	; 0x1d9e <__mulsf3_pse+0x88>
    1d78:	f1 f0       	breq	.+60     	; 0x1db6 <__mulsf3_pse+0xa0>
    1d7a:	88 23       	and	r24, r24
    1d7c:	4a f0       	brmi	.+18     	; 0x1d90 <__mulsf3_pse+0x7a>
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	bb 1f       	adc	r27, r27
    1d84:	66 1f       	adc	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	88 1f       	adc	r24, r24
    1d8a:	91 50       	subi	r25, 0x01	; 1
    1d8c:	50 40       	sbci	r21, 0x00	; 0
    1d8e:	a9 f7       	brne	.-22     	; 0x1d7a <__mulsf3_pse+0x64>
    1d90:	9e 3f       	cpi	r25, 0xFE	; 254
    1d92:	51 05       	cpc	r21, r1
    1d94:	80 f0       	brcs	.+32     	; 0x1db6 <__mulsf3_pse+0xa0>
    1d96:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__fp_inf>
    1d9a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_szero>
    1d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1da0:	e4 f3       	brlt	.-8      	; 0x1d9a <__mulsf3_pse+0x84>
    1da2:	98 3e       	cpi	r25, 0xE8	; 232
    1da4:	d4 f3       	brlt	.-12     	; 0x1d9a <__mulsf3_pse+0x84>
    1da6:	86 95       	lsr	r24
    1da8:	77 95       	ror	r23
    1daa:	67 95       	ror	r22
    1dac:	b7 95       	ror	r27
    1dae:	f7 95       	ror	r31
    1db0:	e7 95       	ror	r30
    1db2:	9f 5f       	subi	r25, 0xFF	; 255
    1db4:	c1 f7       	brne	.-16     	; 0x1da6 <__mulsf3_pse+0x90>
    1db6:	fe 2b       	or	r31, r30
    1db8:	88 0f       	add	r24, r24
    1dba:	91 1d       	adc	r25, r1
    1dbc:	96 95       	lsr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002a5a <__udivmodsi4>:
    2a5a:	a1 e2       	ldi	r26, 0x21	; 33
    2a5c:	1a 2e       	mov	r1, r26
    2a5e:	aa 1b       	sub	r26, r26
    2a60:	bb 1b       	sub	r27, r27
    2a62:	fd 01       	movw	r30, r26
    2a64:	0d c0       	rjmp	.+26     	; 0x2a80 <__udivmodsi4_ep>

00002a66 <__udivmodsi4_loop>:
    2a66:	aa 1f       	adc	r26, r26
    2a68:	bb 1f       	adc	r27, r27
    2a6a:	ee 1f       	adc	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	a2 17       	cp	r26, r18
    2a70:	b3 07       	cpc	r27, r19
    2a72:	e4 07       	cpc	r30, r20
    2a74:	f5 07       	cpc	r31, r21
    2a76:	20 f0       	brcs	.+8      	; 0x2a80 <__udivmodsi4_ep>
    2a78:	a2 1b       	sub	r26, r18
    2a7a:	b3 0b       	sbc	r27, r19
    2a7c:	e4 0b       	sbc	r30, r20
    2a7e:	f5 0b       	sbc	r31, r21

00002a80 <__udivmodsi4_ep>:
    2a80:	66 1f       	adc	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	1a 94       	dec	r1
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <__udivmodsi4_loop>
    2a8c:	60 95       	com	r22
    2a8e:	70 95       	com	r23
    2a90:	80 95       	com	r24
    2a92:	90 95       	com	r25
    2a94:	9b 01       	movw	r18, r22
    2a96:	ac 01       	movw	r20, r24
    2a98:	bd 01       	movw	r22, r26
    2a9a:	cf 01       	movw	r24, r30
    2a9c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00002bdc <__umulhisi3>:
    2bdc:	a2 9f       	mul	r26, r18
    2bde:	b0 01       	movw	r22, r0
    2be0:	b3 9f       	mul	r27, r19
    2be2:	c0 01       	movw	r24, r0
    2be4:	a3 9f       	mul	r26, r19
    2be6:	70 0d       	add	r23, r0
    2be8:	81 1d       	adc	r24, r1
    2bea:	11 24       	eor	r1, r1
    2bec:	91 1d       	adc	r25, r1
    2bee:	b2 9f       	mul	r27, r18
    2bf0:	70 0d       	add	r23, r0
    2bf2:	81 1d       	adc	r24, r1
    2bf4:	11 24       	eor	r1, r1
    2bf6:	91 1d       	adc	r25, r1
    2bf8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00002c42 <__muluhisi3>:
    2c42:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2c46:	a5 9f       	mul	r26, r21
    2c48:	90 0d       	add	r25, r0
    2c4a:	b4 9f       	mul	r27, r20
    2c4c:	90 0d       	add	r25, r0
    2c4e:	a4 9f       	mul	r26, r20
    2c50:	80 0d       	add	r24, r0
    2c52:	91 1d       	adc	r25, r1
    2c54:	11 24       	eor	r1, r1
    2c56:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001fe2 <__muldi3>:
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	1f 93       	push	r17
    1fe8:	0f 93       	push	r16
    1fea:	9a 9d       	mul	r25, r10
    1fec:	f0 2d       	mov	r31, r0
    1fee:	21 9f       	mul	r18, r17
    1ff0:	f0 0d       	add	r31, r0
    1ff2:	8b 9d       	mul	r24, r11
    1ff4:	f0 0d       	add	r31, r0
    1ff6:	8a 9d       	mul	r24, r10
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	f1 0d       	add	r31, r1
    1ffc:	03 9f       	mul	r16, r19
    1ffe:	f0 0d       	add	r31, r0
    2000:	02 9f       	mul	r16, r18
    2002:	e0 0d       	add	r30, r0
    2004:	f1 1d       	adc	r31, r1
    2006:	4e 9d       	mul	r20, r14
    2008:	e0 0d       	add	r30, r0
    200a:	f1 1d       	adc	r31, r1
    200c:	5e 9d       	mul	r21, r14
    200e:	f0 0d       	add	r31, r0
    2010:	4f 9d       	mul	r20, r15
    2012:	f0 0d       	add	r31, r0
    2014:	7f 93       	push	r23
    2016:	6f 93       	push	r22
    2018:	bf 92       	push	r11
    201a:	af 92       	push	r10
    201c:	5f 93       	push	r21
    201e:	4f 93       	push	r20
    2020:	d5 01       	movw	r26, r10
    2022:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2026:	8b 01       	movw	r16, r22
    2028:	ac 01       	movw	r20, r24
    202a:	d7 01       	movw	r26, r14
    202c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2030:	eb 01       	movw	r28, r22
    2032:	e8 0f       	add	r30, r24
    2034:	f9 1f       	adc	r31, r25
    2036:	d6 01       	movw	r26, r12
    2038:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__muldi3_6>
    203c:	2f 91       	pop	r18
    203e:	3f 91       	pop	r19
    2040:	d6 01       	movw	r26, r12
    2042:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2046:	c6 0f       	add	r28, r22
    2048:	d7 1f       	adc	r29, r23
    204a:	e8 1f       	adc	r30, r24
    204c:	f9 1f       	adc	r31, r25
    204e:	af 91       	pop	r26
    2050:	bf 91       	pop	r27
    2052:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__muldi3_6>
    2056:	2f 91       	pop	r18
    2058:	3f 91       	pop	r19
    205a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    205e:	c6 0f       	add	r28, r22
    2060:	d7 1f       	adc	r29, r23
    2062:	e8 1f       	adc	r30, r24
    2064:	f9 1f       	adc	r31, r25
    2066:	d6 01       	movw	r26, r12
    2068:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    206c:	e6 0f       	add	r30, r22
    206e:	f7 1f       	adc	r31, r23
    2070:	98 01       	movw	r18, r16
    2072:	be 01       	movw	r22, r28
    2074:	cf 01       	movw	r24, r30
    2076:	11 24       	eor	r1, r1
    2078:	0f 91       	pop	r16
    207a:	1f 91       	pop	r17
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00002c92 <__muldi3_6>:
    2c92:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    2c96:	46 0f       	add	r20, r22
    2c98:	57 1f       	adc	r21, r23
    2c9a:	c8 1f       	adc	r28, r24
    2c9c:	d9 1f       	adc	r29, r25
    2c9e:	08 f4       	brcc	.+2      	; 0x2ca2 <__muldi3_6+0x10>
    2ca0:	31 96       	adiw	r30, 0x01	; 1
    2ca2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002bfa <__umoddi3>:
    2bfa:	68 94       	set
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <__udivdi3_umoddi3>

00002bfe <__udivdi3>:
    2bfe:	e8 94       	clt

00002c00 <__udivdi3_umoddi3>:
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__udivmod64>
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	9f 90       	pop	r9
    2c12:	8f 90       	pop	r8
    2c14:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001f40 <__udivmod64>:
    1f40:	88 24       	eor	r8, r8
    1f42:	99 24       	eor	r9, r9
    1f44:	f4 01       	movw	r30, r8
    1f46:	e4 01       	movw	r28, r8
    1f48:	b0 e4       	ldi	r27, 0x40	; 64
    1f4a:	9f 93       	push	r25
    1f4c:	aa 27       	eor	r26, r26
    1f4e:	9a 15       	cp	r25, r10
    1f50:	8b 04       	cpc	r8, r11
    1f52:	9c 04       	cpc	r9, r12
    1f54:	ed 05       	cpc	r30, r13
    1f56:	fe 05       	cpc	r31, r14
    1f58:	cf 05       	cpc	r28, r15
    1f5a:	d0 07       	cpc	r29, r16
    1f5c:	a1 07       	cpc	r26, r17
    1f5e:	98 f4       	brcc	.+38     	; 0x1f86 <__udivmod64+0x46>
    1f60:	ad 2f       	mov	r26, r29
    1f62:	dc 2f       	mov	r29, r28
    1f64:	cf 2f       	mov	r28, r31
    1f66:	fe 2f       	mov	r31, r30
    1f68:	e9 2d       	mov	r30, r9
    1f6a:	98 2c       	mov	r9, r8
    1f6c:	89 2e       	mov	r8, r25
    1f6e:	98 2f       	mov	r25, r24
    1f70:	87 2f       	mov	r24, r23
    1f72:	76 2f       	mov	r23, r22
    1f74:	65 2f       	mov	r22, r21
    1f76:	54 2f       	mov	r21, r20
    1f78:	43 2f       	mov	r20, r19
    1f7a:	32 2f       	mov	r19, r18
    1f7c:	22 27       	eor	r18, r18
    1f7e:	b8 50       	subi	r27, 0x08	; 8
    1f80:	31 f7       	brne	.-52     	; 0x1f4e <__udivmod64+0xe>
    1f82:	bf 91       	pop	r27
    1f84:	27 c0       	rjmp	.+78     	; 0x1fd4 <__udivmod64+0x94>
    1f86:	1b 2e       	mov	r1, r27
    1f88:	bf 91       	pop	r27
    1f8a:	bb 27       	eor	r27, r27
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	44 1f       	adc	r20, r20
    1f92:	55 1f       	adc	r21, r21
    1f94:	66 1f       	adc	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 1c       	adc	r8, r8
    1f9e:	99 1c       	adc	r9, r9
    1fa0:	ee 1f       	adc	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	cc 1f       	adc	r28, r28
    1fa6:	dd 1f       	adc	r29, r29
    1fa8:	aa 1f       	adc	r26, r26
    1faa:	bb 1f       	adc	r27, r27
    1fac:	8a 14       	cp	r8, r10
    1fae:	9b 04       	cpc	r9, r11
    1fb0:	ec 05       	cpc	r30, r12
    1fb2:	fd 05       	cpc	r31, r13
    1fb4:	ce 05       	cpc	r28, r14
    1fb6:	df 05       	cpc	r29, r15
    1fb8:	a0 07       	cpc	r26, r16
    1fba:	b1 07       	cpc	r27, r17
    1fbc:	48 f0       	brcs	.+18     	; 0x1fd0 <__udivmod64+0x90>
    1fbe:	8a 18       	sub	r8, r10
    1fc0:	9b 08       	sbc	r9, r11
    1fc2:	ec 09       	sbc	r30, r12
    1fc4:	fd 09       	sbc	r31, r13
    1fc6:	ce 09       	sbc	r28, r14
    1fc8:	df 09       	sbc	r29, r15
    1fca:	a0 0b       	sbc	r26, r16
    1fcc:	b1 0b       	sbc	r27, r17
    1fce:	21 60       	ori	r18, 0x01	; 1
    1fd0:	1a 94       	dec	r1
    1fd2:	e1 f6       	brne	.-72     	; 0x1f8c <__udivmod64+0x4c>
    1fd4:	2e f4       	brtc	.+10     	; 0x1fe0 <__udivmod64+0xa0>
    1fd6:	94 01       	movw	r18, r8
    1fd8:	af 01       	movw	r20, r30
    1fda:	be 01       	movw	r22, r28
    1fdc:	cd 01       	movw	r24, r26
    1fde:	00 0c       	add	r0, r0
    1fe0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000163e <malloc>:
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	91 05       	cpc	r25, r1
    164a:	10 f4       	brcc	.+4      	; 0x1650 <malloc+0x12>
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__flp>
    1654:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__flp+0x1>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	19 f1       	breq	.+70     	; 0x16aa <malloc+0x6c>
    1664:	40 81       	ld	r20, Z
    1666:	51 81       	ldd	r21, Z+1	; 0x01
    1668:	02 81       	ldd	r16, Z+2	; 0x02
    166a:	13 81       	ldd	r17, Z+3	; 0x03
    166c:	48 17       	cp	r20, r24
    166e:	59 07       	cpc	r21, r25
    1670:	c8 f0       	brcs	.+50     	; 0x16a4 <malloc+0x66>
    1672:	84 17       	cp	r24, r20
    1674:	95 07       	cpc	r25, r21
    1676:	69 f4       	brne	.+26     	; 0x1692 <malloc+0x54>
    1678:	10 97       	sbiw	r26, 0x00	; 0
    167a:	31 f0       	breq	.+12     	; 0x1688 <malloc+0x4a>
    167c:	12 96       	adiw	r26, 0x02	; 2
    167e:	0c 93       	st	X, r16
    1680:	12 97       	sbiw	r26, 0x02	; 2
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	1c 93       	st	X, r17
    1686:	27 c0       	rjmp	.+78     	; 0x16d6 <malloc+0x98>
    1688:	00 93 2f 01 	sts	0x012F, r16	; 0x80012f <__flp>
    168c:	10 93 30 01 	sts	0x0130, r17	; 0x800130 <__flp+0x1>
    1690:	22 c0       	rjmp	.+68     	; 0x16d6 <malloc+0x98>
    1692:	21 15       	cp	r18, r1
    1694:	31 05       	cpc	r19, r1
    1696:	19 f0       	breq	.+6      	; 0x169e <malloc+0x60>
    1698:	42 17       	cp	r20, r18
    169a:	53 07       	cpc	r21, r19
    169c:	18 f4       	brcc	.+6      	; 0x16a4 <malloc+0x66>
    169e:	9a 01       	movw	r18, r20
    16a0:	bd 01       	movw	r22, r26
    16a2:	ef 01       	movw	r28, r30
    16a4:	df 01       	movw	r26, r30
    16a6:	f8 01       	movw	r30, r16
    16a8:	db cf       	rjmp	.-74     	; 0x1660 <malloc+0x22>
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	f9 f0       	breq	.+62     	; 0x16ee <malloc+0xb0>
    16b0:	28 1b       	sub	r18, r24
    16b2:	39 0b       	sbc	r19, r25
    16b4:	24 30       	cpi	r18, 0x04	; 4
    16b6:	31 05       	cpc	r19, r1
    16b8:	80 f4       	brcc	.+32     	; 0x16da <malloc+0x9c>
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	61 15       	cp	r22, r1
    16c0:	71 05       	cpc	r23, r1
    16c2:	21 f0       	breq	.+8      	; 0x16cc <malloc+0x8e>
    16c4:	fb 01       	movw	r30, r22
    16c6:	93 83       	std	Z+3, r25	; 0x03
    16c8:	82 83       	std	Z+2, r24	; 0x02
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <malloc+0x96>
    16cc:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__flp+0x1>
    16d0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__flp>
    16d4:	fe 01       	movw	r30, r28
    16d6:	32 96       	adiw	r30, 0x02	; 2
    16d8:	44 c0       	rjmp	.+136    	; 0x1762 <malloc+0x124>
    16da:	fe 01       	movw	r30, r28
    16dc:	e2 0f       	add	r30, r18
    16de:	f3 1f       	adc	r31, r19
    16e0:	81 93       	st	Z+, r24
    16e2:	91 93       	st	Z+, r25
    16e4:	22 50       	subi	r18, 0x02	; 2
    16e6:	31 09       	sbc	r19, r1
    16e8:	39 83       	std	Y+1, r19	; 0x01
    16ea:	28 83       	st	Y, r18
    16ec:	3a c0       	rjmp	.+116    	; 0x1762 <malloc+0x124>
    16ee:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
    16f2:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
    16f6:	23 2b       	or	r18, r19
    16f8:	41 f4       	brne	.+16     	; 0x170a <malloc+0xcc>
    16fa:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__malloc_heap_start>
    16fe:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__malloc_heap_start+0x1>
    1702:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <__brkval+0x1>
    1706:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <__brkval>
    170a:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__malloc_heap_end>
    170e:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__malloc_heap_end+0x1>
    1712:	21 15       	cp	r18, r1
    1714:	31 05       	cpc	r19, r1
    1716:	41 f4       	brne	.+16     	; 0x1728 <malloc+0xea>
    1718:	2d b7       	in	r18, 0x3d	; 61
    171a:	3e b7       	in	r19, 0x3e	; 62
    171c:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <__malloc_margin>
    1720:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <__malloc_margin+0x1>
    1724:	24 1b       	sub	r18, r20
    1726:	35 0b       	sbc	r19, r21
    1728:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__brkval>
    172c:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__brkval+0x1>
    1730:	e2 17       	cp	r30, r18
    1732:	f3 07       	cpc	r31, r19
    1734:	a0 f4       	brcc	.+40     	; 0x175e <malloc+0x120>
    1736:	2e 1b       	sub	r18, r30
    1738:	3f 0b       	sbc	r19, r31
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	78 f0       	brcs	.+30     	; 0x175e <malloc+0x120>
    1740:	ac 01       	movw	r20, r24
    1742:	4e 5f       	subi	r20, 0xFE	; 254
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	24 17       	cp	r18, r20
    1748:	35 07       	cpc	r19, r21
    174a:	48 f0       	brcs	.+18     	; 0x175e <malloc+0x120>
    174c:	4e 0f       	add	r20, r30
    174e:	5f 1f       	adc	r21, r31
    1750:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <__brkval+0x1>
    1754:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <__brkval>
    1758:	81 93       	st	Z+, r24
    175a:	91 93       	st	Z+, r25
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <malloc+0x124>
    175e:	e0 e0       	ldi	r30, 0x00	; 0
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	cf 01       	movw	r24, r30
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <free>:
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	09 f4       	brne	.+2      	; 0x1778 <free+0xa>
    1776:	81 c0       	rjmp	.+258    	; 0x187a <free+0x10c>
    1778:	fc 01       	movw	r30, r24
    177a:	32 97       	sbiw	r30, 0x02	; 2
    177c:	13 82       	std	Z+3, r1	; 0x03
    177e:	12 82       	std	Z+2, r1	; 0x02
    1780:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <__flp>
    1784:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <__flp+0x1>
    1788:	10 97       	sbiw	r26, 0x00	; 0
    178a:	81 f4       	brne	.+32     	; 0x17ac <free+0x3e>
    178c:	20 81       	ld	r18, Z
    178e:	31 81       	ldd	r19, Z+1	; 0x01
    1790:	82 0f       	add	r24, r18
    1792:	93 1f       	adc	r25, r19
    1794:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
    1798:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
    179c:	28 17       	cp	r18, r24
    179e:	39 07       	cpc	r19, r25
    17a0:	51 f5       	brne	.+84     	; 0x17f6 <free+0x88>
    17a2:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <__brkval+0x1>
    17a6:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <__brkval>
    17aa:	67 c0       	rjmp	.+206    	; 0x187a <free+0x10c>
    17ac:	ed 01       	movw	r28, r26
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	ce 17       	cp	r28, r30
    17b4:	df 07       	cpc	r29, r31
    17b6:	40 f4       	brcc	.+16     	; 0x17c8 <free+0x5a>
    17b8:	4a 81       	ldd	r20, Y+2	; 0x02
    17ba:	5b 81       	ldd	r21, Y+3	; 0x03
    17bc:	9e 01       	movw	r18, r28
    17be:	41 15       	cp	r20, r1
    17c0:	51 05       	cpc	r21, r1
    17c2:	f1 f0       	breq	.+60     	; 0x1800 <free+0x92>
    17c4:	ea 01       	movw	r28, r20
    17c6:	f5 cf       	rjmp	.-22     	; 0x17b2 <free+0x44>
    17c8:	d3 83       	std	Z+3, r29	; 0x03
    17ca:	c2 83       	std	Z+2, r28	; 0x02
    17cc:	40 81       	ld	r20, Z
    17ce:	51 81       	ldd	r21, Z+1	; 0x01
    17d0:	84 0f       	add	r24, r20
    17d2:	95 1f       	adc	r25, r21
    17d4:	c8 17       	cp	r28, r24
    17d6:	d9 07       	cpc	r29, r25
    17d8:	59 f4       	brne	.+22     	; 0x17f0 <free+0x82>
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	84 0f       	add	r24, r20
    17e0:	95 1f       	adc	r25, r21
    17e2:	02 96       	adiw	r24, 0x02	; 2
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	93 83       	std	Z+3, r25	; 0x03
    17ee:	82 83       	std	Z+2, r24	; 0x02
    17f0:	21 15       	cp	r18, r1
    17f2:	31 05       	cpc	r19, r1
    17f4:	29 f4       	brne	.+10     	; 0x1800 <free+0x92>
    17f6:	f0 93 30 01 	sts	0x0130, r31	; 0x800130 <__flp+0x1>
    17fa:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <__flp>
    17fe:	3d c0       	rjmp	.+122    	; 0x187a <free+0x10c>
    1800:	e9 01       	movw	r28, r18
    1802:	fb 83       	std	Y+3, r31	; 0x03
    1804:	ea 83       	std	Y+2, r30	; 0x02
    1806:	49 91       	ld	r20, Y+
    1808:	59 91       	ld	r21, Y+
    180a:	c4 0f       	add	r28, r20
    180c:	d5 1f       	adc	r29, r21
    180e:	ec 17       	cp	r30, r28
    1810:	fd 07       	cpc	r31, r29
    1812:	61 f4       	brne	.+24     	; 0x182c <free+0xbe>
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	84 0f       	add	r24, r20
    181a:	95 1f       	adc	r25, r21
    181c:	02 96       	adiw	r24, 0x02	; 2
    181e:	e9 01       	movw	r28, r18
    1820:	99 83       	std	Y+1, r25	; 0x01
    1822:	88 83       	st	Y, r24
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	9b 83       	std	Y+3, r25	; 0x03
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	e0 e0       	ldi	r30, 0x00	; 0
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	12 96       	adiw	r26, 0x02	; 2
    1832:	8d 91       	ld	r24, X+
    1834:	9c 91       	ld	r25, X
    1836:	13 97       	sbiw	r26, 0x03	; 3
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	19 f0       	breq	.+6      	; 0x1842 <free+0xd4>
    183c:	fd 01       	movw	r30, r26
    183e:	dc 01       	movw	r26, r24
    1840:	f7 cf       	rjmp	.-18     	; 0x1830 <free+0xc2>
    1842:	8d 91       	ld	r24, X+
    1844:	9c 91       	ld	r25, X
    1846:	11 97       	sbiw	r26, 0x01	; 1
    1848:	9d 01       	movw	r18, r26
    184a:	2e 5f       	subi	r18, 0xFE	; 254
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	82 0f       	add	r24, r18
    1850:	93 1f       	adc	r25, r19
    1852:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
    1856:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
    185a:	28 17       	cp	r18, r24
    185c:	39 07       	cpc	r19, r25
    185e:	69 f4       	brne	.+26     	; 0x187a <free+0x10c>
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	29 f4       	brne	.+10     	; 0x186e <free+0x100>
    1864:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__flp+0x1>
    1868:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__flp>
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <free+0x104>
    186e:	13 82       	std	Z+3, r1	; 0x03
    1870:	12 82       	std	Z+2, r1	; 0x02
    1872:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <__brkval+0x1>
    1876:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <__brkval>
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret
